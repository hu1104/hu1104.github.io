<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hadoop_WSL2</title>
    <url>/article/Hadoop_WSL2/</url>
    <content><![CDATA[<h1 id="制作镜像"><a href="#制作镜像" class="headerlink" title="制作镜像"></a>制作镜像<a href="#制作镜像" class="header-anchor">#</a></h1><h2 id="1-拉取ubuntu镜像"><a href="#1-拉取Ubuntu镜像" class="headerlink" title="1. 拉取Ubuntu镜像"></a>1. 拉取Ubuntu镜像<a href="#1-拉取ubuntu镜像" class="header-anchor">#</a></h2><pre><code>首先拉取一个Ubuntu最新的镜像作为基础镜像`docker pull ubuntu:latest`,结束后，运行`docker images`,可以看到
</code></pre>
<p><img src="base_ubuntu.png" alt="图片" title="打开后显示图片"></p>
<h2 id="2-使用dockerfile构建包含jdk的ubuntu镜像"><a href="#2-使用Dockerfile构建包含jdk的ubuntu镜像" class="headerlink" title="2. 使用Dockerfile构建包含jdk的ubuntu镜像"></a>2. 使用Dockerfile构建包含jdk的ubuntu镜像<a href="#2-使用dockerfile构建包含jdk的ubuntu镜像" class="header-anchor">#</a></h2><pre><code>去jdk官网下载jdk包，此处下载的为jdk1.8 ** jdk-8u291-linux-x64.tar.gz**, 将下载好的jdk文件移至wsl2环境下，在此目录下新建Dockerfile文件，并进入编辑状态
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim Dockerfile</span><br></pre></td></tr></table></figure>

<span id="more"></span>
<p>&emsp;&emsp;在Dockerfile中输入以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM ubuntu:latest</span><br><span class="line">MAINTAINER duanmu</span><br><span class="line">ADD jdk-8u291-linux-x64.tar.gz /usr/local/</span><br><span class="line">ENV JAVA_HOME /usr/local/jdk1.8.0_291</span><br><span class="line">ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">ENV PATH $PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;编辑后保存，开始build镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t jdk-20210127 .</span><br></pre></td></tr></table></figure>

<h2 id="3-进入镜像"><a href="#3-进入镜像" class="headerlink" title="3. 进入镜像"></a>3. 进入镜像<a href="#3-进入镜像" class="header-anchor">#</a></h2><p>&emsp;&emsp;新建一个以jdk-20210127为基础镜像的容器命名为ubuntu_hadoop并指定容器的hostname为charlie,并进入容器。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it --name=ubuntu_hadoop -h charlie jdk-20210127</span><br></pre></td></tr></table></figure>

<h2 id="4-升级apt-get"><a href="#4-升级apt-get" class="headerlink" title="4. 升级apt-get"></a>4. 升级apt-get<a href="#4-升级apt-get" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure>

<h2 id="5-安装vim"><a href="#5-安装vim" class="headerlink" title="5. 安装vim"></a>5. 安装vim<a href="#5-安装vim" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install vim</span><br></pre></td></tr></table></figure>

<h2 id="6-更新apt-get镜像源"><a href="#6-更新apt-get镜像源" class="headerlink" title="6. 更新apt-get镜像源"></a>6. 更新apt-get镜像源<a href="#6-更新apt-get镜像源" class="header-anchor">#</a></h2><p>&emsp;&emsp;默认的apt-get下载源速度太慢，更换下载源可以提升速度,进入下载源列表文件，按a进入insert模式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure>
<p>将其中内容全部替换为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deb-src http://archive.ubuntu.com/ubuntu focal main restricted #Added by software-properties</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal main restricted</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted multiverse universe #Added by software-properties</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted multiverse universe #Added by software-properties</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-updates universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-updates multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse #Added by software-properties</span><br><span class="line">deb http://archive.canonical.com/ubuntu focal partner</span><br><span class="line">deb-src http://archive.canonical.com/ubuntu focal partner</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted multiverse universe #Added by software-properties</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-security universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-security multiverse</span><br></pre></td></tr></table></figure>

<h2 id="7-重新升级apt-get"><a href="#7-重新升级apt-get" class="headerlink" title="7. 重新升级apt-get"></a>7. 重新升级apt-get<a href="#7-重新升级apt-get" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure>

<h2 id="8-安装wget"><a href="#8-安装wget" class="headerlink" title="8. 安装wget"></a>8. 安装wget<a href="#8-安装wget" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install wget</span><br></pre></td></tr></table></figure>

<h2 id="9-创建并进入安装hadoop的文件目录"><a href="#9-创建并进入安装hadoop的文件目录" class="headerlink" title="9. 创建并进入安装hadoop的文件目录"></a>9. 创建并进入安装hadoop的文件目录<a href="#9-创建并进入安装hadoop的文件目录" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p soft/apache/hadoop/</span><br><span class="line">cd soft/apache/hadoop</span><br></pre></td></tr></table></figure>

<h2 id="10-通过wget下载安装hadoop安装包"><a href="#10-通过wget下载安装Hadoop安装包" class="headerlink" title="10. 通过wget下载安装Hadoop安装包"></a>10. 通过wget下载安装Hadoop安装包<a href="#10-通过wget下载安装hadoop安装包" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://mirrors.ustc.edu.cn/apache/hadoop/common/hadoop-3.3.0/hadoop-3.3.0.tar.gz</span><br></pre></td></tr></table></figure>

<h2 id="11-解压hadoop"><a href="#11-解压hadoop" class="headerlink" title="11. 解压hadoop"></a>11. 解压hadoop<a href="#11-解压hadoop" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -xvzf Hadoop-3.3.0.tar.gz</span><br></pre></td></tr></table></figure>

<h2 id="12-配置环境变量并重启配置文件"><a href="#12-配置环境变量并重启配置文件" class="headerlink" title="12. 配置环境变量并重启配置文件"></a>12. 配置环境变量并重启配置文件<a href="#12-配置环境变量并重启配置文件" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure>

<p>新增以下环境变量：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_291</span><br><span class="line">export HADOOP_HOME=/soft/apache/hadoop/hadoop-3.3.0</span><br><span class="line">export HADOOP_CONFIG_HOME=$HADOOP_HOME/etc/hadoop</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/bin</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/sbin</span><br></pre></td></tr></table></figure>

<p>并重启配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure>

<h2 id="13-创建文件夹并修改配置文件"><a href="#13-创建文件夹并修改配置文件" class="headerlink" title="13. 创建文件夹并修改配置文件"></a>13. 创建文件夹并修改配置文件<a href="#13-创建文件夹并修改配置文件" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd $HADOOP_HOME</span><br><span class="line">mkdir tmp</span><br><span class="line">mkdir namenode</span><br><span class="line">mkdir datanode</span><br></pre></td></tr></table></figure>

<p>修改配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd $HADOOP_CONFIG_HOME</span><br><span class="line">vim core-site.xml</span><br></pre></td></tr></table></figure>

<p>将下面内容替换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line">  you may not use this file except in compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to in writing, software</span><br><span class="line">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License for the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Put site-specific property overrides in this file. --&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;/soft/apache/hadoop/hadoop-3.3.0/tmp&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;fs.default.name&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;hdfs://master:9000&lt;/value&gt;</span><br><span class="line">        &lt;final&gt;true&lt;/final&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>

<p>更改hdfs-site.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim hdfs-site.xml</span><br></pre></td></tr></table></figure>

<p>用下面配置替换：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line">  you may not use this file except in compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to in writing, software</span><br><span class="line">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License for the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Put site-specific property overrides in this file. --&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;2&lt;/value&gt;</span><br><span class="line">        &lt;final&gt;true&lt;/final&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;/soft/apache/hadoop/hadoop-3.3.0/namenode&lt;/value&gt;</span><br><span class="line">        &lt;final&gt;true&lt;/final&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.datanode.name.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;/soft/apache/hadoop/hadoop-3.3.0/datanode&lt;/value&gt;</span><br><span class="line">        &lt;final&gt;true&lt;/final&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>

<p>接下来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim mapred-site.xml</span><br></pre></td></tr></table></figure>

<p>使用下面内容替换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line">  you may not use this file except in compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to in writing, software</span><br><span class="line">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License for the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Put site-specific property overrides in this file. --&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;mapred.job.tarcker&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;master:9001&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>

<h2 id="14-修改hadoop环境变量"><a href="#14-修改hadoop环境变量" class="headerlink" title="14. 修改hadoop环境变量"></a>14. 修改hadoop环境变量<a href="#14-修改hadoop环境变量" class="header-anchor">#</a></h2><p>在hadoop的安装目录下，找到<code>hadoop-env.sh</code>文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim hadoop-env.sh</span><br></pre></td></tr></table></figure>

<p>在最后添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_291</span><br></pre></td></tr></table></figure>

<p>刷新</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hadoop namenode -format</span><br></pre></td></tr></table></figure>

<h2 id="15-安装ssh"><a href="#15-安装SSH" class="headerlink" title="15. 安装SSH"></a>15. 安装SSH<a href="#15-安装ssh" class="header-anchor">#</a></h2><p>hadoop的环境必须满足ssh免密登陆，先安装ssh</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install net-tools</span><br><span class="line">apt-get install ssh</span><br></pre></td></tr></table></figure>

<p>创建sshd目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p ~/var/run/sshd</span><br></pre></td></tr></table></figure>

<p>生成访问密钥</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~/</span><br><span class="line">ssh-keygen -t rsa -P &#x27;&#x27; -f ~/.ssh/id_rsa</span><br><span class="line">cd .ssh</span><br><span class="line">cat id_rsa.pub &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure>

<p>这一步骤提示安装路径与设置密码时全布直接按回车即可设置成免密。</p>
<h3 id="修改ssh配置"><a href="#修改ssh配置" class="headerlink" title="修改ssh配置"></a>修改ssh配置<a href="#修改ssh配置" class="header-anchor">#</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/ssh/ssh_config</span><br></pre></td></tr></table></figure>

<p>添加,将下面这句话直接添加即可，也可以在文件中找到被注释的这句话去修改。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">StrictHostKeyChecking no #将ask改为no</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>

<p>在末尾添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#禁用密码验证</span><br><span class="line">PasswordAuthentication no</span><br><span class="line">#启用密钥验证</span><br><span class="line">RSAAuthentication yes</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line">AuthorizedKeysFile .ssh/authorized_keys</span><br></pre></td></tr></table></figure>

<p>最后使用下面语句测试是否免密登陆，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh localhost</span><br></pre></td></tr></table></figure>

<p>当出现报错时，考虑输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/init.d/ssh restart</span><br></pre></td></tr></table></figure>

<p>为了避免踩坑，先提前设置,进入环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure>

<p>增加如下内容并保存：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export HDFS_NAMENODE_USER=root</span><br><span class="line">export HDFS_DATANODE_USER=root</span><br><span class="line">export HDFS_SECONDARYNAMENODE_USER=root</span><br><span class="line">export YARN_RESOURCEMANAGER_USER=root</span><br><span class="line">export YARN_NODEMANAGER_USER=root</span><br></pre></td></tr></table></figure>

<p>使配置生效</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<h2 id="16-导出镜像"><a href="#16-导出镜像" class="headerlink" title="16. 导出镜像"></a>16. 导出镜像<a href="#16-导出镜像" class="header-anchor">#</a></h2><p>至此镜像已经配置完成，退出容器，将配置好的镜像保存，其中xxxx为刚刚操作的容器的id，可以使用docker ps -a查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker commit xxxx ubuntu:hadoop</span><br></pre></td></tr></table></figure>

<p>此时ubuntu_hadoop就是最终配置好的包含hadoop的镜像。</p>
<h2 id="17-集群测试"><a href="#17-集群测试" class="headerlink" title="17. 集群测试"></a>17. 集群测试<a href="#17-集群测试" class="header-anchor">#</a></h2><p>依次构建并启动三个以刚刚生成的镜像为基本镜像的容器，依次命名为master 、slave1、slave2，并将master做端口映射（提示：容器要处于运行状态，生成容器后使用ctrl+P+Q退出可以使容器保持后台运行。）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it  -h master --name=master -p 9870:9870 -p 8088:8088 -p 9000:9000 ubuntu:hadoop </span><br><span class="line">docker run -it  -h slave1 --name=slave1 ubuntu:hadoop </span><br><span class="line">docker run -it  -h slave2 --name=slave2 ubuntu:hadoop </span><br></pre></td></tr></table></figure>

<p>修改每个容器的host文件<br>对matser、slave1、slave2里的host文件，分别加入其他两个容器的ip</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1       localhost</span><br><span class="line">::1     localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0 ip6-localnet</span><br><span class="line">ff00::0 ip6-mcastprefix</span><br><span class="line">ff02::1 ip6-allnodes</span><br><span class="line">ff02::2 ip6-allrouters</span><br><span class="line">172.17.0.2      master</span><br><span class="line">172.17.0.3      slave1</span><br><span class="line">172.17.0.4      slave2 ###根据实际修改</span><br></pre></td></tr></table></figure>

<h3 id="修改master中slaves文件"><a href="#修改master中slaves文件" class="headerlink" title="修改master中slaves文件"></a>修改master中slaves文件<a href="#修改master中slaves文件" class="header-anchor">#</a></h3><p>注意，在hadoop3.3.0版本中并不是修改slaves文件，而是修改workers文件。此处为3.3.0版本的一些变化。<br>老版本（自行查找hadoop版本中已存在文件是slaves还是iworkers）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd $HADOOP_CONFIG_HOME/</span><br><span class="line">vim workers</span><br></pre></td></tr></table></figure>

<p>将其他两个节点名称加入文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">slave1</span><br><span class="line">slave2</span><br></pre></td></tr></table></figure>

<h3 id="启动hadoop"><a href="#启动hadoop" class="headerlink" title="启动hadoop"></a>启动hadoop<a href="#启动hadoop" class="header-anchor">#</a></h3><p>此时报错的话，可在每个节点运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>



<h1 id="reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference<a href="#reference" class="header-anchor">#</a></h1><ol>
<li><a href="https://blog.csdn.net/weixin_43993764/article/details/113405025">https://blog.csdn.net/weixin_43993764/article/details/113405025</a></li>
<li><a href="https://blog.csdn.net/u013015629/article/details/70045809">https://blog.csdn.net/u013015629/article/details/70045809</a></li>
</ol>
<!--
&emsp;&emsp;<font face="黑体" size=10>16. 我是黑体字</font>
-->

<div style="display:none">这是一段注释</div>]]></content>
  </entry>
  <entry>
    <title>LN_BN</title>
    <url>/article/LN-BN/</url>
    <content><![CDATA[<p>LN：Layer Normalization，LN是“横”着来的，对一个样本，不同的神经元neuron间做归一化。</p>
<p>BN：Batch Normalization，BN是“竖”着来的，各个维度做归一化，所以与batch size有关系。</p>
<p><img src="LN-BN/image-20210906155404860.png" alt="image-20210906155404860"></p>
<p><strong>优点：</strong>Bactch Normalization通过标准化让激活函数分布在线性区间，结果就是加大了梯度，让模型更大胆的进行梯度下降，具有如下优点：</p>
<ul>
<li>加大搜索的步长，加快收敛的速度；</li>
<li>更容易跳出局部最小值；</li>
<li>破坏原来的数据分布，一定程度上缓解了过拟合</li>
</ul>
<p><strong>缺陷如下：</strong></p>
<p>1、BN是在batch size样本上各个维度做标准化的，所以size越大肯定越能得出合理的μ和σ来做标准化，因此BN比较依赖size的大小。<br>2、在训练的时候，是分批量进行填入模型的，但是在预测的时候，如果只有一个样本或者很少量的样本来做inference，这个时候用BN显然偏差很大，例如在线学习场景。<br>3、RNN是一个动态的网络，也就是size是变化的，可大可小，造成多样本维度都没法对齐，所以不适合用BN。</p>
<p><strong>LN带来的优势：</strong></p>
<p>1、Layer Normalization是每个样本内部做标准化，跟size没关系，不受其影响。<br>2、RNN中LN也不受影响，内部自己做标准化，所以LN的应用面更广。</p>
<ul>
<li>BatchNorm：batch方向做归一化，计算N<em>H</em>W的均值</li>
<li>LayerNorm：channel方向做归一化，计算C<em>H</em>W的均值</li>
<li>InstanceNorm：一个channel内做归一化，计算H*W的均值</li>
<li>GroupNorm：先将channel方向分group，然后每个group内做归一化，计算(C//G)<em>H</em>W的均值</li>
</ul>
<h1 id="wn"><a href="#WN" class="headerlink" title="WN"></a>WN<a href="#wn" class="header-anchor">#</a></h1><p><img src="LN-BN/image-20210906155830408.png" alt="image-20210906155830408"></p>
<p><img src="LN-BN/image-20210906155845338.png" alt="image-20210906155845338"></p>
<h1 id="归一化操作"><a href="#归一化操作" class="headerlink" title="归一化操作"></a>归一化操作<a href="#归一化操作" class="header-anchor">#</a></h1><p><img src="LN-BN/image-20210906160001983.png" alt="image-20210906160001983"></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料<a href="#参考资料" class="header-anchor">#</a></h1><p><a href="https://www.cnblogs.com/gczr/p/12597344.html">https://www.cnblogs.com/gczr/p/12597344.html</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/33173246">详解深度学习中的Normalization，BN/LN/WN - 知乎 (zhihu.com)</a></p>
<p><a href="https://www.cnblogs.com/shine-lee/p/11779514.html">为什么要做特征归一化/标准化？ - shine-lee - 博客园 (cnblogs.com)</a></p>
]]></content>
  </entry>
  <entry>
    <title>WSL2安装Ubuntu</title>
    <url>/article/WSL2_Ubuntu/</url>
    <content><![CDATA[<h1 id="系统更新至预览版"><a href="#系统更新至预览版" class="headerlink" title="系统更新至预览版"></a>系统更新至预览版<a href="#系统更新至预览版" class="header-anchor">#</a></h1><ol>
<li><p>加入Windows Insider Program</p>
<p> <a href="https://insider.windows.com/en-us/getting-started">链接</a></p>
<p> <img src="wip.png" alt="图片" title="打开后显示"></p>
</li>
<li><p>注册加入完成后，前往【开始】菜单&gt;【设置】&gt;【更新和安全】&gt;【Windows 预览体验计划】，选择【开始】，然后点击【确认】。</p>
<p> <img src="update.png" alt="图片" title="打开后显示"><br> <img src="choose.png" alt="图片" title="打开后显示"><br> <img src="microsoft_login.png" alt="图片" title="打开后显示"></p>
</li>
<li><p>漫长的等待，等待过程中如果出现太久旋转没动静，可反复取消-选择账户，几次下来一般就可以了。随后使用加入Windows Insider Program时注册的账号密码，之后出现</p>
<p> <img src="dev.png" alt="图片" title="打开后显示"><br> 选择dev渠道，然后立即重启。</p>
</li>
<li><p>前往【开始】菜单&gt;【设置】&gt;【更新和安全】&gt;【Windows 更新】，下载更新完window，<br>选择【检查更新】，然后耐心等待最新 Windows 10 预览版的下载和安装。</p>
<p> <img src="update_wid.png" alt="图片" title="打开后显示"></p>
</li>
<li><p>检查系统更新成功与否</p>
<p> win+R-&gt;winver:<br> <img src="version.png" alt="图片" title="打开后显示"><br> 确认这里的os内部版本和第四步下载的版本一致</p>
 <span id="more"></span></li>
</ol>
<h1 id="安装驱动"><a href="#安装驱动" class="headerlink" title="安装驱动"></a>安装驱动<a href="#安装驱动" class="header-anchor">#</a></h1><ol>
<li><p>前往<a href="https://developer.nvidia.com/cuda/wsl">链接</a></p>
<p> <img src="driver.png" alt="图片" title="打开后显示"></p>
</li>
<li><p>下载完成后，正常win程序安装</p>
</li>
</ol>
<h1 id="安装wsl2"><a href="#安装WSL2" class="headerlink" title="安装WSL2"></a>安装WSL2<a href="#安装wsl2" class="header-anchor">#</a></h1><p>按照官方说法，使用预览版会有简单操作，但我是在未使用预览版时安装的，所以仅供参考。</p>
<ol>
<li><p>管理员身份运行power shell</p>
<p> 如果出现以下问题：<br> <img src="problem.png" alt="图片" title="打开后显示"><br> 则执行<code>set-ExecutionPolicy RemoteSigned</code><br> 成功结果为：<br> <img src="success.png" alt="图片" title="打开后显示"><br> 如果没有出现上述问题，则执行<code>dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</code>开启子系统<br> <img src="subsystem.png" alt="图片" title="打开后显示"><br> 然后，执行<code>dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</code>开启虚拟机<br> <img src="vm.png" alt="图片" title="打开后显示"><br> <font color="red">随后重启计算机！</font></p>
</li>
<li><p>安装WSL内核更新包<a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi">链接</a></p>
</li>
<li><p>将wsl2设置为默认版本：<code>set --set-default-version 2</code></p>
</li>
</ol>
<h1 id="安装ubuntu1804"><a href="#安装ubuntu18-04" class="headerlink" title="安装ubuntu18.04"></a>安装ubuntu18.04<a href="#安装ubuntu1804" class="header-anchor">#</a></h1><ol>
<li><p>打开Microsoft store,搜索ubuntu18,点击获取，等待下载安装，安装完成后，点击右上角的启动按钮，会出现下面操作；设置好用户名及密码，子系统安装完成。<br><img src="ubuntu.png" alt="图片" title="打开后显示"></p>
</li>
<li><p>安装完成后，运行<code>wsl --list --verbose</code><br><img src="wsl_lv.png" alt="图片" title="打开后显示"></p>
</li>
<li><p>运行</p>
<ul>
<li>点击ubuntu图标<br>  <img src="run_1.png" alt="图片" title="打开后显示"></li>
<li>在power shell中运行<code>wsl</code><br>  <img src="run_2.png" alt="图片" title="打开后显示"></li>
</ul>
</li>
</ol>
<h1 id="安装cuda-toolkit在ubuntu环境下"><a href="#安装cuda-toolkit-在ubuntu环境下" class="headerlink" title="安装cuda toolkit(在ubuntu环境下)"></a>安装cuda toolkit(在ubuntu环境下)<a href="#安装cuda-toolkit在ubuntu环境下" class="header-anchor">#</a></h1><ol>
<li><p>配置cuda网络仓库<br> 依次执行</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub</span><br><span class="line"></span><br><span class="line">sudo sh -c &#x27;echo &quot;deb http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64 /&quot; &gt; /etc/apt/sources.list.d/cuda.list&#x27;</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></li>
<li><p>安装cuda</p>
<p> 执行<code>sudo apt-get install -y cuda-toolkit-11-0</code></p>
</li>
</ol>
<h1 id="安装docker和nvidia-docker"><a href="#安装docker和nvidia-docker" class="headerlink" title="安装docker和nvidia-docker"></a>安装docker和nvidia-docker<a href="#安装docker和nvidia-docker" class="header-anchor">#</a></h1><ol>
<li><p>安装docker-ce:<code>curl https://get.docker.com | sh</code></p>
</li>
<li><p>安装nvidia-docker2:</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">distribution=$(. /etc/os-release;echo $ID$VERSION_ID)</span><br><span class="line"></span><br><span class="line">curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -</span><br><span class="line"></span><br><span class="line">curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list</span><br><span class="line"></span><br><span class="line">curl -s -L https://nvidia.github.io/libnvidia-container/experimental/$distribution/libnvidia-container-experimental.list | sudo tee /etc/apt/sources.list.d/libnvidia-container-experimental.list</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get install -y nvidia-docker2</span><br><span class="line"></span><br><span class="line">sudo gpasswd -a username docker ###username 为设置的Ubuntu用户名</span><br><span class="line"></span><br><span class="line">newgrp docker</span><br></pre></td></tr></table></figure></li>
<li><p>完成安装</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo service docker stop</span><br><span class="line"></span><br><span class="line">sudo service docker start</span><br></pre></td></tr></table></figure></li>
<li><p>验证安装<br> 执行<code>docker run --runtime=nvidia  --rm -it --name tensorflow-1.14.0 tensorflow/tensorflow:1.14.0-gpu-py3</code></p>
<p> 然后执行</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python</span><br><span class="line">import tensorflow as tf</span><br><span class="line">print(tf.test.is_gpu_available()) ###输出True</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference<a href="#reference" class="header-anchor">#</a></h1><ol>
<li><a href="https://docs.nvidia.com/cuda/wsl-user-guide/index.html">CUDA on WSL :: CUDA Toolkit Documentation (nvidia.com)</a></li>
</ol>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>win10</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>all_CN</title>
    <url>/article/all-CN/</url>
    <content><![CDATA[<h1 id="深度可分离卷积"><a href="#深度可分离卷积" class="headerlink" title="深度可分离卷积"></a>深度可分离卷积<a href="#深度可分离卷积" class="header-anchor">#</a></h1><p>假设输入是$D_{f^i} * D_{f^i} * M$ ,输出图大小是$D_{f^o}*D_{f^o}<em>N$, 卷积核大小是$D_k</em>D_k$</p>
<h2 id="普通卷积操作"><a href="#普通卷积操作" class="headerlink" title="普通卷积操作"></a>普通卷积操作<a href="#普通卷积操作" class="header-anchor">#</a></h2><p>输入图在经过卷积核（$D_k<em>D_k</em>M$）后输出为目标输出大小，但此时仅为$D_{f^o}*D_{f^o} * 1$ ,需要$N$个这样的操作才能得到目标特征图。</p>
<p>此时所需要的计算量有$D_{f^o}<em>D_{f^o}<em>D_k</em>D_k</em>M*N$。</p>
<h2 id="深度可分离卷积"><a href="#深度可分离卷积-1" class="headerlink" title="深度可分离卷积"></a>深度可分离卷积<a href="#深度可分离卷积" class="header-anchor">#</a></h2><p>输入图首先经过$M$个$D_k<em>D_k</em>1$的卷积核，这样可以得到$D_{f^o}*D_{f^o}*M$的特征图，其中$M$是堆叠出来的，此步骤叫做<code>depthwise convolution</code> 。</p>
<p>再经过$N$个$1<em>1</em>M$的卷积核，就可以得到$D_{f^o}*D_{f^o} *N$的特征图。此操作为<code>pointwise convolution</code>。</p>
<p>可以看出，深度可分离卷积可分为逐层卷积和逐点卷积两个步骤，</p>
<p>逐层卷积：</p>
<p><img src="all-CN/image-20210906145026434.png" alt="image-20210906145026434"></p>
<p>逐点卷积：</p>
<p><img src="all-CN/image-20210906145039602.png" alt="image-20210906145039602"></p>
<p><img src="all-CN/image-20210906145050415.png" alt="image-20210906145050415"></p>
<p>计算量分步骤计算分别为$D_k<em>D_k</em>M<em>D_{f^o}<em>D_{f^o}$和$N</em>1</em>1<em>M</em>D_{f^o}*D_{f^o}$。</p>
<p>则相比较与常规卷积$\frac {D_k<em>D_k</em>M<em>D_{f^o}<em>D_{f^o}+N</em>M</em>D_{f^o}<em>D_{f^o}}{D_{f^o}<em>D_{f^o}<em>D_k</em>D_k</em>M</em>N} = \frac {1}{N} + \frac {1}{D_k^2}$</p>
<p>针对一般$D_k=3$和$N$远大于9的情况，可知压缩比略小于9。</p>
<h2 id="速度思考"><a href="#速度思考" class="headerlink" title="速度思考"></a>速度思考<a href="#速度思考" class="header-anchor">#</a></h2><p>在速度方面，经过大量实验，我发现在算力足够的GPU平台上，MobileNet不会带来任何速度上的提升（有时甚至是下降的），然而在计算能力有限的平台上，MobileNet能让速度提升三倍以上。</p>
<p><strong>深度可分离卷积将一个标准卷积分割成了两个卷积（逐深度，逐点），因此减小了参数量，对应也减小了总计算量。</strong></p>
<p>好的，在上面的话中，我们可以发现一个有趣的事实：深度可分离卷积的<strong>总计算量变小了</strong>，但深度可分离卷积的<strong>层数变多了</strong>。</p>
<p>而结合我们对GPU和CPU的认识：GPU是并行处理大规模数据（矩阵内积）的运算平台，而CPU则倾向于对数据串行计算（一个一个算）。</p>
<p>因此，若GPU的显存足够大（干脆假设无限大好了），因为每层的计算都可以并行一次处理，则此时<strong>总运算时间的主导因素是网络的层数。</strong></p>
<p>而对于缺乏并行能力的CPU，总的运算时间的主导因素则是<strong>总计算量有关。</strong></p>
<h2 id="pytorch实现"><a href="#pytorch实现" class="headerlink" title="pytorch实现"></a>pytorch实现<a href="#pytorch实现" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import torch</span><br><span class="line">import torch.nn as nn</span><br><span class="line">import torch.nn.functional as F</span><br><span class="line"></span><br><span class="line">class Block(nn.Module):</span><br><span class="line">    &quot;Depthwise conv + Pointwise conv&quot;</span><br><span class="line">    def __init__(self, in_channels, out_channels, stride=1):</span><br><span class="line">        super(Block, self).__init__()</span><br><span class="line">        self.conv1 = nn.Conv2d(in_channels, in_channels, kernel_size=3, stride=2, padding=1, groups=in_channels, bias=False)</span><br><span class="line">        self.bn1 = nn.BatchNorm2d(in_channels)</span><br><span class="line">        self.conv2 = nn.Conv2d(in_channels, out_channels, kernel_size=1, stride=1, padding=0, bias=False)</span><br><span class="line">        self.bn2 = nn.BatchNorm2d(out_channels)</span><br><span class="line"></span><br><span class="line">    def forward(self, x):</span><br><span class="line">        x = self.conv1(x)</span><br><span class="line">        x = self.bn1(x)</span><br><span class="line">        x = F.relu(x)</span><br><span class="line">        x = self.conv2(x)</span><br><span class="line">        x = self.bn2(x)</span><br><span class="line">        x = F.relu(x)</span><br><span class="line">        return x</span><br><span class="line"></span><br><span class="line">input = torch.randn(32, 3, 224, 224)</span><br><span class="line">block = Block(3, 64)</span><br><span class="line">out = block(input)</span><br><span class="line">print(out.size())</span><br></pre></td></tr></table></figure>



<h1 id="分组卷积"><a href="#分组卷积" class="headerlink" title="分组卷积"></a>分组卷积<a href="#分组卷积" class="header-anchor">#</a></h1><p><img src="all-CN/image-20210906151614062.png" alt="image-20210906151614062"></p>
<p><strong>Group Convolution</strong>顾名思义，则是对输入feature map进行分组，然后每组分别卷积。假设输入feature map的尺寸仍为$C∗H∗W$，输出feature map的数量为$N$个，如果设定要分成$G$个groups，则每组的输入feature map数量为$\frac {C}{G}$，每组的输出feature map数量为$\frac {N}{G}$，每个卷积核的尺寸为$\frac CG∗K∗K$，卷积核的总数仍为$N$个，每组的卷积核数量为$\frac NG$，卷积核只与其同组的输入map进行卷积，卷积核的总参数量为$N∗\frac CG∗K∗K$，可见，<strong>总参数量减少为原来的</strong> $\frac 1G$，其连接方式如上图右所示，group1输出map数为2，有2个卷积核，每个卷积核的channel数为4，与group1的输入map的channel数相同，卷积核只与同组的输入map卷积，而不与其他组的输入map卷积。</p>
<h2 id="分组卷积的用途"><a href="#分组卷积的用途" class="headerlink" title="分组卷积的用途"></a>分组卷积的用途<a href="#分组卷积的用途" class="header-anchor">#</a></h2><ol>
<li>减少参数量， 分成$G$组，则该层的参数量减少为原来的$\frac 1G$</li>
<li>可看成structured sparse，每个卷积核的尺寸由$C<em>K</em>K$变为$\frac CG<em>K</em>K$，可以看作将其余$(C-\frac CG)<em>K</em>K$的参数视为0，有时可以取得不错的效果(正则化)。</li>
<li>当分组数量等于输入map数量，输出map数量也等于输入map数量，相当于<code>depthwise convolution</code></li>
<li>如果满足3的同时，卷积核大小与输入尺寸相同，则输出$C<em>1</em>1$的向量，此时为<code>global depthwise convolution</code>，可视为全局加权池化，与GAP( global average pooling)的不同之处在于，GDC给每个位置赋予可学习的权重，而GAP是权重相同取个平均。</li>
</ol>
<h1 id="转置卷积"><a href="#转置卷积" class="headerlink" title="转置卷积"></a>转置卷积<a href="#转置卷积" class="header-anchor">#</a></h1><h1 id="空洞卷积"><a href="#空洞卷积" class="headerlink" title="空洞卷积"></a>空洞卷积<a href="#空洞卷积" class="header-anchor">#</a></h1><p>作用：</p>
<ol>
<li>增大感受野</li>
<li>捕获多尺度上下文信息</li>
</ol>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料<a href="#参考资料" class="header-anchor">#</a></h1><p><a href="https://mp.weixin.qq.com/s/BDlYXOjaNuBsLkfbQKRGLA">一文读懂 12种卷积方法（含1x1卷积、转置卷积和深度可分离卷积等） (qq.com)</a></p>
<p><a href="https://www.cnblogs.com/shine-lee/p/10243114.html">Group Convolution分组卷积，以及Depthwise Convolution和Global Depthwise Convolution - shine-lee - 博客园 (cnblogs.com)</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/208519425">通过分组卷积的思想，巧妙的代码实现动态卷积(Dynamic Convolution) - 知乎 (zhihu.com)</a></p>
]]></content>
  </entry>
  <entry>
    <title>coroutine</title>
    <url>/article/coroutine/</url>
    <content><![CDATA[<h3 id="asyncio-yield-from"><a href="#asyncio-yield-from" class="headerlink" title="asyncio + yield from"></a>asyncio + yield from<a href="#asyncio-yield-from" class="header-anchor">#</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#-*- coding:utf8 -*-</span><br><span class="line">import asyncio</span><br><span class="line"></span><br><span class="line">@asyncio.coroutine</span><br><span class="line">def test(i):</span><br><span class="line">    print(&#x27;test_1&#x27;, i)</span><br><span class="line">    r = yield from asyncio.sleep(1)</span><br><span class="line">    print(&#x27;test_2&#x27;, i)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    tasks = [test(i) for i in range(3)]</span><br><span class="line">    loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line">    loop.close()</span><br></pre></td></tr></table></figure>

<p><code>@asyncio.coroutine</code>把一个generator标记为coroutine类型，然后就把这个coroutine扔到EventLoop中执行。test()会首先打印出test_1，然后<code>yield from</code>语法可以让我们方便地调用另一个generator。由于<code>asyncio.sleep()</code>也是一个coroutine，所以线程不会等待<code>asyncio.sleep()</code>，而是直接中断并执行下一个消息循环。当<code>asyncio.sleep()</code>返回时，线程就可以从<code>yield from</code>拿到返回值（此处是None），然后接着执行下一行语句。把<code>asyncio.sleep(1)</code>看成是一个耗时1秒的IO操作，在此期间主线程并未等待，而是去执行EventLoop中其他可以执行的coroutine了，因此可以实现并发执行。</p>
<span id="more"></span>

<h3 id="asyncio-asyncawait"><a href="#asyncio-async-await" class="headerlink" title="asyncio + async/await"></a>asyncio + async/await<a href="#asyncio-asyncawait" class="header-anchor">#</a></h3><p>为了简化并更好地标识异步IO，从Python3.5开始引入了新的语法async和await，可以让coroutine的代码更简洁易读。请注意，async和await是coroutine的新语法，使用新语法只需要做两步简单的替换：</p>
<ul>
<li>把@asyncio.coroutine替换为async</li>
<li>把yield from替换为await</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#-*- coding:utf8 -*-000</span><br><span class="line">import asyncio</span><br><span class="line"></span><br><span class="line">async def test(i):</span><br><span class="line">    print(&#x27;test_1&#x27;, i)</span><br><span class="line">    await asyncio.sleep(1)</span><br><span class="line">    print(&#x27;test_2&#x27;, i)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    tasks = [test(i) for i in range(3)]</span><br><span class="line">    loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line">    loop.close()</span><br></pre></td></tr></table></figure>

<h2 id="gevent"><a href="#Gevent" class="headerlink" title="Gevent"></a>Gevent<a href="#gevent" class="header-anchor">#</a></h2><p>Gevent是一个基于Greenlet实现的网络库，通过greenlet实现协程。基本思想是一个greenlet就认为是一个协程，当一个greenlet遇到IO操作的时候，比如访问网络，就会自动切换到其他的greenlet，等到IO操作完成，再在适当的时候切换回来继续执行。由于IO操作非常耗时，经常使程序处于等待状态，有了gevent为我们自动切换协程，就保证总有greenlet在运行，而不是等待IO操作。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#-*- coding:utf8 -*-</span><br><span class="line">import gevent</span><br><span class="line"></span><br><span class="line">def test(n):</span><br><span class="line">    for i in range(n):</span><br><span class="line">        print(gevent.getcurrent(), i)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    g1 = gevent.spawn(test, 3)</span><br><span class="line">    g2 = gevent.spawn(test, 3)</span><br><span class="line">    g3 = gevent.spawn(test, 3)</span><br><span class="line"></span><br><span class="line">    g1.join()</span><br><span class="line">    g2.join()</span><br><span class="line">    g3.join()</span><br></pre></td></tr></table></figure>

<p>可以看到3个greenlet是依次运行而不是交替运行。要让greenlet交替运行，可以通过<code>gevent.sleep()</code>交出控制权:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def test(n):</span><br><span class="line">    for i in range(n):</span><br><span class="line">        print(gevent.getcurrent(), i)</span><br><span class="line">        gevent.sleep(1)</span><br></pre></td></tr></table></figure>

<p>当然在实际的代码里，我们不会用<code>gevent.sleep()</code>去切换协程，而是在执行到IO操作时gevent会自动完成，所以gevent需要将Python自带的一些标准库的运行方式由阻塞式调用变为协作式运行。这一过程在启动时通过monkey patch完成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#-*- coding:utf8 -*-</span><br><span class="line">from gevent import monkey; monkey.patch_all()</span><br><span class="line">from urllib import request</span><br><span class="line">import gevent</span><br><span class="line"></span><br><span class="line">def test(url):</span><br><span class="line">    print(&#x27;Get: %s&#x27; % url)</span><br><span class="line">    response = request.urlopen(url)</span><br><span class="line">    content = response.read().decode(&#x27;utf8&#x27;)</span><br><span class="line">    print(&#x27;%d bytes received from %s.&#x27; % (len(content), url))</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    gevent.joinall([</span><br><span class="line">        gevent.spawn(test, &#x27;http://httpbin.org/ip&#x27;),</span><br><span class="line">        gevent.spawn(test, &#x27;http://httpbin.org/uuid&#x27;),</span><br><span class="line">        gevent.spawn(test, &#x27;http://httpbin.org/user-agent&#x27;)</span><br><span class="line">    ])</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[CONSUMER] start&quot;</span>)</span><br><span class="line">    r = <span class="string">&#x27;start&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        n = <span class="keyword">yield</span> r</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> n:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;n is empty&quot;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[CONSUMER] Consumer is consuming %s&quot;</span> % n)</span><br><span class="line">        r = <span class="string">&quot;200 ok&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span>(<span class="params">c</span>):</span></span><br><span class="line">    <span class="comment"># 启动generator</span></span><br><span class="line">    start_value = c.send(<span class="literal">None</span>)</span><br><span class="line">    <span class="built_in">print</span>(start_value)</span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; <span class="number">3</span>:</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[PRODUCER] Producer is producing %d&quot;</span> % n)</span><br><span class="line">        r = c.send(n)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[PRODUCER] Consumer return: %s&#x27;</span> % r)</span><br><span class="line">    <span class="comment"># 关闭generator</span></span><br><span class="line">    c.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建生成器</span></span><br><span class="line">c = consumer()</span><br><span class="line"><span class="comment"># 传入generator</span></span><br><span class="line">producer(c)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 子生成器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">n</span>):</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; n:</span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 委派生成器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_yield_from</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test_yield_from start&quot;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> test(n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test_yield_from end&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> test_yield_from(<span class="number">3</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>



<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料<a href="#参考资料" class="header-anchor">#</a></h1><p><a href="https://zhuanlan.zhihu.com/p/95722895">Python异步IO操作</a></p>
<p><a href="https://www.jianshu.com/p/b5e347b3a17c">Python黑魔法 — 异步IO（ asyncio） 协程 </a></p>
<p><a href="https://cloud.tencent.com/developer/article/1590280">python 多进程和协程配合使用</a></p>
<p><a href="https://blog.csdn.net/weixin_36338224/article/details/109288327?spm=1001.2014.3001.5501">(21条消息) 实战异步IO框架：asyncio 下篇_王炳明-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/weixin_36338224/article/details/109282596?spm=1001.2014.3001.5501">(21条消息) 深入异步IO框架：asyncio 中篇_王炳明-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/weixin_36338224/article/details/109282563?spm=1001.2014.3001.5501">(21条消息) 初识异步IO框架：asyncio 上篇_王炳明-CSDN博客_异步io框架</a></p>
]]></content>
  </entry>
  <entry>
    <title>generator_and_iterator</title>
    <url>/article/generator-and-iterator/</url>
    <content><![CDATA[<!--toc-->

<h1 id="列表表达式"><a href="#列表表达式" class="headerlink" title="列表表达式"></a>列表表达式<a href="#列表表达式" class="header-anchor">#</a></h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">info = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class="line">a = [i+1 for i in range(10)]</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>



<p>多重循环</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = [(i,j) for i in range(4) for j in range(2)]</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>



<p>多重循环+判断语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls = [(&#x27;x&#x27;,[&#x27;open1&#x27;,&#x27;open1&#x27;,&#x27;open1&#x27;]),(&#x27;y&#x27;,[&#x27;open1&#x27;,&#x27;open1&#x27;,&#x27;open0&#x27;]),(&#x27;z&#x27;,[&#x27;open0&#x27;,&#x27;open0&#x27;,&#x27;open1&#x27;])]</span><br><span class="line"></span><br><span class="line">def find(con):</span><br><span class="line">    return [j for i in con for j in i if j.isdigit()]</span><br><span class="line"> </span><br><span class="line">[w for w,con in ls if find(con)==[&#x27;1&#x27;,&#x27;1&#x27;,&#x27;1&#x27;]]</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器<a href="#生成器" class="header-anchor">#</a></h1><ol>
<li><p>什么是生成器</p>
<p>生成器是一种特殊的迭代器，生成器的出现是为了简化迭代器应用。</p>
<p>生成器的主要思想：对于可以公式自动生成的数字序列，由计算机不断迭代，每次只生成一个数字，从而通过循环遍历生成序列中的所有元素。所以说，生成器产生的不是一个静态的值（比如类似字符串、元组和列表等，都是一次性生成所有值），而是一个动态的数据流。</p>
<p>示例1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = (x**2 for x in range(1,9))</span><br><span class="line">print(type(a))</span><br><span class="line">next(a)</span><br></pre></td></tr></table></figure>

<p>示例2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def gen(x):</span><br><span class="line">	x += 1</span><br><span class="line">	yield x**2</span><br><span class="line">b = gen(0)</span><br><span class="line">print(type(b))</span><br><span class="line">next(b)</span><br></pre></td></tr></table></figure>

<p>可以看到，变量a和b都是生成器，我们不能直接使用a、b，因为它们实际上保存的是一个公式，使用时可以调用内置函数next()，由next(a)、next(b)来动态生成序列中的下一个值。采用生成器的好处是：节省内存空间，特别是对于数据量大的序列，一次性生成所有值将会耗费大量内存，而采用生成器可以极大地节省存储空间。同时，生成器还可以处理无限长的序列。比如，上述实例中，变量b就是一个无限序列，理论上可以永远next(b)，而且每次都是按顺序生成其中的一个值。</p>
<p>可以把生成器看作是一种特殊的函数，它与一般函数最主要的区别就在于生成器函数中有关键字yield。比如，上述实例2，函数中只要有yield关键字，就是一个生成器函数。</p>
</li>
<li><p>生成器怎么用</p>
<p>​    (1). 生成器使用场景</p>
<p>​            当你需要生成一个大型的序列，但又不想因此占用大量的存储空间，提高存储和计算效率。此时，可以考虑用生成器。</p>
<p>​    (2). 生成器的构造</p>
<p>​            主要有两种方式：一是生成器表达式；二是生成器函数。上面实例1就是生成器表达式；实例2其实就是生成器函数。</p>
<p>​    (3). 生成器的使用</p>
<p>​            ①采用for循环</p>
<p>​            ②采用内置函数next()遍历生成器元素</p>
<p>​            ③采用生成器自身方法<code>__next()__</code>循环生成下一个值。</p>
</li>
</ol>
<h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器<a href="#迭代器" class="header-anchor">#</a></h1><ol>
<li><p>什么是迭代器</p>
<p>​    首先了解几个概念：</p>
<p>​        (1). 可迭代对象。可以直接作用于for 循环的对象统称为可迭代对象：Iterable。可以使用isinstance()判断一个对象是否为可Iterable对象。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from collections import Iterable</span><br><span class="line">&gt;&gt;&gt; isinstance(fib(8), Iterable)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; b = [1,2,3,4]</span><br><span class="line">&gt;&gt;&gt; isinstance(b, Iterable)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; c = 8</span><br><span class="line">&gt;&gt;&gt; isinstance(c, Iterable)</span><br><span class="line">False</span><br></pre></td></tr></table></figure>

<p>Python中可直接采用for循环的对象有：一类是集合数据类型，如list，tuple，dict，set，str等；一类是generator，包括生成器表达式和带yield的生成器函数。</p>
<p>​        (2). 迭代器。Python中一个实现了_iter_方法和_next_方法的类对象，就是迭代器。</p>
<pre><code>    (3).迭代器协议：要构造一个迭代器，对象需要提供next()方法，它要么返回迭代中的下一项，要么就引起一个StopIteration异常，以终止迭代。
</code></pre>
</li>
<li><p>迭代器的构造</p>
<p>（1）自定义迭代器类</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Fib(object):</span><br><span class="line">    def __init__(self, max):</span><br><span class="line">        super(Fib, self).__init__()</span><br><span class="line">        self.max = max</span><br><span class="line">    def __iter__(self):</span><br><span class="line">        self.a = 0</span><br><span class="line">        self.b = 1</span><br><span class="line">        return self</span><br><span class="line">    def __next__(self):</span><br><span class="line">        fib = self.a</span><br><span class="line">        if fib &gt; self.max:</span><br><span class="line">            raise StopIteration</span><br><span class="line">        self.a, self.b = self.b, self.a + self.b</span><br><span class="line">        return fib</span><br><span class="line"># 定义一个main函数，循环遍历每一个菲波那切数</span><br><span class="line">def main():</span><br><span class="line">    # 20以内的数</span><br><span class="line">    fib = Fib(20)</span><br><span class="line">    for i in fib:</span><br><span class="line">        print(i)</span><br><span class="line"># 测试</span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>​    （2）通过调用内置函数iter()构造迭代器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; g = iter(range(10))</span><br><span class="line">&gt;&gt;&gt; isinstance(g, Iterator)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(range(10), Iterable)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(range(10), Iterator)</span><br><span class="line">False</span><br></pre></td></tr></table></figure>

<p>注意，不少文章中写道，map、filter等内置函数返回的都是生成器，还有个别资料中说range返回的也是生成器。要检查一个对象是否为迭代器，也可以采用isinstance()判断，所以我们可以进行以下的判断：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from collections import Iterable， Iterator， Generator</span><br><span class="line">&gt;&gt;&gt; d= range(10)</span><br><span class="line">&gt;&gt;&gt; isinstance(d, Iterable)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(d, Iterator)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; e = map(lambda x : x**2, [1,2,4,6,7,8,9])</span><br><span class="line">&gt;&gt;&gt; isinstance(e, Iterable)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(e, Iterator)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(e, Generator)</span><br><span class="line">&gt;&gt;&gt; f = (x**2 for x in [1,2,4,6,7,8,9])</span><br><span class="line">&gt;&gt;&gt; isinstance(f, Iterator)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(f, Generator)</span><br><span class="line">True</span><br></pre></td></tr></table></figure>



<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料<a href="#参考资料" class="header-anchor">#</a></h1><p><a href="https://zhuanlan.zhihu.com/p/122537818">生成器和迭代器总结</a></p>
]]></content>
  </entry>
  <entry>
    <title>decorator</title>
    <url>/article/decorator/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E8%A3%85%E9%A5%B0%E5%99%A8">什么是装饰器</a></li>
<li><a href="#%E7%AE%80%E5%8D%95%E8%A3%85%E9%A5%B0%E5%99%A8">简单装饰器</a></li>
<li><a href="#%E9%AB%98%E7%BA%A7%E8%A3%85%E9%A5%B0%E5%99%A8">高级装饰器</a><ul>
<li><a href="#%E5%9F%BA%E4%BA%8E%E5%87%BD%E6%95%B0%E7%9A%84%E5%B8%A6%E5%8F%82%E8%A3%85%E9%A5%B0%E5%99%A8">基于函数的带参装饰器</a></li>
<li><a href="#%E5%9F%BA%E4%BA%8E%E7%B1%BB%E7%9A%84%E4%B8%8D%E5%B8%A6%E5%8F%82%E8%A3%85%E9%A5%B0%E5%99%A8">基于类的不带参装饰器</a></li>
<li><a href="#%E5%9F%BA%E4%BA%8E%E7%B1%BB%E7%9A%84%E5%B8%A6%E5%8F%82%E6%95%B0%E8%A3%85%E9%A5%B0%E5%99%A8">基于类的带参数装饰器</a></li>
</ul>
</li>
<li><a href="#%E5%86%85%E7%BD%AE%E8%A3%85%E9%A5%B0%E5%99%A8">内置装饰器</a><ul>
<li><a href="#classmethod">@classmethod</a></li>
<li><a href="#staticmethod">@staticmethod</a></li>
<li><a href="#property">@property</a></li>
<li><a href="#wraps">@wraps</a></li>
<li><a href="#python%E5%86%85%E7%BD%AE%E7%B1%BB%E5%B1%9E%E6%80%A7">python内置类属性</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99">参考资料</a></li>
</ul>
<!-- tocstop -->

</div>





<h1 id="什么是装饰器"><a href="#什么是装饰器" class="headerlink" title="什么是装饰器"></a>什么是装饰器<a href="#什么是装饰器" class="header-anchor">#</a></h1><p>一个decorator只是一个带有一个函数作为参数并返回一个替换函数的闭包。<br>简单示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 未使用装饰器时</span><br><span class="line">def outer(some_func):</span><br><span class="line">	def inner():</span><br><span class="line">		print (&quot;before some_func&quot;)</span><br><span class="line">		ret = some_func() # 1</span><br><span class="line">		return ret + 1</span><br><span class="line">	return inner</span><br><span class="line">def foo():</span><br><span class="line">	return 1</span><br><span class="line">decorated = outer(foo)</span><br><span class="line">decorated()</span><br><span class="line"></span><br><span class="line">#使用装饰器时</span><br><span class="line">def outer(some_func):</span><br><span class="line">	def inner():</span><br><span class="line">		print (&quot;before some_func&quot;)</span><br><span class="line">		ret = some_func() # 1</span><br><span class="line">		return ret + 1</span><br><span class="line">	return inner</span><br><span class="line">@outer</span><br><span class="line">def foo():</span><br><span class="line">	return 1</span><br><span class="line"></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="简单装饰器"><a href="#简单装饰器" class="headerlink" title="简单装饰器"></a>简单装饰器<a href="#简单装饰器" class="header-anchor">#</a></h1><p>引入装饰器会便于开发，便于代码复用</p>
<p>简单示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def say_hello():</span><br><span class="line">    print(&quot;[DEBUG]: enter say_hello()&quot;)</span><br><span class="line">    print(&quot;hello!&quot;)</span><br><span class="line"></span><br><span class="line">def say_goodbye():</span><br><span class="line">    print( &quot;[DEBUG]: enter say_goodbye()&quot;)</span><br><span class="line">    print( &quot;hello!&quot;)</span><br><span class="line">    </span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    say_hello()</span><br><span class="line">    say_goodbye()</span><br></pre></td></tr></table></figure>

<p>进一步</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def debug():</span><br><span class="line">    import inspect</span><br><span class="line">    caller_name = inspect.stack()[1][3]</span><br><span class="line">    print(&quot;[DEBUG]: enter &#123;&#125;()&quot;.format(caller_name)  ) </span><br><span class="line"></span><br><span class="line">def say_hello():</span><br><span class="line">    debug()</span><br><span class="line">    print(&quot;hello!&quot;)</span><br><span class="line"></span><br><span class="line">def say_goodbye():</span><br><span class="line">    debug()</span><br><span class="line">    print( &quot;goodbye!&quot;)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    say_hello()</span><br><span class="line">    say_goodbye()</span><br></pre></td></tr></table></figure>

<p>但依然每个业务函数都需要调用一次<code>debug()</code>函数</p>
<p>使用装饰器:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def debug(func):</span><br><span class="line">    def wrapper():</span><br><span class="line">        print(&quot;[DEBUG]: enter &#123;&#125;()&quot;.format(func.__name__))</span><br><span class="line">        return func()</span><br><span class="line">    return wrapper</span><br><span class="line"></span><br><span class="line">@debug</span><br><span class="line">def say_hello():</span><br><span class="line">    print( &quot;hello!&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这个装饰器依然存在一个问题， 不能引入参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def debug(func):</span><br><span class="line">    def wrapper(something):  # 指定一毛一样的参数</span><br><span class="line">        print &quot;[DEBUG]: enter &#123;&#125;()&quot;.format(func.__name__)</span><br><span class="line">        return func(something)</span><br><span class="line">    return wrapper  # 返回包装过函数</span><br><span class="line"></span><br><span class="line">@debug</span><br><span class="line">def say(something):</span><br><span class="line">    print &quot;hello &#123;&#125;!&quot;.format(something)</span><br></pre></td></tr></table></figure>

<p>那么如果参数不定的时候呢？<code>(*args, **kwargs)</code>就可以派上用场了，其中<code>*args</code>只是表明在函数定义中位置参数应该保存在变量<code>args</code>中, *表示<code>iterables</code>和位置参数,**表示dictionaries &amp; key/value对</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def debug(func):</span><br><span class="line">    def wrapper(*args, **kwargs):  # 指定宇宙无敌参数</span><br><span class="line">        print &quot;[DEBUG]: enter &#123;&#125;()&quot;.format(func.__name__)</span><br><span class="line">        print &#x27;Prepare and say...&#x27;,</span><br><span class="line">        return func(*args, **kwargs)</span><br><span class="line">    return wrapper  # 返回</span><br><span class="line"></span><br><span class="line">@debug</span><br><span class="line">def say(something):</span><br><span class="line">    print &quot;hello &#123;&#125;!&quot;.format(something)</span><br></pre></td></tr></table></figure>

<p>至此，简单的装饰器完成！</p>
<h1 id="高级装饰器"><a href="#高级装饰器" class="headerlink" title="高级装饰器"></a>高级装饰器<a href="#高级装饰器" class="header-anchor">#</a></h1><h2 id="基于函数的带参装饰器"><a href="#基于函数的带参装饰器" class="headerlink" title="基于函数的带参装饰器"></a>基于函数的带参装饰器<a href="#基于函数的带参装饰器" class="header-anchor">#</a></h2><p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def logging(level): # 传递装饰器参数</span><br><span class="line">    def wrapper(func): # 调用函数名</span><br><span class="line">        def inner_wrapper(*args, **kwargs): # 函数参数</span><br><span class="line">            print &quot;[&#123;level&#125;]: enter function &#123;func&#125;()&quot;.format(</span><br><span class="line">                level=level,</span><br><span class="line">                func=func.__name__)</span><br><span class="line">            return func(*args, **kwargs)</span><br><span class="line">        return inner_wrapper</span><br><span class="line">    return wrapper</span><br><span class="line"></span><br><span class="line">@logging(level=&#x27;INFO&#x27;)</span><br><span class="line">def say(something):</span><br><span class="line">    print &quot;say &#123;&#125;!&quot;.format(something)</span><br><span class="line"></span><br><span class="line"># 如果没有使用@语法，等同于</span><br><span class="line"># say = logging(level=&#x27;INFO&#x27;)(say)</span><br><span class="line"></span><br><span class="line">@logging(level=&#x27;DEBUG&#x27;)</span><br><span class="line">def do(something):</span><br><span class="line">    print &quot;do &#123;&#125;...&quot;.format(something)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    say(&#x27;hello&#x27;)</span><br><span class="line">    do(&quot;my work&quot;)</span><br></pre></td></tr></table></figure>

<p>你可以这么理解，当带参数的装饰器被打在某个函数上时，比如<code>@logging(level=&#39;DEBUG&#39;)</code>，它其实是一个函数，会马上被执行，只要这个它返回的结果是一个装饰器时，那就没问题。</p>
<h2 id="基于类的不带参装饰器"><a href="#基于类的不带参装饰器" class="headerlink" title="基于类的不带参装饰器"></a>基于类的不带参装饰器<a href="#基于类的不带参装饰器" class="header-anchor">#</a></h2><p>装饰器函数其实是这样一个接口约束，它必须接受一个callable对象作为参数，然后返回一个callable对象。在Python中一般callable对象都是函数，但也有例外。只要某个对象重载了<code>__call__()</code>方法，那么这个对象就是callable的。</p>
<p>装饰器要求接受一个callable对象，并返回一个callable对象（不太严谨，详见后文）。那么用类来实现也是也可以的。我们可以让类的构造函数<code>__init__()</code>接受一个函数，然后重载<code>__call__()</code>并返回一个函数，也可以达到装饰器函数的效果。</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class logging(object):</span><br><span class="line">    def __init__(self, func): # 接受函数</span><br><span class="line">        self.func = func</span><br><span class="line"></span><br><span class="line">    def __call__(self, *args, **kwargs): # 函数参数</span><br><span class="line">        print &quot;[DEBUG]: enter function &#123;func&#125;()&quot;.format(</span><br><span class="line">            func=self.func.__name__)</span><br><span class="line">        return self.func(*args, **kwargs)</span><br><span class="line">@logging</span><br><span class="line">def say(something):</span><br><span class="line">    print &quot;say &#123;&#125;!&quot;.format(something)</span><br></pre></td></tr></table></figure>



<h2 id="基于类的带参数装饰器"><a href="#基于类的带参数装饰器" class="headerlink" title="基于类的带参数装饰器"></a>基于类的带参数装饰器<a href="#基于类的带参数装饰器" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class logging(object):</span><br><span class="line">    def __init__(self, level=&#x27;INFO&#x27;):</span><br><span class="line">        self.level = level</span><br><span class="line">        </span><br><span class="line">    def __call__(self, func): # 接受函数</span><br><span class="line">        def wrapper(*args, **kwargs):</span><br><span class="line">            print &quot;[&#123;level&#125;]: enter function &#123;func&#125;()&quot;.format(</span><br><span class="line">                level=self.level,</span><br><span class="line">                func=func.__name__)</span><br><span class="line">            func(*args, **kwargs)</span><br><span class="line">        return wrapper  #返回函数</span><br><span class="line"></span><br><span class="line">@logging(level=&#x27;INFO&#x27;)</span><br><span class="line">def say(something):</span><br><span class="line">    print &quot;say &#123;&#125;!&quot;.format(something)</span><br></pre></td></tr></table></figure>



<h1 id="内置装饰器"><a href="#内置装饰器" class="headerlink" title="内置装饰器"></a>内置装饰器<a href="#内置装饰器" class="header-anchor">#</a></h1><h2 id="classmethod"><a href="#classmethod" class="headerlink" title="@classmethod"></a>@classmethod<a href="#classmethod" class="header-anchor">#</a></h2><p>类方法，不需要实例化，也不需要self参数，需要一个cls参数，可以用类名调用，也可以用对象来调用。</p>
<p>原则上，类方法是将类本身作为对象进行操作的方法。假设有个方法，且这个方法在逻辑上采用类本身作为对象来调用更合理，那么这个方法就可以定义为类方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class A:</span><br><span class="line">    &quot;&quot;&quot;docstring for A&quot;&quot;&quot;</span><br><span class="line">    # 类变量v</span><br><span class="line">    v = 0</span><br><span class="line"> </span><br><span class="line">    def __init__(self):</span><br><span class="line">        # __init__定义的为实例变量，属于类的实例</span><br><span class="line">        self.my_v = 10000000</span><br><span class="line"> </span><br><span class="line">    # 类方法需要使用@classmethod装饰器定义</span><br><span class="line">    @classmethod</span><br><span class="line">    # 类方法至少有一个形参,第一个形参用于绑定类,约定为:&#x27;cls&#x27;</span><br><span class="line">    def get_v(cls):</span><br><span class="line">        &quot;&quot;&quot;此方法为类方法,cls用于绑定调用此方法的类;此方法用于返回类变量v的值&quot;&quot;&quot;</span><br><span class="line">        return cls.v</span><br><span class="line"> </span><br><span class="line">    @classmethod</span><br><span class="line">    def set_v(cls, value):</span><br><span class="line">        cls.v = value</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    # 通过类实例来调用类方法</span><br><span class="line">    print(A.get_v())</span><br><span class="line">    A.set_v(100)</span><br><span class="line">    print(A.get_v())</span><br><span class="line"> </span><br><span class="line">    # 通过对象实例调用类方法</span><br><span class="line">    a = A()</span><br><span class="line">    print(a.get_v())</span><br><span class="line">    a.set_v(200)</span><br><span class="line">    print(a.get_v())</span><br><span class="line"> </span><br><span class="line">    # 访问实例属性</span><br><span class="line">    print(a.my_v)</span><br></pre></td></tr></table></figure>



<h2 id="staticmethod"><a href="#staticmethod" class="headerlink" title="@staticmethod"></a>@staticmethod<a href="#staticmethod" class="header-anchor">#</a></h2><p>静态方法，不需要实例化，不需要self和cls等参数，就跟使用普通的函数一样，只是封装在类中</p>
<p>静态方法是类中的函数，不需要实例。静态方法主要是用来存放逻辑性的代码，逻辑上属于类，但是和类本身没有关系，也就是说在静态方法中，不会涉及到类中的属性和方法的操作。可以理解为，静态方法是个独立的、单纯的函数，它仅仅托管于某个类的名称空间中，便于使用和维护。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Student:</span><br><span class="line">    &quot;&quot;&quot;描述学生的信息&quot;&quot;&quot;</span><br><span class="line">    count = 0</span><br><span class="line"> </span><br><span class="line">    def __init__(self, name, age, score):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.score = score</span><br><span class="line">        self.__class__.count += 1</span><br><span class="line"> </span><br><span class="line">    def print_info(self):</span><br><span class="line">        print(&quot;&#123;&#125;: age=&#123;&#125;, score=&#123;&#125;&quot;.format(self.name, self.age, self.score))</span><br><span class="line"> </span><br><span class="line">    @classmethod</span><br><span class="line">    def get_stu_number(cls):</span><br><span class="line">        &quot;&quot;&quot;只访问类变量，使用类方法即可&quot;&quot;&quot;</span><br><span class="line">        return cls.count</span><br><span class="line"> </span><br><span class="line">    @staticmethod</span><br><span class="line">    def average(students, kind):</span><br><span class="line">        &quot;&quot;&quot;不需要访问实例变量和类变量，仅仅是定义在类内的函数，使用静态方法即可&quot;&quot;&quot;</span><br><span class="line">        sum_kind = 0</span><br><span class="line">        for student in students:</span><br><span class="line">            sum_kind += student.__dict__[kind]</span><br><span class="line">        average = sum_kind // Student.get_stu_number()</span><br><span class="line">        return average</span><br><span class="line"> </span><br><span class="line">    @staticmethod</span><br><span class="line">    def add_stu_info():</span><br><span class="line">        &quot;&quot;&quot;一次性录入所有的学生信息，并以列表形式返回所有创建好的学生实例&quot;&quot;&quot;</span><br><span class="line">        students = []</span><br><span class="line">        while True:</span><br><span class="line">            name = input(&#x27;输入姓名:&#x27;) or &#x27;q&#x27;</span><br><span class="line">            if name == &#x27;q&#x27;:</span><br><span class="line">                break</span><br><span class="line">            age = int(input(&#x27;输入年龄:&#x27;))</span><br><span class="line">            score = int(input(&#x27;输入成绩:&#x27;))</span><br><span class="line">            student = Student(name, age, score)</span><br><span class="line">            students.append(student)</span><br><span class="line">        return students</span><br><span class="line"> </span><br><span class="line">    @classmethod</span><br><span class="line">    def remove_student(cls, name, students):</span><br><span class="line">        &quot;&quot;&quot;根据姓名删除列表中的学生&quot;&quot;&quot;</span><br><span class="line">        for student in students:</span><br><span class="line">            if student.name.lower() == name.lower():</span><br><span class="line">                stu_list.remove(student)</span><br><span class="line">                cls.count -= 1</span><br><span class="line"></span><br><span class="line">&gt;&gt; Student.average(stu_list, &#x27;score&#x27;)</span><br><span class="line">95</span><br><span class="line">&gt;&gt; Student.average(stu_list, &#x27;age&#x27;)</span><br><span class="line">13</span><br></pre></td></tr></table></figure>



<h2 id="property"><a href="#property" class="headerlink" title="@property"></a>@property<a href="#property" class="header-anchor">#</a></h2><p>属性方法，主要作用是将一个操作方法封装成一个属性,用户用起来就和操作普通属性完全一致,非常简单.定义时，在实例方法的基础上添加@property装饰器，并且只有一个self参数，调用时，不需要括号</p>
<p>@property 是经典类中的一种装饰器，新式类中具有三种:</p>
<ol>
<li>@property获取属性</li>
<li>@方法名.setter 修改属性</li>
<li>@方法名.deleter 删除属性</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Goods(object):</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        # 原价</span><br><span class="line">        self.original_price = 100</span><br><span class="line">        # 折扣</span><br><span class="line">        self.discount = 0.8</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    def price(self):</span><br><span class="line">        # 实际价格 = 原价*折扣</span><br><span class="line">        new_price = self.original_price*self.discount</span><br><span class="line">        return new_price</span><br><span class="line"></span><br><span class="line">    @price.setter</span><br><span class="line">    def price(self,value):</span><br><span class="line">        self.original_price = value</span><br><span class="line"></span><br><span class="line">    @price.deleter</span><br><span class="line">    def price(self):</span><br><span class="line">        del self.original_price</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = Goods()</span><br><span class="line"># print(obj.price)</span><br><span class="line">obj.price = 200</span><br><span class="line">print(obj.price)</span><br><span class="line">del obj.price  # 删除了类中的price属性若再次调用就会报错</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="wraps"><a href="#wraps" class="headerlink" title="@wraps"></a>@wraps<a href="#wraps" class="header-anchor">#</a></h2><p>Python装饰器（decorator）在实现的时候，被装饰后的函数其实已经是另外一个函数了（函数名等函数属性会发生改变），为了不影响，Python的functools包中提供了一个叫wraps的decorator来消除这样的副作用。写一个decorator的时候，最好在实现之前加上functools的wrap，它能保留原有函数的名称和docstring。</p>
<p>不加wraps:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#coding=utf-8</span><br><span class="line"># -*- coding=utf-8 -*- </span><br><span class="line">from functools import wraps   </span><br><span class="line">def my_decorator(func):</span><br><span class="line">    def wrapper(*args, **kwargs):</span><br><span class="line">        &#x27;&#x27;&#x27;decorator&#x27;&#x27;&#x27;</span><br><span class="line">        print(&#x27;Calling decorated function...&#x27;)</span><br><span class="line">        return func(*args, **kwargs)</span><br><span class="line">    return wrapper  </span><br><span class="line"> </span><br><span class="line">@my_decorator </span><br><span class="line">def example():</span><br><span class="line">    &quot;&quot;&quot;Docstring&quot;&quot;&quot; </span><br><span class="line">    print(&#x27;Called example function&#x27;)</span><br><span class="line">print(example.__name__, example.__doc__)</span><br><span class="line"></span><br><span class="line"># 输出</span><br><span class="line">(&#x27;wrapper&#x27;, &#x27;decorator&#x27;)</span><br><span class="line">[Finished in 0.2s]</span><br></pre></td></tr></table></figure>

<p>加上后：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#coding=utf-8</span><br><span class="line"># -*- coding=utf-8 -*- </span><br><span class="line">from functools import wraps   </span><br><span class="line">def my_decorator(func):</span><br><span class="line">    @wraps(func)</span><br><span class="line">    def wrapper(*args, **kwargs):</span><br><span class="line">        &#x27;&#x27;&#x27;decorator&#x27;&#x27;&#x27;</span><br><span class="line">        print(&#x27;Calling decorated function...&#x27;)</span><br><span class="line">        return func(*args, **kwargs)</span><br><span class="line">    return wrapper  </span><br><span class="line"> </span><br><span class="line">@my_decorator </span><br><span class="line">def example():</span><br><span class="line">    &quot;&quot;&quot;Docstring&quot;&quot;&quot; </span><br><span class="line">    print(&#x27;Called example function&#x27;)</span><br><span class="line">print(example.__name__, example.__doc__)</span><br><span class="line"># 输出</span><br><span class="line">(&#x27;example&#x27;, &#x27;Docstring&#x27;)</span><br><span class="line">[Finished in 0.5s]</span><br></pre></td></tr></table></figure>



<h2 id="python内置类属性"><a href="#python内置类属性" class="headerlink" title="python内置类属性"></a>python内置类属性<a href="#python内置类属性" class="header-anchor">#</a></h2><ol>
<li><p><code>__dict__ </code>: 类的属性（包含一个字典，由类的数据属性组成）</p>
</li>
<li><p><code>__doc__</code> :类的文档字符串</p>
</li>
<li><p><code>__name__</code>: 类名</p>
</li>
<li><p><code>__module__</code>: 类定义所在的模块（类的全名是’<strong>main</strong>.className’，如果类位于一个导入模块mymod中，那么className.<strong>module</strong> 等于 mymod）</p>
</li>
<li><p><code>__bases__</code> : 类的所有父类构成元素（包含了一个由所有父类组成的元组）</p>
</li>
</ol>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料<a href="#参考资料" class="header-anchor">#</a></h1><p><a href="https://www.cnblogs.com/cicaday/p/python-decorator.html">详解Python的装饰器</a></p>
<p><a href="http://ruanyifeng.com/blog/2017/02/fp-tutorial.html">函数式编程入门</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/269012332">装饰器八种写法</a></p>
]]></content>
  </entry>
  <entry>
    <title>deeplearning</title>
    <url>/article/deeplearning/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="b31157566198a7e21362b0ec90d5f165701dea308ca35047da2c02452e8594af">1e0e73741e06b0129e61c2ad316ca7f7e5461bce2236a74a72b61150c72cf901</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>加密</tag>
      </tags>
  </entry>
  <entry>
    <title>distributed_torch</title>
    <url>/article/distributed-torch/</url>
    <content><![CDATA[<h1 id="多gpu分配"><a href="#多GPU分配" class="headerlink" title="多GPU分配"></a>多GPU分配<a href="#多gpu分配" class="header-anchor">#</a></h1><p>实现逻辑：寻找（可用显存 / 总显存）最大的的GPU，并优先安排任务</p>
<p>nvidia-smi可以很方便的获得GPU的各种详细信息。</p>
<p>首先获得可用的GPU数目，nvidia-smi -L | grep GPU |wc -l</p>
<p>然后获得GPU各自的总显存，nvidia-smi -q -d Memory | grep -A4 GPU | grep Total | grep -o ‘[0-9]+‘</p>
<p>最后获得GPU各自的可用显存，nvidia-smi -q -d Memory | grep -A4 GPU | grep Free | grep -o ‘[0-9]+‘</p>
<p>将（可用显存 / 总显存）另存为numpy数组，并使用np.argmax返回值即为可用GPU</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def available_GPU(self):</span><br><span class="line">    import subprocess</span><br><span class="line">    import numpy as np</span><br><span class="line">    nDevice = int(subprocess.getoutput(&quot;nvidia-smi -L | grep GPU |wc -l&quot;))</span><br><span class="line">    total_GPU_str = subprocess.getoutput(&quot;nvidia-smi -q -d Memory | grep -A4 GPU | grep Total | grep -o &#x27;[0-9]\+&#x27;&quot;)</span><br><span class="line">    total_GPU = total_GPU_str.split(&#x27;\n&#x27;)</span><br><span class="line">    total_GPU = np.array([int(device_i) for device_i in total_GPU])</span><br><span class="line">    avail_GPU_str = subprocess.getoutput(&quot;nvidia-smi -q -d Memory | grep -A4 GPU | grep Free | grep -o &#x27;[0-9]\+&#x27;&quot;)</span><br><span class="line">    avail_GPU = avail_GPU_str.split(&#x27;\n&#x27;)</span><br><span class="line">    avail_GPU = np.array([int(device_i) for device_i in avail_GPU])</span><br><span class="line">    avail_GPU = avail_GPU / total_GPU</span><br><span class="line">    return np.argmax(avail_GPU)</span><br></pre></td></tr></table></figure>



<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料<a href="#参考资料" class="header-anchor">#</a></h1><p><a href="https://www.cnblogs.com/yh-blog/p/12877922.html">pytorch(分布式)数据并行个人实践总结——DataParallel/DistributedDataParallel </a></p>
<p><a href="https://blog.csdn.net/junqing_wu/article/details/112732338">torch 多进程训练(详细例程)</a></p>
<p><a href="https://blog.csdn.net/qq_34914551/article/details/110576421">PyTorch多进程分布式训练最简单最好用的实施办法</a></p>
<p><a href="https://blog.csdn.net/ZAQ1018472917/article/details/84626040">python并行编程 - GPU篇</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/107230545">Pytorch 分布式、多进程模块测试 </a></p>
<p><a href="https://blog.csdn.net/baidu_36669549/article/details/95094464">多进程GPU调用问题</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/77307505">GPU加速02:超详细Python Cuda零基础入门教程，没有显卡也能学</a></p>
<p><a href="https://blog.csdn.net/sh39o/article/details/90382101">使用python多GPU任务分配</a></p>
<p><a href="https://blog.csdn.net/github_37320188/article/details/100519346">Deep Learning:PyTorch 基于docker 容器的分布式训练实践</a></p>
]]></content>
  </entry>
  <entry>
    <title>logging</title>
    <url>/article/logging/</url>
    <content><![CDATA[<h1 id="按天生成日志"><a href="#按天生成日志" class="headerlink" title="按天生成日志"></a>按天生成日志<a href="#按天生成日志" class="header-anchor">#</a></h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># #coding=utf-8</span><br><span class="line">import logging,os  # 引入logging模块</span><br><span class="line">from com_tools import setting</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from logging import handlers</span><br><span class="line"></span><br><span class="line">class Logger(object):</span><br><span class="line">    level_relations = &#123;</span><br><span class="line">        &#x27;debug&#x27;:logging.DEBUG,</span><br><span class="line">        &#x27;info&#x27;:logging.INFO,</span><br><span class="line">        &#x27;warning&#x27;:logging.WARNING,</span><br><span class="line">        &#x27;error&#x27;:logging.ERROR,</span><br><span class="line">        &#x27;crit&#x27;:logging.CRITICAL</span><br><span class="line">    &#125;#日志级别关系映射</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def __init__(self,filename,level=&#x27;info&#x27;,when=&#x27;MIDNIGHT&#x27;,backCount=7,fmt=&#x27;%(asctime)s - %(pathname)s[line:%(lineno)d] - %(levelname)s: %(message)s&#x27;):</span><br><span class="line">        self.logger = logging.getLogger(filename)</span><br><span class="line">        format_str = logging.Formatter(fmt)#设置日志格式</span><br><span class="line">        self.logger.setLevel(self.level_relations.get(level))#设置日志级别</span><br><span class="line">        sh = logging.StreamHandler()#往控制台输出</span><br><span class="line">        sh.setFormatter(format_str) #设置控制台上显示的格式</span><br><span class="line">        th = handlers.TimedRotatingFileHandler(filename=filename,interval=1,when=when,backupCount=backCount,encoding=&#x27;utf-8&#x27;)#往文件里写入#指定间隔时间自动生成文件的处理器</span><br><span class="line">        #实例化TimedRotatingFileHandler</span><br><span class="line">        #interval是时间间隔，backupCount是备份文件的个数，如果超过这个个数，就会自动删除，when是间隔的时间单位，单位有以下几种：</span><br><span class="line">        # S 秒</span><br><span class="line">        # M 分</span><br><span class="line">        # H 小时、</span><br><span class="line">        # D 天、</span><br><span class="line">        # W 每星期（interval==0时代表星期一）</span><br><span class="line">        # midnight 每天凌晨</span><br><span class="line">        th.suffix = &quot;%Y-%m-%d.log&quot; #设置文件后缀</span><br><span class="line">        th.setFormatter(format_str)#设置文件里写入的格式</span><br><span class="line">        self.logger.addHandler(sh) #把对象加到logger里</span><br><span class="line">        self.logger.addHandler(th)</span><br><span class="line">logfile = os.path.join(setting.logs_path, &quot;daodianmockapi.txt&quot;) # 这个文件的名称就是当天的日志文件，过往的日志文件，会在后面追加文件后缀 th.suffix</span><br><span class="line">logger = Logger(logfile,level=&#x27;debug&#x27;)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    #logger = Logger(&#x27;all.log&#x27;,level=&#x27;debug&#x27;)</span><br><span class="line">    # filename = setting.now_time+ &quot;.txt&quot;</span><br><span class="line">    # logfile = os.path.join(setting.logs_path,filename)</span><br><span class="line">    # logger = Logger(logfile,level=&#x27;debug&#x27;)</span><br><span class="line">    logger.logger.debug(&#x27;debug&#x27;) # 括号内的内容即为日志的文本内容</span><br><span class="line">    logger.logger.info(&#x27;info&#x27;)</span><br><span class="line">    logger.logger.warning(&#x27;警告&#x27;)</span><br><span class="line">    logger.logger.error(&#x27;报错&#x27;)</span><br><span class="line">    logger.logger.critical(&#x27;严重&#x27;)</span><br><span class="line">    #Logger(&#x27;error.log&#x27;, level=&#x27;error&#x27;).logger.error(&#x27;error&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="loguru"><a href="#loguru" class="headerlink" title="loguru"></a>loguru<a href="#loguru" class="header-anchor">#</a></h1><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料<a href="#参考资料" class="header-anchor">#</a></h1><p><a href="https://zhuanlan.zhihu.com/p/144506204">python定时任务最强框架APScheduler详细教程 </a></p>
<p><a href="https://pythondict.com/life-intelligent/tools/loguru/">Loguru — 最强大的 Python 日志记录器</a></p>
]]></content>
  </entry>
  <entry>
    <title>multiprocessing</title>
    <url>/article/multiprocessing/</url>
    <content><![CDATA[<p>由于python的GIL锁的存在，导致在多线程的时候，同一时间只能有一个线程在cpu上运行，而且是单个cpu上运行，不管cpu有多少核数。如果要充分利用多核cpu的资源，在python中大部分情况下需要使用多进程。</p>
<h1 id="python多进程模块"><a href="#python多进程模块" class="headerlink" title="python多进程模块"></a>python多进程模块<a href="#python多进程模块" class="header-anchor">#</a></h1><p>Python中的多进程是通过multiprocessing包来实现的，和多线程的threading.Thread差不多，它可以利用multiprocessing.Process对象来创建一个进程对象。这个进程对象的方法和线程对象的方法差不多也有start(), run(), join()等方法，其中有一个方法不同Thread线程对象中的守护线程方法是setDeamon，而Process进程对象的守护进程是通过设置daemon属性来完成的。</p>
<span id="more"></span>

<h1 id="多进程的实现方法"><a href="#多进程的实现方法" class="headerlink" title="多进程的实现方法"></a>多进程的实现方法<a href="#多进程的实现方法" class="header-anchor">#</a></h1><ol>
<li><p>方法一</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from multiprocessing import  Process</span><br><span class="line"></span><br><span class="line">def fun1(name):</span><br><span class="line">    print(&#x27;测试%s多进程&#x27; %name)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    process_list = []</span><br><span class="line">    for i in range(5):  #开启5个子进程执行fun1函数</span><br><span class="line">        p = Process(target=fun1,args=(&#x27;Python&#x27;,)) #实例化进程对象</span><br><span class="line">        p.start()</span><br><span class="line">        process_list.append(p)</span><br><span class="line"></span><br><span class="line">    for i in process_list:</span><br><span class="line">        p.join()</span><br><span class="line"></span><br><span class="line">    print(&#x27;结束测试&#x27;)</span><br></pre></td></tr></table></figure>

<p>上面的代码开启了5个子进程去执行函数，我们可以观察结果，是同时打印的，这里实现了真正的并行操作，就是多个CPU同时执行任务。我们知道进程是python中最小的资源分配单元，也就是进程中间的数据，内存是不共享的，每启动一个进程，都要独立分配资源和拷贝访问的数据，所以进程的启动和销毁的代价是比较大了，所以在实际中使用多进程，要根据服务器的配置来设定。</p>
</li>
<li><p>方法二</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from multiprocessing import  Process</span><br><span class="line"></span><br><span class="line">class MyProcess(Process): #继承Process类</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        super(MyProcess,self).__init__()</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        print(&#x27;测试%s多进程&#x27; % self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    process_list = []</span><br><span class="line">    for i in range(5):  #开启5个子进程执行fun1函数</span><br><span class="line">        p = MyProcess(&#x27;Python&#x27;) #实例化进程对象</span><br><span class="line">        p.start()</span><br><span class="line">        process_list.append(p)</span><br><span class="line"></span><br><span class="line">    for i in process_list:</span><br><span class="line">        p.join()</span><br><span class="line"></span><br><span class="line">    print(&#x27;结束测试&#x27;)</span><br></pre></td></tr></table></figure>

<p>Process类的其他方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">构造方法：</span><br><span class="line"></span><br><span class="line">Process([group [, target [, name [, args [, kwargs]]]]])</span><br><span class="line">　　group: 线程组 </span><br><span class="line">　　target: 要执行的方法</span><br><span class="line">　　name: 进程名</span><br><span class="line">　　args/kwargs: 要传入方法的参数</span><br><span class="line"></span><br><span class="line">实例方法：</span><br><span class="line">　　is_alive()：返回进程是否在运行,bool类型。</span><br><span class="line">　　join([timeout])：阻塞当前上下文环境的进程程，直到调用此方法的进程终止或到达指定的timeout（可选参数）。</span><br><span class="line">　　start()：进程准备就绪，等待CPU调度</span><br><span class="line">　　run()：strat()调用run方法，如果实例进程时未制定传入target，这star执行t默认run()方法。</span><br><span class="line">　　terminate()：不管任务是否完成，立即停止工作进程</span><br><span class="line"></span><br><span class="line">属性：</span><br><span class="line">　　daemon：和线程的setDeamon功能一样</span><br><span class="line">　　name：进程名字</span><br><span class="line">　　pid：进程号</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="python-多进程的通信"><a href="#python-多进程的通信" class="headerlink" title="python 多进程的通信"></a>python 多进程的通信<a href="#python-多进程的通信" class="header-anchor">#</a></h1><p>进程是系统独立调度核分配系统资源（CPU、内存）的基本单位，进程之间是相互独立的，每启动一个新的进程相当于把数据进行了一次克隆，子进程里的数据修改无法影响到主进程中的数据，不同子进程之间的数据也不能共享，这是多进程在使用中与多线程最明显的区别。但是难道Python多进程中间难道就是孤立的吗？当然不是，python也提供了多种方法实现了多进程中间的通信和数据共享（可以修改一份数据）</p>
<h3 id="进程对列queue"><a href="#进程对列Queue" class="headerlink" title="进程对列Queue"></a><strong>进程对列Queue</strong><a href="#进程对列queue" class="header-anchor">#</a></h3><p>Queue在多线程中也说到过，在生成者消费者模式中使用，是线程安全的，是生产者和消费者中间的数据管道，那在python多进程中，它其实就是进程之间的数据管道，实现进程通信。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from multiprocessing import Process,Queue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def fun1(q,i):</span><br><span class="line">    print(&#x27;子进程%s 开始put数据&#x27; %i)</span><br><span class="line">    q.put(&#x27;我是%s 通过Queue通信&#x27; %i)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    q = Queue()</span><br><span class="line"></span><br><span class="line">    process_list = []</span><br><span class="line">    for i in range(3):</span><br><span class="line">        p = Process(target=fun1,args=(q,i,))  #注意args里面要把q对象传给我们要执行的方法，这样子进程才能和主进程用Queue来通信</span><br><span class="line">        p.start()</span><br><span class="line">        process_list.append(p)</span><br><span class="line"></span><br><span class="line">    for i in process_list:</span><br><span class="line">        p.join()</span><br><span class="line"></span><br><span class="line">    print(&#x27;主进程获取Queue数据&#x27;)</span><br><span class="line">    print(q.get())</span><br><span class="line">    print(q.get())</span><br><span class="line">    print(q.get())</span><br><span class="line">    print(&#x27;结束测试&#x27;)</span><br></pre></td></tr></table></figure>



<h3 id="管道pipe"><a href="#管道Pipe" class="headerlink" title="管道Pipe"></a><strong>管道Pipe</strong><a href="#管道pipe" class="header-anchor">#</a></h3><p>管道Pipe和Queue的作用大致差不多，也是实现进程间的通信，下面之间看怎么使用吧</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from multiprocessing import Process, Pipe</span><br><span class="line">def fun1(conn):</span><br><span class="line">    print(&#x27;子进程发送消息：&#x27;)</span><br><span class="line">    conn.send(&#x27;你好主进程&#x27;)</span><br><span class="line">    print(&#x27;子进程接受消息：&#x27;)</span><br><span class="line">    print(conn.recv())</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    conn1, conn2 = Pipe() #关键点，pipe实例化生成一个双向管</span><br><span class="line">    p = Process(target=fun1, args=(conn2,)) #conn2传给子进程</span><br><span class="line">    p.start()</span><br><span class="line">    print(&#x27;主进程接受消息：&#x27;)</span><br><span class="line">    print(conn1.recv())</span><br><span class="line">    print(&#x27;主进程发送消息：&#x27;)</span><br><span class="line">    conn1.send(&quot;你好子进程&quot;)</span><br><span class="line">    p.join()</span><br><span class="line">    print(&#x27;结束测试&#x27;)</span><br></pre></td></tr></table></figure>

<h3 id="managers"><a href="#Managers" class="headerlink" title="Managers"></a><strong>Managers</strong><a href="#managers" class="header-anchor">#</a></h3><p>Queue和Pipe只是实现了数据交互，并没实现数据共享，即一个进程去更改另一个进程的数据。那么就要用到Managers</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from multiprocessing import Process, Manager</span><br><span class="line"></span><br><span class="line">def fun1(dic,lis,index):</span><br><span class="line"></span><br><span class="line">    dic[index] = &#x27;a&#x27;</span><br><span class="line">    dic[&#x27;2&#x27;] = &#x27;b&#x27;    </span><br><span class="line">    lis.append(index)    #[0,1,2,3,4,0,1,2,3,4,5,6,7,8,9]</span><br><span class="line">    #print(l)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    with Manager() as manager:</span><br><span class="line">        dic = manager.dict()#注意字典的声明方式，不能直接通过&#123;&#125;来定义</span><br><span class="line">        l = manager.list(range(5))#[0,1,2,3,4]</span><br><span class="line"></span><br><span class="line">        process_list = []</span><br><span class="line">        for i in range(10):</span><br><span class="line">            p = Process(target=fun1, args=(dic,l,i))</span><br><span class="line">            p.start()</span><br><span class="line">            process_list.append(p)</span><br><span class="line"></span><br><span class="line">        for res in process_list:</span><br><span class="line">            res.join()</span><br><span class="line">        print(dic)</span><br><span class="line">        print(l)</span><br></pre></td></tr></table></figure>

<h1 id="进程池"><a href="#进程池" class="headerlink" title="进程池"></a>进程池<a href="#进程池" class="header-anchor">#</a></h1><p>进程池内部维护一个进程序列，当使用时，则去进程池中获取一个进程，如果进程池序列中没有可供使用的进程，那么程序就会等待，直到进程池中有可用进程为止。就是固定有几个进程可以使用。</p>
<p>进程池中有两个方法：</p>
<p>apply：同步，一般不使用</p>
<p>apply_async：异步</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from  multiprocessing import Process,Pool</span><br><span class="line">import os, time, random</span><br><span class="line"></span><br><span class="line">def fun1(name):</span><br><span class="line">    print(&#x27;Run task %s (%s)...&#x27; % (name, os.getpid()))</span><br><span class="line">    start = time.time()</span><br><span class="line">    time.sleep(random.random() * 3)</span><br><span class="line">    end = time.time()</span><br><span class="line">    print(&#x27;Task %s runs %0.2f seconds.&#x27; % (name, (end - start)))</span><br><span class="line"></span><br><span class="line">if __name__==&#x27;__main__&#x27;:</span><br><span class="line">    pool = Pool(5) #创建一个5个进程的进程池</span><br><span class="line"></span><br><span class="line">    for i in range(10):</span><br><span class="line">        pool.apply_async(func=fun1, args=(i,))</span><br><span class="line"></span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    print(&#x27;结束测试&#x27;)</span><br></pre></td></tr></table></figure>

<p>对<code>Pool</code>对象调用<code>join()</code>方法会等待所有子进程执行完毕，调用<code>join()</code>之前必须先调用<code>close()</code>，调用<code>close()</code>之后就不能继续添加新的<code>Process</code>了。</p>
<h3 id="进程池map方法"><a href="#进程池map方法" class="headerlink" title="进程池map方法"></a><strong>进程池map方法</strong><a href="#进程池map方法" class="header-anchor">#</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import os </span><br><span class="line">import PIL </span><br><span class="line"></span><br><span class="line">from multiprocessing import Pool </span><br><span class="line">from PIL import Image</span><br><span class="line"></span><br><span class="line">SIZE = (75,75)</span><br><span class="line">SAVE_DIRECTORY = \&#x27;thumbs\&#x27;</span><br><span class="line"></span><br><span class="line">def get_image_paths(folder):</span><br><span class="line">    return (os.path.join(folder, f) </span><br><span class="line">            for f in os.listdir(folder) </span><br><span class="line">            if \&#x27;jpeg\&#x27; in f)</span><br><span class="line"></span><br><span class="line">def create_thumbnail(filename): </span><br><span class="line">    im = Image.open(filename)</span><br><span class="line">    im.thumbnail(SIZE, Image.ANTIALIAS)</span><br><span class="line">    base, fname = os.path.split(filename) </span><br><span class="line">    save_path = os.path.join(base, SAVE_DIRECTORY, fname)</span><br><span class="line">    im.save(save_path)</span><br><span class="line"></span><br><span class="line">if __name__ == \&#x27;__main__\&#x27;:</span><br><span class="line">    folder = os.path.abspath(</span><br><span class="line">        \&#x27;11_18_2013_R000_IQM_Big_Sur_Mon__e10d1958e7b766c3e840\&#x27;)</span><br><span class="line">    os.mkdir(os.path.join(folder, SAVE_DIRECTORY))</span><br><span class="line"></span><br><span class="line">    images = get_image_paths(folder)</span><br><span class="line"></span><br><span class="line">    pool = Pool()</span><br><span class="line">    pool.map(creat_thumbnail, images) #关键点，images是一个可迭代对象</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br></pre></td></tr></table></figure>





<h1 id="参考方法"><a href="#参考方法" class="headerlink" title="参考方法"></a>参考方法<a href="#参考方法" class="header-anchor">#</a></h1><p><a href="https://zhuanlan.zhihu.com/p/64702600">一篇文章搞定Python多进程</a></p>
<p><a href="https://blog.csdn.net/ubuntu64fan/article/details/51898740">python 如何优雅地退出子进程</a></p>
<p><a href="https://blog.csdn.net/qq_43475705/article/details/115518463"> python多进程多线程,多个程序同时运行</a></p>
<p><a href="https://blog.csdn.net/qq_17127427/article/details/116532097">pytorch多模型异步推理</a></p>
]]></content>
  </entry>
  <entry>
    <title>mmdetection</title>
    <url>/article/mmdetection/</url>
    <content><![CDATA[<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料<a href="#参考资料" class="header-anchor">#</a></h1><p><a href="https://www.jianshu.com/p/38f4525246e1">MMDetection 2.5 目标检测（3）：配置修改 - 简书 (jianshu.com)</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/137454940">mmdetection源码分析faster-rcnn，读懂mmdetection - 知乎 (zhihu.com)</a></p>
<p><a href="https://www.jianshu.com/p/924db4d52213">将自己数据集转化成voc数据集格式并用mmdetection训练 - 简书 (jianshu.com)</a></p>
<p><a href="https://blog.csdn.net/qq_33897832/article/details/103995636">(29条消息) （详细教程）mmdetection训练自己的模型，测试，评估_若风的博客-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/qq_41251963/article/details/112940253">(29条消息) 【MMDetection-学习记录】 训练自己的VOC数据集_乐亦亦乐的博客-CSDN博客</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/162730118">MMDetection v2.0 训练自己的数据集 - 知乎 (zhihu.com)</a></p>
<p><a href="https://www.aiuai.cn/aifarm1218.html">mmdetection 模型训练</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/128697076">mmdetection源码解读（一） - 知乎 (zhihu.com)</a></p>
]]></content>
  </entry>
  <entry>
    <title>python_base</title>
    <url>/article/python-base/</url>
    <content><![CDATA[<h1 id="initpy"><a href="#init-py" class="headerlink" title="init.py"></a><strong>init</strong>.py<a href="#initpy" class="header-anchor">#</a></h1><p>首先，module其实就是一个.py文件，中文名为模块，其内置有各种函数和类与变量等。而package就是一个包含很多subpackage或者module(.py文件)的一个包。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/16486710-40ddf50fd0d6b105.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/format/webp" alt="img"></p>
<p>一个directories 只有包含__init__.py文件才会被python识别成package。只有在import package时，才会执行package目录下的__init__.py文件。</p>
<p>若文件结构如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mypackage</span><br><span class="line">    ——__init__.py</span><br><span class="line">    ——subpackage_1</span><br><span class="line">        ——__init__.py</span><br><span class="line">        ——test11.py</span><br><span class="line">        ——test12.py</span><br><span class="line">    ——subpackage_2</span><br><span class="line">        ——__init__.py</span><br><span class="line">        ——test21.py</span><br><span class="line">        ——test22.py</span><br></pre></td></tr></table></figure>



<h1 id="pickle-json"><a href="#pickle-json" class="headerlink" title="pickle, json"></a>pickle, json<a href="#pickle-json" class="header-anchor">#</a></h1><p>都是四个函数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pickle.dumps()：将 Python 中的对象序列化成二进制对象，并返回；</span><br><span class="line">pickle.loads()：读取给定的二进制对象数据，并将其转换为 Python 对象；</span><br><span class="line">pickle.dump()：将 Python 中的对象序列化成二进制对象，并写入文件；</span><br><span class="line">pickle.load()：读取指定的序列化数据文件，并返回对象。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">json.load()从文件中读取json字符串</span><br><span class="line">json.loads()将json字符串转换为字典类型</span><br><span class="line">json.dumps()将python中的字典类型转换为字符串类型</span><br><span class="line">json.dump()将json格式字符串写到文件中</span><br></pre></td></tr></table></figure>



<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料<a href="#参考资料" class="header-anchor">#</a></h1><p><a href="https://www.jianshu.com/p/eaae9678a779"><strong>init</strong>.py文件与__all__变量</a></p>
<p><a href="https://blog.csdn.net/yucicheung/article/details/79445350">python模块中__init__.py的作用</a></p>
<p><a href="https://www.cnblogs.com/qi-yuan-008/p/12827918.html">Python：<strong>init</strong>.py文件和、<strong>all__、import、__name__、__doc</strong> </a></p>
]]></content>
  </entry>
  <entry>
    <title>result_record</title>
    <url>/article/result-record/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="4c4b9bb42ea02a9c4f12cbb619927a37672052d7ec732725df69faf6a4e78438"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">st结果记录2</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>加密</tag>
      </tags>
  </entry>
  <entry>
    <title>theme</title>
    <url>/article/theme/</url>
    <content><![CDATA[<h3 id="更改主题"><a href="#更改主题" class="headerlink" title="更改主题"></a>更改主题<a href="#更改主题" class="header-anchor">#</a></h3><p>进入命令行，下载 NexT 主题，输入:</p>
<p><code>git clone https://github.com/theme-next/hexo-theme-next themes/next</code></p>
<p>修改站点配置文件<code>_config.yml</code>，找到如下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: landscape</span><br></pre></td></tr></table></figure>

<p>将 landscape 修改为 next 即可。</p>
<span id="more"></span>

<h3 id="隐藏网页底部-powered-by-hexo-强力驱动"><a href="#隐藏网页底部-powered-By-Hexo-强力驱动" class="headerlink" title="隐藏网页底部 powered By Hexo / 强力驱动"></a>隐藏网页底部 powered By Hexo / 强力驱动<a href="#隐藏网页底部-powered-by-hexo-强力驱动" class="header-anchor">#</a></h3><p>打开 themes/next/layout/_partials/footer.swig</p>
<p>找到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.footer.powered.enable %&#125;</span><br><span class="line">&lt;div class=&quot;powered-by&quot;&gt;&#123;#</span><br><span class="line">#&#125;&#123;&#123; __(&#x27;footer.powered&#x27;, &#x27;&lt;a class=&quot;theme-link&quot; target=&quot;_blank&quot;&#x27; + nofollow + &#x27; href=&quot;https://hexo.io&quot;&gt;Hexo&lt;/a&gt;&#x27;) &#125;&#125;&#123;% if theme.footer.powered.version %&#125; v&#123;&#123; hexo_env(&#x27;version&#x27;) &#125;&#125;&#123;% endif %&#125;&#123;#</span><br><span class="line">#&#125;&lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% if theme.footer.powered.enable and theme.footer.theme.enable %&#125;</span><br><span class="line">&lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% if theme.footer.theme.enable %&#125;</span><br><span class="line">&lt;div class=&quot;theme-info&quot;&gt;&#123;#</span><br><span class="line">#&#125;&#123;&#123; __(&#x27;footer.theme&#x27;) &#125;&#125; – &#123;#</span><br><span class="line">#&#125;&lt;a class=&quot;theme-link&quot; target=&quot;_blank&quot;&#123;&#123; nofollow &#125;&#125; href=&quot;https://theme-next.org&quot;&gt;&#123;#</span><br><span class="line">#&#125;NexT.&#123;&#123; theme.scheme &#125;&#125;&#123;#</span><br><span class="line">#&#125;&lt;/a&gt;&#123;% if theme.footer.theme.version %&#125; v&#123;&#123; version &#125;&#125;&#123;% endif %&#125;&#123;#</span><br><span class="line">#&#125;&lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>把这段代码首尾分别加上：<code>&lt;!--</code> 和<code>--&gt;</code>，或者直接删除。</p>
<h3 id="统计字数和阅读时间"><a href="#统计字数和阅读时间" class="headerlink" title="统计字数和阅读时间"></a>统计字数和阅读时间<a href="#统计字数和阅读时间" class="header-anchor">#</a></h3><p>安装插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure>

<p>在站点配置文件_config.yml中添加如下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  symbols: true</span><br><span class="line">  time: true</span><br><span class="line">  total_symbols: true</span><br><span class="line">  total_time: true</span><br></pre></td></tr></table></figure>



<p>在主题配置文件找到对应代码修改为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  separated_meta: true</span><br><span class="line">  item_text_post: true</span><br><span class="line">  item_text_total: false</span><br><span class="line">  awl: 4</span><br><span class="line">  wpm: 275</span><br></pre></td></tr></table></figure>

<p>最后：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g </span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>





<h3 id="文档加密"><a href="#文档加密" class="headerlink" title="文档加密"></a>文档加密<a href="#文档加密" class="header-anchor">#</a></h3><p>安装插件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-blog-encrypt</span><br></pre></td></tr></table></figure>

<p>在站点配置文件中启用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">encrypt:</span><br><span class="line">    enable: true</span><br></pre></td></tr></table></figure>

<p>然后在文章头部加上对应字段password, abstract, message</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章加密</span><br><span class="line">date: 2019-01-04T22:20:13.000Z</span><br><span class="line">category: 教程</span><br><span class="line">tags:</span><br><span class="line">  - 博客</span><br><span class="line">  - Hexo</span><br><span class="line">keywords: 博客文章密码</span><br><span class="line">password: TloveY</span><br><span class="line">abstract: 密码：TloveY</span><br><span class="line">message:  输入密码，查看文章</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">password: 是该博客加密使用的密码</span><br><span class="line">abstract: 是该博客的摘要，会显示在博客的列表页</span><br><span class="line">message: 这个是博客查看时，密码输入框上面的描述性文字</span><br></pre></td></tr></table></figure>

<h3 id="部分显示"><a href="#部分显示" class="headerlink" title="部分显示"></a>部分显示<a href="#部分显示" class="header-anchor">#</a></h3><ol>
<li><p>写概述</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 让首页显示部分内容</span><br><span class="line">date: 2020-02-23 22:55:10</span><br><span class="line">description: 这是显示在首页的概述，正文内容均会被隐藏。</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li>
<li><p>文章截断</p>
<p>在需要的地方插入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>tqdm使用</title>
    <url>/article/tqdm%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用<a href="#基本使用" class="header-anchor">#</a></h1><ol>
<li><p>迭代的形式</p>
<p>使用<code>tqdm()</code>封装可迭代的对象：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from tqdm import tqdm</span><br><span class="line">from time import sleep</span><br><span class="line"></span><br><span class="line">text = &quot;&quot;</span><br><span class="line">for char in tqdm([&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]):</span><br><span class="line">    sleep(0.25)</span><br><span class="line">    text = text + char</span><br></pre></td></tr></table></figure>

<span id="more"></span></li>
<li><p>手动的形式</p>
<p>除了迭代的形式，你可以手动控制进度，加一个tqdm上下文即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">with tqdm(total=100) as pbar:</span><br><span class="line">    for i in range(10):</span><br><span class="line">        sleep(0.1)</span><br><span class="line">        pbar.update(10)</span><br></pre></td></tr></table></figure>

<p>上述例子中，pbar 是 tpdm 的“进度”，每一次对 pbar 进行 update 10 都相当于进度加10。</p>
<p>也可以不是上下文形式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pbar = tqdm(total=100)</span><br><span class="line">for i in range(10):</span><br><span class="line">    sleep(0.1)</span><br><span class="line">    pbar.update(10)</span><br><span class="line">pbar.close()</span><br></pre></td></tr></table></figure></li>
<li><p>观察处理的数据</p>
<p>通过<code>tqdm</code>提供的<code>set_description</code>方法可以实时查看每次处理的数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from tqdm import tqdm</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">pbar = tqdm([&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;])</span><br><span class="line">for c in pbar:</span><br><span class="line">  time.sleep(1)</span><br><span class="line">  pbar.set_description(&quot;Processing %s&quot;%c)</span><br></pre></td></tr></table></figure></li>
<li><p>linux命令行进度条</p>
<p>不使用tqdm</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ time find . -name &#x27;*.py&#x27; -type f -exec cat \&#123;&#125; \; | wc -l</span><br><span class="line">857365</span><br><span class="line"></span><br><span class="line">real  0m3.458s</span><br><span class="line">user  0m0.274s</span><br><span class="line">sys   0m3.325s</span><br></pre></td></tr></table></figure>

<p>使用tqdm</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ time find . -name &#x27;*.py&#x27; -type f -exec cat \&#123;&#125; \; | tqdm | wc -l</span><br><span class="line">857366it [00:03, 246471.31it/s]</span><br><span class="line">857365</span><br><span class="line"></span><br><span class="line">real  0m3.585s</span><br><span class="line">user  0m0.862s</span><br><span class="line">sys   0m3.358s</span><br></pre></td></tr></table></figure>

<p>指定tqdm的参数控制进度条</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ find . -name &#x27;*.py&#x27; -type f -exec cat \&#123;&#125; \; |</span><br><span class="line">  tqdm --unit loc --unit_scale --total 857366 &gt;&gt; /dev/null</span><br><span class="line">100%|███████████████████████████████████| 857K/857K [00:04&lt;00:00, 246Kloc/s]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ 7z a -bd -r backup.7z docs/ | grep Compressing |</span><br><span class="line">  tqdm --total $(find docs/ -type f | wc -l) --unit files &gt;&gt; backup.log</span><br><span class="line">100%|███████████████████████████████▉| 8014/8014 [01:37&lt;00:00, 82.29files/s]</span><br></pre></td></tr></table></figure></li>
<li><p>自定义进度条显示信息</p>
<p>通过<code>set_description</code>和<code>set_postfix</code>方法设置进度条显示信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from tqdm import trange</span><br><span class="line">from random import random,randint</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">with trange(100) as t:</span><br><span class="line">  for i in t:</span><br><span class="line">    #设置进度条左边显示的信息</span><br><span class="line">    t.set_description(&quot;GEN %i&quot;%i)</span><br><span class="line">    #设置进度条右边显示的信息</span><br><span class="line">    t.set_postfix(loss=random(),gen=randint(1,999),str=&quot;h&quot;,lst=[1,2])</span><br><span class="line">    time.sleep(0.1)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from tqdm import tqdm</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">with tqdm(total=10,bar_format=&quot;&#123;postfix[0]&#125;&#123;postfix[1][value]:&gt;9.3g&#125;&quot;,</span><br><span class="line">     postfix=[&quot;Batch&quot;,dict(value=0)]) as t:</span><br><span class="line">  for i in range(10):</span><br><span class="line">    time.sleep(0.05)</span><br><span class="line">    t.postfix[1][&quot;value&quot;] = i / 2</span><br><span class="line">    t.update()</span><br></pre></td></tr></table></figure></li>
<li><p>多层循环进度条</p>
<p>通过<code>tqdm</code>也可以很简单的实现嵌套循环进度条的展示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from tqdm import tqdm</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">for i in tqdm(range(20), ascii=True,desc=&quot;1st loop&quot;):</span><br><span class="line">  for j in tqdm(range(10), ascii=True,desc=&quot;2nd loop&quot;):</span><br><span class="line">    time.sleep(0.01)</span><br></pre></td></tr></table></figure></li>
<li><p>多进程进度条</p>
<p>在使用多进程处理任务的时候，通过tqdm可以实时查看每一个进程任务的处理情况</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from time import sleep</span><br><span class="line">from tqdm import trange, tqdm</span><br><span class="line">from multiprocessing import Pool, freeze_support, RLock</span><br><span class="line"></span><br><span class="line">L = list(range(9))</span><br><span class="line"></span><br><span class="line">def progresser(n):</span><br><span class="line">  interval = 0.001 / (n + 2)</span><br><span class="line">  total = 5000</span><br><span class="line">  text = &quot;#&#123;&#125;, est. &#123;:&lt;04.2&#125;s&quot;.format(n, interval * total)</span><br><span class="line">  for i in trange(total, desc=text, position=n,ascii=True):</span><br><span class="line">    sleep(interval)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">  freeze_support() # for Windows support</span><br><span class="line">  p = Pool(len(L),</span><br><span class="line">       # again, for Windows support</span><br><span class="line">       initializer=tqdm.set_lock, initargs=(RLock(),))</span><br><span class="line">  p.map(progresser, L)</span><br><span class="line">  print(&quot;\n&quot; * (len(L) - 2))</span><br></pre></td></tr></table></figure></li>
<li><p>pandas中使用tqdm</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line">from tqdm import tqdm</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.random.randint(0, 100, (100000, 6)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tqdm.pandas(desc=&quot;my bar!&quot;)</span><br><span class="line">df.progress_apply(lambda x: x**2)</span><br></pre></td></tr></table></figure></li>
<li><p>递归使用进度条</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from tqdm import tqdm</span><br><span class="line">import os.path</span><br><span class="line"></span><br><span class="line">def find_files_recursively(path, show_progress=True):</span><br><span class="line">  files = []</span><br><span class="line">  # total=1 assumes `path` is a file</span><br><span class="line">  t = tqdm(total=1, unit=&quot;file&quot;, disable=not show_progress)</span><br><span class="line">  if not os.path.exists(path):</span><br><span class="line">    raise IOError(&quot;Cannot find:&quot; + path)</span><br><span class="line"></span><br><span class="line">  def append_found_file(f):</span><br><span class="line">    files.append(f)</span><br><span class="line">    t.update()</span><br><span class="line"></span><br><span class="line">  def list_found_dir(path):</span><br><span class="line">    &quot;&quot;&quot;returns os.listdir(path) assuming os.path.isdir(path)&quot;&quot;&quot;</span><br><span class="line">    try:</span><br><span class="line">      listing = os.listdir(path)</span><br><span class="line">    except:</span><br><span class="line">      return []</span><br><span class="line">    # subtract 1 since a &quot;file&quot; we found was actually this directory</span><br><span class="line">    t.total += len(listing) - 1</span><br><span class="line">    # fancy way to give info without forcing a refresh</span><br><span class="line">    t.set_postfix(dir=path[-10:], refresh=False)</span><br><span class="line">    t.update(0) # may trigger a refresh</span><br><span class="line">    return listing</span><br><span class="line"></span><br><span class="line">  def recursively_search(path):</span><br><span class="line">    if os.path.isdir(path):</span><br><span class="line">      for f in list_found_dir(path):</span><br><span class="line">        recursively_search(os.path.join(path, f))</span><br><span class="line">    else:</span><br><span class="line">      append_found_file(path)</span><br><span class="line"></span><br><span class="line">  recursively_search(path)</span><br><span class="line">  t.set_postfix(dir=path)</span><br><span class="line">  t.close()</span><br><span class="line">  return files</span><br><span class="line"></span><br><span class="line">find_files_recursively(&quot;E:/&quot;)</span><br></pre></td></tr></table></figure></li>
<li><p>注意</p>
<p>在使用<code>tqdm</code>显示进度条的时候，如果代码中存在<code>print</code>可能会导致输出多行进度条，此时可以将<code>print</code>语句改为<code>tqdm.write</code>，代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for i in tqdm(range(10),ascii=True):</span><br><span class="line">  tqdm.write(&quot;come on&quot;)</span><br><span class="line">  time.sleep(0.1)</span><br></pre></td></tr></table></figure></li>
<li><p>alive-process 花式进度条</p>
</li>
</ol>
<p><a href="https://jishuin.proginn.com/p/763bfbd55bf8">酷炫的 Python 进度条开源库：alive-progress-技术圈 (proginn.com)</a></p>
]]></content>
  </entry>
  <entry>
    <title>todo_list</title>
    <url>/article/todo-list/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>train_record</title>
    <url>/article/train-record/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="76e88f2144305cb6fa77381186c6dbf90445879fb455877dd4ec170b7395b02c"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>加密</tag>
      </tags>
  </entry>
  <entry>
    <title>yolov5_real</title>
    <url>/article/yolov5_real/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3f3d2b4903348586b0d519d55c6ca8be7dc19536536666d8ead458945856bf74"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>加密</tag>
      </tags>
  </entry>
  <entry>
    <title>上采样方法</title>
    <url>/article/%E4%B8%8A%E9%87%87%E6%A0%B7%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="pixelshuffle"><a href="#pixelshuffle" class="headerlink" title="pixelshuffle"></a>pixelshuffle<a href="#pixelshuffle" class="header-anchor">#</a></h1><p>上采样可以理解为在同一个位置，原来只是以1:1的比例提取信息，而现在以1:4的比例提取信息，提取信息的频率更高了，所以能反映的细节也就更多。对于tensor来说，在同一个位置多提取信息，也就是通过卷积生成通道数更多的tensor。具体过程为（以一个（n,64,64,64）的特征图为例）</p>
<ol>
<li>通过卷积，得到通道数倍增的特征图（n,64,64,256）</li>
<li>将特征图切割成若干份，对每一份（n,64,64,4）的像素点进行重新排列,reshape成(n,64,64,2,2），再reshape成（n,64,2,64,2），最后reshape成（n,128,128,1），再把这么多份拼接起来，得（n,128,128,64）的特征图</li>
</ol>
<p><img src="%E4%B8%8A%E9%87%87%E6%A0%B7%E6%96%B9%E6%B3%95/image-20210906161758378.png" alt="image-20210906161758378"></p>
<p><img src="%E4%B8%8A%E9%87%87%E6%A0%B7%E6%96%B9%E6%B3%95/image-20210906161922868.png" alt="image-20210906161922868"></p>
<h1 id="upsample"><a href="#upsample" class="headerlink" title="upsample"></a>upsample<a href="#upsample" class="header-anchor">#</a></h1><p>插值方法</p>
<h1 id="转置卷积convtranspose2d"><a href="#转置卷积-ConvTranspose2d" class="headerlink" title="转置卷积(ConvTranspose2d)"></a>转置卷积(ConvTranspose2d)<a href="#转置卷积convtranspose2d" class="header-anchor">#</a></h1><p>填充0后做卷积</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料<a href="#参考资料" class="header-anchor">#</a></h1><p><a href="https://blog.csdn.net/qq_14845119/article/details/107557449">(19条消息) 上采样方法大PK（Upsample，Interpolate，resize，Transposed convolution，deconv，Unpool，Pixelshuffle）_年轻即出发，-CSDN博客</a></p>
<p><a href="https://www.cnblogs.com/oliyoung/p/upsample.html">上采样，上池化，反卷积 - OliYoung - 博客园 (cnblogs.com)</a></p>
<p><a href="https://www.pianshen.com/article/46871443097/">PixelShuffler原理学习笔记 - 程序员大本营 (pianshen.com)</a></p>
<p><a href="https://www.cnblogs.com/jiangkejie/p/12919155.html">pytorch中的上采样（上采样，转置卷积，上池化，PixelShuffle） - 那抹阳光1994 - 博客园 (cnblogs.com)</a></p>
]]></content>
  </entry>
  <entry>
    <title>yolox训练自定义数据集</title>
    <url>/article/yolox%E8%AE%AD%E7%BB%83%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E9%9B%86/</url>
    <content><![CDATA[<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置<a href="#环境配置" class="header-anchor">#</a></h1><p> 第一步：安装YOLOX</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:Megvii-BaseDetection/YOLOX.git</span><br><span class="line">cd YOLOX</span><br><span class="line">pip3 install -U pip &amp;&amp; pip3 install -r requirements.txt</span><br><span class="line">pip3 install -v -e .  # or  python3 setup.py develop</span><br></pre></td></tr></table></figure>



<p>第二步：安装apex</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 如果不想训练模型，可跳过这步。</span><br><span class="line">git clone https://github.com/NVIDIA/apex</span><br><span class="line">cd apex</span><br><span class="line">pip3 install -v --disable-pip-version-check --no-cache-dir --global-option=&quot;--cpp_ext&quot; --global-option=&quot;--cuda_ext&quot; ./</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>此处需要torch的cuda版本和外部环境的cuda版本一致，比如我们的服务器是10.2，那么torch的也要是10.2</p>
<p>可通过<code>torch.version.cuda</code>确认，最好是选择docker来配置。Windows也不推荐，即使是wsl。</p>
<p>第三步： 安装 <a href="https://github.com/cocodataset/cocoapi">pycocotools</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip3 install cython; pip3 install &#x27;git+https://github.com/cocodataset/cocoapi.git#subdirectory=PythonAPI&#x27;</span><br></pre></td></tr></table></figure>



<h1 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置<a href="#修改配置" class="header-anchor">#</a></h1><p>修改<code>exps/example/yolox_voc/yolox_voc_s.py</code>, 主要涉及类别和文件路径</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/fb863c7fbfa25392b426aa319026887b.png" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/b52f331bb2f1f35a057136c8e5b77656.png" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/febec4ac7bf5e614f383ea5932007ffe.png" alt="在这里插入图片描述"></p>
<p>修改<code>yolox/data/datasets/__init__.py</code></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/e4575a30f261ae0371fd460684d41763.png" alt="img"></p>
<p>修改<code>yolox/data/datasets/voc_classes.py</code></p>
<p><img src="yolox%E8%AE%AD%E7%BB%83%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E9%9B%86/image-20210830143808609.png" alt="image-20210830143808609"></p>
<h1 id="开始训练"><a href="#开始训练" class="headerlink" title="开始训练"></a>开始训练<a href="#开始训练" class="header-anchor">#</a></h1><p><code>python tools/train.py -f exps/example/yolox_voc/yolox_voc_s.py -d 1 -b 16 --fp16 -o -c yolox_s.pth</code></p>
<ul>
<li>-d 使用多少张显卡训练</li>
<li>-b 批次大小</li>
<li>–fp16 是否开启半精度训练</li>
</ul>
<h1 id="批量推理"><a href="#批量推理" class="headerlink" title="批量推理"></a>批量推理<a href="#批量推理" class="header-anchor">#</a></h1><p>非官方实现，其实也就是for循环实现的。</p>
<p><code>tools/test_imgs.py</code>:</p>
<p><img src="yolox%E8%AE%AD%E7%BB%83%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E9%9B%86/image-20210830144401995.png" alt="image-20210830144401995"></p>
<p><img src="yolox%E8%AE%AD%E7%BB%83%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E9%9B%86/image-20210830144449907.png" alt="image-20210830144449907"></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料<a href="#参考资料" class="header-anchor">#</a></h1><p><a href="https://zhuanlan.zhihu.com/p/397499216">深入浅出Yolox之自有数据集训练超详细教程 </a></p>
<p><a href="https://blog.csdn.net/qq_39056987/article/details/119002910">YOLOX自定义数据集训练</a></p>
<p><a href="https://github.com/DataXujing/YOLOX-">DataXujing/YOLOX-: YOLOX 训练自己的数据集 TensorRT加速 详细教程</a></p>
]]></content>
  </entry>
  <entry>
    <title>python_进阶</title>
    <url>/article/python-%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<h1 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数<a href="#偏函数" class="header-anchor">#</a></h1><p>定义：偏函数的第二个部分(可变参数)，按原有函数的参数顺序进行补充，参数将作用在原函数上，最后偏函数返回一个新函数（类似于，装饰器decorator，对于函数进行二次包装，产生特殊效果；但又不同于装饰器，偏函数产生了一个新函数，而装饰器，可改变被装饰函数的函数入口地址也可以不影响原函数）</p>
<p>例一：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from functools import partial</span><br><span class="line"> </span><br><span class="line">def mod( n, m ):</span><br><span class="line">  return n % m</span><br><span class="line"> </span><br><span class="line">mod_by_100 = partial( mod, 100 )</span><br><span class="line"> </span><br><span class="line">print mod( 100, 7 )  # 2</span><br><span class="line">print mod_by_100( 7 )  # 2</span><br></pre></td></tr></table></figure>

<p>例二：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from functools import partial</span><br><span class="line"> </span><br><span class="line">bin2dec = partial( int, base=2 )</span><br><span class="line">print bin2dec( &#x27;0b10001&#x27; )  # 17</span><br><span class="line">print bin2dec( &#x27;10001&#x27; )  # 17</span><br><span class="line"> </span><br><span class="line">hex2dec = partial( int, base=16 )</span><br><span class="line">print hex2dec( &#x27;0x67&#x27; )  # 103</span><br><span class="line">print hex2dec( &#x27;67&#x27; )  # 103</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="同步异步阻塞非阻塞"><a href="#同步，异步，阻塞，非阻塞" class="headerlink" title="同步，异步，阻塞，非阻塞"></a>同步，异步，阻塞，非阻塞<a href="#同步异步阻塞非阻塞" class="header-anchor">#</a></h1><p>二者其实是不同维度的东西，但是的确容易搞混。</p>
<p>做法A(同步，阻塞) :开单独线程（进程）处理，线程内一般是循环接收消息。<br>做法B(同步，非阻塞) :主线程循环处理,但一般搭配sleep函数(释放时间片,自身状态运行转就绪再等待时间片)，避免完全的cpu空转<br>做法C(异步，非阻塞):函数参数包含函数(回调函数)，或url地址，类似的东西，对方有消息就推送给你，所以还需要新开一个接口(or功能)用来接受信息。</p>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">例子:老张水壶</span><br><span class="line">老张爱喝茶，废话不说，煮开水。</span><br><span class="line">出场人物：老张，水壶两把（普通水壶，简称水壶；会响的水壶，简称响水壶）。</span><br><span class="line">1 老张把水壶放到火上，立等水开。（同步阻塞）</span><br><span class="line">2 老张把水壶放到火上，去客厅看电视，时不时去厨房看看水开没有。（同步非阻塞）</span><br><span class="line">老张还是觉得自己有点傻，于是变高端了，买了把会响笛的那种水壶。水开之后，能大声发出嘀~的噪音。</span><br><span class="line">3 老张把响水壶放到火上，立等水开。（异步阻塞）</span><br><span class="line">4 老张把响水壶放到火上，去客厅看电视，水壶响之前不再去看它了，响了再去拿壶。（异步非阻塞）</span><br><span class="line">所谓同步异步，只是对于水壶而言。</span><br><span class="line">普通水壶，同步；响水壶，异步。虽然都能干活，但响水壶可以在自己完工之后，提示老张水开了。这是普通水壶所不能及的。同步只能让调用者去轮询自己（情况2中），造成老张效率的低下。</span><br><span class="line">所谓阻塞非阻塞，仅仅对于老张而言。</span><br><span class="line">立等的老张，阻塞；看电视的老张，非阻塞。情况1和情况3中老张就是阻塞的，媳妇喊他都不知道。虽然3中响水壶是异步的，可对于立等的老张没有太大的意义。所以一般异步是配合非阻塞使用的，这样才能发挥异步的效用。</span><br></pre></td></tr></table></figure>



<h1 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发<a href="#并发" class="header-anchor">#</a></h1><h2 id="进程状态和调度"><a href="#进程状态和调度" class="headerlink" title="进程状态和调度"></a>进程状态和调度<a href="#进程状态和调度" class="header-anchor">#</a></h2><p><img src="python-%E8%BF%9B%E9%98%B6/image-20210824144323526.png" alt="image-20210824144323526"></p>
<p><img src="python-%E8%BF%9B%E9%98%B6/image-20210824144415139.png" alt="image-20210824144415139"></p>
<h2 id="进程线程协程"><a href="#进程-线程-协程" class="headerlink" title="进程,线程,协程"></a>进程,线程,协程<a href="#进程线程协程" class="header-anchor">#</a></h2><p>1、进程<br>进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动,进程是系统进行<strong>资源</strong>分配和调度的一个独立单位。每个进程都有自己的独立内存空间，不同进程通过进程间通信来通信。由于进程比较重量，占据独立的内存，所以上下文进程间的切换开销（栈、寄存器、虚拟内存、文件句柄等）比较大，但相对比较稳定安全。<br>2、线程<br>线程是进程的一个实体,是<strong>CPU调度</strong>和分派的基本单位,它是比进程更小的能独立运行的基本单位.线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。线程间通信主要通过共享内存，上下文切换很快，资源开销较少，但相比进程不够稳定容易丢失数据。<br>3、协程<br>协程是一种<strong>用户态的轻量级线程</strong>，协程的调度完全由用户控制。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则基本没有内核切换的开销，<strong>可以不加锁的访问全局变量</strong>，所以上下文的切换非常快。</p>
<h2 id="多进程和多线程"><a href="#多进程和多线程" class="headerlink" title="多进程和多线程"></a>多进程和多线程<a href="#多进程和多线程" class="header-anchor">#</a></h2><p>在数据共享、同步方面，多进程是数据共享复杂，需要用IPC，数据是分开的，同步简单。多线程因为共享进程数据，数据共享简单，但同步复杂；<br>在内存、CPU方面，多进程占用内存多，切换复杂，CPU利用率低。<br>多线程占用内存少，切换简单，CPU利用率高；<br>在创建销毁、切换方面，多进程创建销毁、切换复杂，速度慢。多线程创建销毁、切换简单，速度很快；<br>在编程、调试方面，<strong>多进程编程和调试都简单。多线程编程和调试都复杂</strong>；<br><strong>可靠性方面，多进程间不会互相影响。多线程中的一个线程挂掉将导致整个进程挂掉；</strong><br>在分布式方面，多进程适应于多核、多机分布式。多线程适应于多核分布式。</p>
<p><strong>多进程模式最大的优点就是稳定性高</strong>，因为一个子进程崩溃了，不会影响主进程和其他子进程。（当然主进程挂了所有进程就全挂了，但是Master进程只负责分配任务，挂掉的概率低）著名的Apache最早就是采用多进程模式。<br><strong>多进程模式的缺点是创建进程的代价大</strong>，在Unix/Linux系统下，用fork调用还行，在Windows下创建进程开销巨大。另外，操作系统能同时运行的进程数也是有限的，在内存和CPU的限制下，如果有几千个进程同时运行，操作系统连调度都会成问题。<br>多线程模式通常比多进程快一点，但是也快不到哪去，而且，<strong>多线程模式致命的缺点</strong>就是任何一个线程挂掉都可能直接造成<strong>整个进程崩溃</strong>，因为所有线程共享进程的内存。在Windows上，如果一个线程执行的代码出了问题，你经常可以看到这样的提示：“该程序执行了非法操作，即将关闭”，其实往往是某个线程出了问题，但是操作系统会强制结束整个进程。<br><strong>在Windows下，多线程的效率比多进程要高</strong>，所以微软的IIS服务器默认采用多线程模式。由于多线程存在稳定性的问题，IIS的稳定性就不如Apache。为了缓解这个问题，IIS和Apache现在又有多进程+多线程的混合模式，真是把问题越搞越复杂。</p>
<p><img src="python-%E8%BF%9B%E9%98%B6/image-20210824145859135.png" alt="image-20210824145859135"></p>
<h2 id="线程和协程"><a href="#线程和协程" class="headerlink" title="线程和协程"></a>线程和协程<a href="#线程和协程" class="header-anchor">#</a></h2><p>协程:又被称为用户级线程或绿色线程。</p>
<ol>
<li>一个线程可以多个协程，一个进程也可以单独拥有多个协程，这样python中则能使用多核CPU。</li>
<li> 线程进程都是同步机制，而协程则是异步</li>
<li>协程能保留上一次调用时的状态，每次过程重入时，就相当于进入上一次调用的状态</li>
</ol>
<h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程<a href="#协程" class="header-anchor">#</a></h2><p>协程 :<br>能够在一个线程中实现并发效果的效果,提高cpu的利用率<br>无需原子操作锁定及同步的开销<br>能够规避一些任务中的IO操作<br>方便切换控制流，简化编程模型<br>协程相比于多线程的优势 切换的效率更快了</p>
<p>缺点：<br>无法利用多核资源：协程的本质是个单线程,它不能同时将 单个CPU 的多个核用上,协程需要和进程配合才能运行在多CPU上.当然我们日常所编写的绝大部分应用都没有这个必要，除非是cpu密集型应用。</p>
<p>线程和进程的操作是由程序触发系统接口，最后的执行者是系统，它本质上是操作系统提供的功能。而协程的操作则是程序员指定的，在python中通过yield，人为的实现并发处理。<br>协程存在的意义：对于多线程应用，CPU通过切片的方式来切换线程间的执行，线程切换时需要耗时。协程，则只使用一个线程，分解一个线程成为多个“微线程”，在一个线程中规定某个代码块的执行顺序。<br>协程的适用场景：当程序中存在大量不需要CPU的操作时（IO）。<br>常用第三方模块gevent和greenlet。（本质上，gevent是对greenlet的高级封装，因此一般用它就行，这是一个相当高效的模块。）</p>
<h1 id="何时使用多进程or多线程"><a href="#何时使用多进程or多线程" class="headerlink" title="何时使用多进程or多线程"></a>何时使用多进程or多线程<a href="#何时使用多进程or多线程" class="header-anchor">#</a></h1><p>使用多进程or线程,对于python，考虑到GIL锁，基本上<strong>默认使用多进程</strong>就对了。<br>除此之外，线程<strong>共享全局变量</strong>，进程<strong>全局变量则是隔离的</strong>，实际进程大多数情况需要通信的，所以也需要考虑共享数据读写问题处理。 决定因素稳定性和数据共享要求上（操作系统差异性，win偏好线程，linux偏好进程）<br>性能上虽然线程较好，但实际除了大型互联网公司和部分专业性质软件，大多数中小型公司的并发量，并不会带来很大影响，况且目前服务器领域，基本上LInux和Unix占比较高，线程相比进程在性能上优势并不十分突出。所以这方面考量不会太大的。</p>
<h2 id="线程是并发还是并行进程是并发还是并行"><a href="#线程是并发还是并行，进程是并发还是并行？" class="headerlink" title="线程是并发还是并行，进程是并发还是并行？"></a>线程是并发还是并行，进程是并发还是并行？<a href="#线程是并发还是并行进程是并发还是并行" class="header-anchor">#</a></h2><p><strong>线程是并发</strong>，<strong>进程是并行</strong>；<br>现代os都将<strong>线程作为最小调度单位</strong>，进程作为<strong>资源分配的最小单位</strong>。</p>
<h2 id="父子进程如何区分"><a href="#父子进程如何区分" class="headerlink" title="父子进程如何区分?"></a>父子进程如何区分?<a href="#父子进程如何区分" class="header-anchor">#</a></h2><p> 子进程是父进程通过fork()产生出来的，pid = os.fork()<br>​ 通过<strong>返回值pid是否为0</strong>，判断是否为子进程，如果是0，则表示是子进程<br>​ 由于 fork() 是 Linux 上的概念，所以如果要跨平台，最好还是使用 subprocess 模块来创建子进程。</p>
<h2 id="子进程如何回收"><a href="#子进程如何回收？" class="headerlink" title="子进程如何回收？"></a>子进程如何回收？<a href="#子进程如何回收" class="header-anchor">#</a></h2><p>python中采用os.wait()方法用来回收子进程占用的资源<br>pid, result = os.wait() # 回收子进程资源　阻塞，等待子进程执行完成回收<br>如果有子进程没有被回收的，但是父进程已经死掉了，这个子进程就是僵尸进程。孤儿进程,父类进程over.,子进程未结束</p>
<table>
<thead>
<tr>
<th align="left"></th>
<th align="left">Multi-args</th>
<th align="left">Concurrence</th>
<th align="left">Blocking</th>
<th>Ordered-results</th>
</tr>
</thead>
<tbody><tr>
<td align="left">map</td>
<td align="left">no</td>
<td align="left">yes</td>
<td align="left">yes</td>
<td>yes</td>
</tr>
<tr>
<td align="left">apply</td>
<td align="left">yes</td>
<td align="left">no</td>
<td align="left">yes</td>
<td>no</td>
</tr>
<tr>
<td align="left">map_async</td>
<td align="left">no</td>
<td align="left">yes</td>
<td align="left">no</td>
<td>yes</td>
</tr>
<tr>
<td align="left">apply_async</td>
<td align="left">yes</td>
<td align="left">yes</td>
<td align="left">no</td>
<td>no</td>
</tr>
</tbody></table>
<p>需要注意：map 和 map_async 入参为迭代器类型，可以批量调用。而apply和apply_async只能一个个调用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># map</span><br><span class="line">results = pool.map(worker, [1, 2, 3])</span><br><span class="line"></span><br><span class="line"># apply</span><br><span class="line">for x, y in [[1, 1], [2, 2]]:</span><br><span class="line">    results.append(pool.apply(worker, (x, y)))</span><br><span class="line"></span><br><span class="line">def collect_result(result):</span><br><span class="line">    results.append(result)</span><br><span class="line"></span><br><span class="line"># map_async</span><br><span class="line">pool.map_async(worker, jobs, callback=collect_result)</span><br><span class="line"></span><br><span class="line"># apply_async</span><br><span class="line">for x, y in [[1, 1], [2, 2]]:</span><br><span class="line">    pool.apply_async(worker, (x, y), callback=collect_result)</span><br></pre></td></tr></table></figure>



<h1 id="生产者消费者模式"><a href="#生产者消费者模式" class="headerlink" title="生产者消费者模式"></a>生产者消费者模式<a href="#生产者消费者模式" class="header-anchor">#</a></h1><p>这也是实际项目中使用较多的一种并发模式，用Queue(JoinableQueue)实现，是Python中最常用的方式(这里的queue特指multiprocess包下的queue，非queue.Queue)。</p>
<h2 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue<a href="#queue" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># encoding:utf-8</span><br><span class="line">__author__ = &#x27;Fioman&#x27;</span><br><span class="line">__time__ = &#x27;2019/3/7 14:06&#x27;</span><br><span class="line">from multiprocessing import Process,Queue</span><br><span class="line">import time,random</span><br><span class="line"></span><br><span class="line">def consumer(q,name):</span><br><span class="line">    while True:</span><br><span class="line">        food = q.get()</span><br><span class="line">        if food is None:</span><br><span class="line">            print(&#x27;接收到了一个空,生产者已经完事了&#x27;)</span><br><span class="line">            break</span><br><span class="line"></span><br><span class="line">        print(&#x27;\033[31m&#123;&#125;消费了&#123;&#125;\033[0m&#x27;.format(name,food))</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"></span><br><span class="line">def producer(name,food,q):</span><br><span class="line">    for i in range(10):</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line">        f = &#x27;&#123;&#125;生产了&#123;&#125;&#123;&#125;&#x27;.format(name,food,i)</span><br><span class="line">        print(f)</span><br><span class="line">        q.put(f)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    q = Queue(20)</span><br><span class="line">    p1 = Process(target=producer,args=(&#x27;fioman&#x27;,&#x27;包子&#x27;,q))</span><br><span class="line">    p2 = Process(target=producer,args=(&#x27;jingjing&#x27;,&#x27;馒头&#x27;,q))</span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line"></span><br><span class="line">    c1 = Process(target=consumer,args=(q,&#x27;mengmeng&#x27;))</span><br><span class="line">    c2 = Process(target=consumer,args=(q,&#x27;xiaoxiao&#x27;))</span><br><span class="line">    c1.start()</span><br><span class="line">    c2.start()</span><br><span class="line"></span><br><span class="line">    # 让主程序可以等待子进程的结束.</span><br><span class="line">    p1.join()</span><br><span class="line">    p2.join()</span><br><span class="line">    # 生产者的进程结束,这里需要放置两个空值,供消费者获取,用来判断已经没有存货了</span><br><span class="line">    q.put(None)</span><br><span class="line">    q.put(None)</span><br><span class="line"></span><br><span class="line">    print(&#x27;主程序结束..........&#x27;)</span><br></pre></td></tr></table></figure>

<h2 id="joinablequeue"><a href="#JoinableQueue" class="headerlink" title="JoinableQueue"></a>JoinableQueue<a href="#joinablequeue" class="header-anchor">#</a></h2><p>创建可连接的共享进程队列,它们也是队列,但是这些队列比较特殊.它们可以允许消费者通知生产者项目已经被成功处理.注意,这里必须是生产者生产完了,生产者的进程被挂起,等到消费者完全消费的时候,生产者进程就结束,然后主程序结束.将消费者进程设置为守护进程,这样的话,主进程结束的时候,消费进程也就结束了.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">q.task_done() </span><br><span class="line">使用者使用此方法发出信号，表示q.get()返回的项目已经被处理。如果调用此方法的次数大于从队列中删除的项目数量，将引发ValueError异常。</span><br><span class="line"></span><br><span class="line">q.join() </span><br><span class="line">生产者将使用此方法进行阻塞，直到队列中所有项目均被处理。阻塞将持续到为队列中的每个项目均调用q.task_done()方法为止。 </span><br><span class="line"># encoding:utf-8</span><br><span class="line">__author__ = &#x27;Fioman&#x27;</span><br><span class="line">__time__ = &#x27;2019/3/7 14:06&#x27;</span><br><span class="line">from multiprocessing import Process,JoinableQueue</span><br><span class="line">import time,random</span><br><span class="line"></span><br><span class="line">def consumer(q,name):</span><br><span class="line">    while True:</span><br><span class="line">        food = q.get()</span><br><span class="line">        if food is None:</span><br><span class="line">            print(&#x27;接收到了一个空,生产者已经完事了&#x27;)</span><br><span class="line">            break</span><br><span class="line"></span><br><span class="line">        print(&#x27;\033[31m&#123;&#125;消费了&#123;&#125;\033[0m&#x27;.format(name,food))</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line">        q.task_done()  # 向生产者发送信号,表示消费了一个</span><br><span class="line"></span><br><span class="line">def producer(name,food,q):</span><br><span class="line">    for i in range(10):</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line">        f = &#x27;&#123;&#125;生产了&#123;&#125;&#123;&#125;&#x27;.format(name,food,i)</span><br><span class="line">        print(f)</span><br><span class="line">        q.put(f)</span><br><span class="line">    q.join() # 当生产者生产完毕之后,会在这里阻塞.等待消费者的消费.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    q = JoinableQueue(20)</span><br><span class="line">    p1 = Process(target=producer,args=(&#x27;fioman&#x27;,&#x27;包子&#x27;,q))</span><br><span class="line">    p2 = Process(target=producer,args=(&#x27;jingjing&#x27;,&#x27;馒头&#x27;,q))</span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line"></span><br><span class="line">    c1 = Process(target=consumer,args=(q,&#x27;mengmeng&#x27;))</span><br><span class="line">    c2 = Process(target=consumer,args=(q,&#x27;xiaoxiao&#x27;))</span><br><span class="line">    c1.daemon = True # 将消费者设置为守护进程</span><br><span class="line">    c2.daemon = True # 将消费者设置为守护进程</span><br><span class="line">    c1.start()</span><br><span class="line">    c2.start()</span><br><span class="line"></span><br><span class="line">    # 让主程序可以等待生产子进程的结束.</span><br><span class="line">    p1.join()</span><br><span class="line">    p2.join()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    print(&#x27;主程序结束..........&#x27;)</span><br></pre></td></tr></table></figure>

<p>在消费者调用q.task_done()时，会触发一次q.join()的检查(q.join()是用来阻塞进程的，最后一个任务完成后，q.task_done()＝》q.join()＝》阻塞解除)，之后生产者进程退出。而消费者呢？业务逻辑层面上是没有退出的（本例）。比如，本例中通过<strong>设置为守护进程的方式进行退出</strong>。但如果后续主进程还有其他任务，而没有退出呢？那么这些子进程则沦为僵尸进程，虽然对系统资源消耗很少(消费者的queue.get()也是阻塞的，所以不会执行循环，仅仅会“卡”在那里，但也不会自动消亡)，但感觉非常别扭的。所以个人还是倾向于用”生产者queue.put(None) ,消费者见到None则break(退出循环)”的传统方式 进行消费者进程触发退出。如果采用这种方式那么JoinableQueue相比Queue就没有优势了。</p>
<p>假如有一种队列，内置了**状态信息(存活生产者个数)**，设置目前存活的生产者个数<br>StatusableQueue(product_n=2,size=20)　#product_n=2含义：存活的生产者个数,size=20,队列长度<br>生产者：生产结束，q.product_n - 1(存活生产者个数-1)<br>消费者：存活生产者个数=0(生产者均已经完成生成) 且 队列长度=0(队列也已经消费结束) 则退出消费者进程.<br>这种情况下，只需要　消费者.join()　就可以保证整个生产消费进程的执行结束(这一点和JoinableQueue很像，不过JoinableQueue是 生产者.join())<br>一共只改动3处，就可以完成生产者消费者的并行化控制。 而且更符合逻辑，因为生产者是明确知道自己的退出条件的，而消费者依赖生产者，所以只需要观察消费者就可以知道（生成者是否结束）整个－生成消费链是否完成。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">def consumer(q,name):</span><br><span class="line">    while not (q.product_n==0 and q.size==0):# 存活生产者=0，意味着全部结束生产，队列不会新增数据,queue.size=0说明消费完毕</span><br><span class="line">        food = q.get()</span><br><span class="line">        print(&#x27;\033[31m&#123;&#125;消费了&#123;&#125;\033[0m&#x27;.format(name,food))</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"></span><br><span class="line">def producer(name,food,q):</span><br><span class="line">    for i in range(10):</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line">        f = &#x27;&#123;&#125;生产了&#123;&#125;&#123;&#125;&#x27;.format(name,food,i)</span><br><span class="line">        print(f)</span><br><span class="line">        q.put(f)</span><br><span class="line">    q.product_n -= 1 # 当生产者生产完毕之后,q.product_n - 1(存活生产者个数-1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    q = StatusableQueue(product_n=2,size=20)#默认状态=正常,n=2含义：生产者个数,size=20,对列长度</span><br><span class="line">    p1 = Process(target=producer,args=(&#x27;fioman&#x27;,&#x27;包子&#x27;,q))</span><br><span class="line">    p2 = Process(target=producer,args=(&#x27;jingjing&#x27;,&#x27;馒头&#x27;,q))</span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line"></span><br><span class="line">    c1 = Process(target=consumer,args=(q,&#x27;mengmeng&#x27;))</span><br><span class="line">    c2 = Process(target=consumer,args=(q,&#x27;xiaoxiao&#x27;))</span><br><span class="line">    c1.start()</span><br><span class="line">    c2.start()</span><br><span class="line"></span><br><span class="line">    # 消费者消费结束（说明生产也一定结束了），则说明整个生产－消费逻辑完成</span><br><span class="line">    c1.join()</span><br><span class="line">    c2.join()</span><br></pre></td></tr></table></figure>

<p>缺点：<strong>必须知道生产者个数</strong>，这个数据应该不难获取，毕竟后面在创建生产者时也需要使用这个变量控制。</p>
<h1 id="并行化改造"><a href="#并行化改造" class="headerlink" title="并行化改造"></a>并行化改造<a href="#并行化改造" class="header-anchor">#</a></h1><p>图示变量含义说明:<br>1个大step中包含3个小step,大step内部的第一步，二步，三步存在依赖关系（就是内部保持顺序执行）<br>a1,b1,c1,表示子任务a的第一步，b的第一步，c的第一步.同理a2,表示子任务a的第二步。</p>
<h2 id="无并行"><a href="#无并行" class="headerlink" title="无并行"></a>无并行<a href="#无并行" class="header-anchor">#</a></h2><p><img src="python-%E8%BF%9B%E9%98%B6/image-20210824162124766.png" alt="image-20210824162124766"></p>
<h2 id="水平并行"><a href="#水平并行" class="headerlink" title="水平并行"></a>水平并行<a href="#水平并行" class="header-anchor">#</a></h2><p>优点：修改简单，容易排错<br>缺点：使用场景有限，适合批量数据，不适合流式数据<br>实现：pool().map(step1);pool().map(step2);pool().map(step3)</p>
<p><img src="python-%E8%BF%9B%E9%98%B6/image-20210824162204387.png" alt="image-20210824162204387"></p>
<h2 id="垂直并行"><a href="#垂直并行" class="headerlink" title="垂直并行"></a>垂直并行<a href="#垂直并行" class="header-anchor">#</a></h2><p>优点：修改简单，容易排错<br>缺点：如果中间步骤耗时过多，上游依然处于限制状态<br>实现：pool().apply_sync(func(step1,step2,step3))</p>
<p><img src="python-%E8%BF%9B%E9%98%B6/image-20210824162246391.png" alt="image-20210824162246391"></p>
<h2 id="生产者消费者"><a href="#生产者消费者" class="headerlink" title="生产者消费者"></a>生产者消费者<a href="#生产者消费者" class="header-anchor">#</a></h2><p>优点：上下游耦合小，任务粒度更细<br>缺点：改造稍微复杂，需考虑生产者生成结束等特殊情况的兼容，并且调试也较麻烦<br>实现：Queue(多进程multiprocessing,Queue,多线程queue.Queue,python大多多进程)</p>
<p><img src="python-%E8%BF%9B%E9%98%B6/image-20210824162411720.png" alt="image-20210824162411720"></p>
<h2 id="协程"><a href="#协程-1" class="headerlink" title="协程"></a>协程<a href="#协程" class="header-anchor">#</a></h2><p>协成可看做特殊单线程（意味着本质是单线程，多线程是表象），任务角度多个线程同时执行，实时角度看只有一个线程真正执行，好处是无需处理线程共享数据的加锁等情况（因为只有一个线程会执行，不存在同时修改的情况）。还有就是其<strong>进程内部不需要操作系统调度</strong>（进程整体肯定是操作系统调度，否则就凌驾与操作系统了），<strong>会自行调度</strong>，释放时间片给其他内部线程。<br>常规的线程一旦得到cpu时间片，会毫不犹豫执行，哪怕处于sleep状态也会占用资源。而协程则不会，其会把cpu主动出让(给自己其他线程)，等到别人”呼唤”自己时才会真正执行（比如next（自己）,gevent.sleep时间到了也算唤醒）。</p>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件<a href="#事件" class="header-anchor">#</a></h2><p>优点：如果可以不同事件自动并行化(不确定python是否已实现)，基本上生产者消费者所有优点都具备，并且，额外还有容易追溯，调试的好处.<br>缺点：程序架构需调整。改动最大.<br>实现：signal(python,django)<br>这个严格来说，并不属于并行范畴，但是将其放到这里，因为其和生产者消费者有共通之处，而且协程的实现底层也是基于事件模型。<br>生产者消费者存在很大问题，就是难以调试以及流程难以控制，由于切分粒度很细，并且不同步骤之间几乎独立，虽然可以保证整体的顺序执行以及最终任务可完成，但其上下游关系难以追溯，一旦出错也难以复现。所以个人很排斥生产者消费者这种方式。<br>而事件则不同，生产完成后将信息注册到事件链中，不但可以保存任务结束的result,还可以传递任务本身初始参数信息。每个事件都可以看做独立函数，即使某一个出错，也可以将事件参数作为debug锚点进行追踪。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def thread_multi():</span><br><span class="line">    threads = list()</span><br><span class="line">    for url in urls:</span><br><span class="line">        threads.append(threading.Thread(target=process, args=(url,)))</span><br><span class="line">    [t.start() for t in threads]</span><br><span class="line">    [t.join() for t in threads]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def thread_map():</span><br><span class="line">    pool = ThreadPool(max(1, cpu_count() - 1))</span><br><span class="line">    results = pool.map(process, urls)</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    print(results)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def thread_async():</span><br><span class="line">    pool = ThreadPool(max(1, cpu_count() - 1))</span><br><span class="line">    results = list()</span><br><span class="line">    for url in urls:</span><br><span class="line">        results.append(pool.apply_async(process, args=(url,)))</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    print([result.get() for result in results])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def process_multi():</span><br><span class="line">    processes = list()</span><br><span class="line">    for url in urls:</span><br><span class="line">        processes.append(Process(target=process, args=(url,)))</span><br><span class="line">    [t.start() for t in processes]</span><br><span class="line">    [t.join() for t in processes]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def process_map():</span><br><span class="line">    pool = Pool(processes=max(1, cpu_count() - 1))</span><br><span class="line">    results = pool.map(process, urls)</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    print(results)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def process_async():</span><br><span class="line">    pool = Pool(processes=max(1, cpu_count() - 1))</span><br><span class="line">    results = list()</span><br><span class="line">    for url in urls:</span><br><span class="line">        results.append(pool.apply_async(process, (url,)))</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    print([result.get() for result in results])</span><br></pre></td></tr></table></figure>



<h1 id="多线程与数据同步"><a href="#多线程与数据同步" class="headerlink" title="多线程与数据同步"></a>多线程与数据同步<a href="#多线程与数据同步" class="header-anchor">#</a></h1><p>python并发<strong>首选进程</strong>，但偶尔有场景进程无法搞定，比如有些<strong>变量是无法序列化的</strong>，就无法使用工具包<strong>manager()的工具类进行共享</strong>。如果自己实现新的共享方法，可能开发量较大，且质量难以保证。此时可考虑用线程处理，规避进程的变量共享难题，而且实际场景中,<strong>IO大概率都是瓶颈</strong>，所以使用线程其实也的确有些优势。个人而言，选择进程和线程较为重视的<strong>安全性</strong>，进程数据隔离较好，互不干扰。其次就是<strong>公用数据占比</strong>，如果大多数数据都需公用，那么线程也会比进程更佳，避免了进程较多的数据共享问题。</p>
<h3 id="线程本身就有局部变量为何还需要threadlocal"><a href="#线程本身就有局部变量，为何还需要ThreadLocal" class="headerlink" title="线程本身就有局部变量，为何还需要ThreadLocal"></a>线程本身就有局部变量，为何还需要ThreadLocal<a href="#线程本身就有局部变量为何还需要threadlocal" class="header-anchor">#</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line"> </span><br><span class="line"># 创建全局ThreadLocal对象:</span><br><span class="line">local_school = threading.local()</span><br><span class="line"> </span><br><span class="line">def process_student():</span><br><span class="line">  print &#x27;Hello, %s (in %s)&#x27; % (local_school.student, threading.current_thread().name)</span><br><span class="line"> </span><br><span class="line">def process_thread(name):</span><br><span class="line">  # 绑定ThreadLocal的student:</span><br><span class="line">  local_school.student = name</span><br><span class="line">  process_student()</span><br><span class="line"> </span><br><span class="line">t1 = threading.Thread(target= process_thread, args=(&#x27;Alice&#x27;,), name=&#x27;Thread-A&#x27;)</span><br><span class="line">t2 = threading.Thread(target= process_thread, args=(&#x27;Bob&#x27;,), name=&#x27;Thread-B&#x27;)</span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line">t1.join()</span><br><span class="line">t2.join()</span><br></pre></td></tr></table></figure>





<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料<a href="#参考资料" class="header-anchor">#</a></h1><p><a href="https://hexo.yuanjh.cn/hexo/16e1d5a">偏函数</a></p>
<p><a href="https://hexo.yuanjh.cn/hexo/549f56e4">并发</a></p>
<p><a href="https://hexo.yuanjh.cn/page/5/">闻鸡起舞 </a></p>
<p><a href="http://luly.lamost.org/blog/python_multiprocessing.html">python多进程pickle</a></p>
<p><a href="https://www.jianshu.com/p/2d3e6a21f6fe">Python生产者消费者模型 </a></p>
]]></content>
  </entry>
  <entry>
    <title>threading</title>
    <url>/article/threading/</url>
    <content><![CDATA[<h1 id="python-多线程实现"><a href="#python-多线程实现" class="headerlink" title="python 多线程实现"></a>python 多线程实现<a href="#python-多线程实现" class="header-anchor">#</a></h1><p>首先，python的多线程是假的。</p>
<p>看一个例子来看看python多线程的实现。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def say(name):</span><br><span class="line">        print(&#x27;你好%s at %s&#x27; %(name,time.ctime()))</span><br><span class="line">        time.sleep(2)</span><br><span class="line">        print(&quot;结束%s at %s&quot; %(name,time.ctime()))</span><br><span class="line"></span><br><span class="line">def listen(name):</span><br><span class="line">    print(&#x27;你好%s at %s&#x27; % (name,time.ctime()))</span><br><span class="line">    time.sleep(4)</span><br><span class="line">    print(&quot;结束%s at %s&quot; % (name,time.ctime()))</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    t1 = threading.Thread(target=say,args=(&#x27;tony&#x27;,))  #创建线程对象，Thread是一个类，实例化产生t1对象，这里就是创建了一个线程对象t1</span><br><span class="line">    t1.start() #启动线程，线程执行</span><br><span class="line">    t2 = threading.Thread(target=listen, args=(&#x27;simon&#x27;,)) #这里就是创建了一个线程对象t2</span><br><span class="line">    t2.start()</span><br><span class="line"></span><br><span class="line">    print(&quot;程序结束=====================&quot;)</span><br><span class="line"># 输出结果为</span><br><span class="line">你好tony at Fri Aug 20 15:42:07 2021 --t1线程执行</span><br><span class="line">你好simon at Fri Aug 20 15:42:07 2021 --t2线程执行</span><br><span class="line">程序结束===================== --主线程执行</span><br><span class="line">结束tony at Fri Aug 20 15:42:09 2021 --sleep之后，t1线程执行</span><br><span class="line">结束simon at Fri Aug 20 15:42:11 2021 --sleep之后，t2线程执行</span><br></pre></td></tr></table></figure>

<p>我们可以看到主线程的print并不是等t1,t2线程都执行完毕之后才打印的，这是因为主线程和t1,t2 线程是同时跑的。但是主进程要等非守护子线程结束之后，主线程才会退出。</p>
<span id="more"></span>

<p>上面其实就是python多线程的最简单用法，但是，一般开发中，我们需要主线程的print打印是在最后面的，表明所有流程都结束了，也就是主线程结束了。这里就引入了一个join的概念。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def say(name):</span><br><span class="line">        print(&#x27;你好%s at %s&#x27; %(name,time.ctime()))</span><br><span class="line">        time.sleep(2)</span><br><span class="line">        print(&quot;结束%s at %s&quot; %(name,time.ctime()))</span><br><span class="line"></span><br><span class="line">def listen(name):</span><br><span class="line">    print(&#x27;你好%s at %s&#x27; % (name,time.ctime()))</span><br><span class="line">    time.sleep(4)</span><br><span class="line">    print(&quot;结束%s at %s&quot; % (name,time.ctime()))</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    t1 = threading.Thread(target=say,args=(&#x27;tony&#x27;,))  #Thread是一个类，实例化产生t1对象，这里就是创建了一个线程对象t1</span><br><span class="line">    t1.start() #线程执行</span><br><span class="line">    t2 = threading.Thread(target=listen, args=(&#x27;simon&#x27;,)) #这里就是创建了一个线程对象t2</span><br><span class="line">    t2.start()</span><br><span class="line"></span><br><span class="line">    t1.join() #join等t1子线程结束，主线程打印并且结束</span><br><span class="line">    t2.join() #join等t2子线程结束，主线程打印并且结束</span><br><span class="line">    print(&quot;程序结束=====================&quot;)</span><br><span class="line">#输出</span><br><span class="line">你好tony at Fri Aug 20 15:49:01 2021</span><br><span class="line">你好simon at Fri Aug 20 15:49:01 2021</span><br><span class="line">结束tony at Fri Aug 20 15:49:03 2021</span><br><span class="line">结束simon at Fri Aug 20 15:49:05 2021</span><br><span class="line">程序结束=====================</span><br></pre></td></tr></table></figure>

<p>上面代码中加入join方法后实现了，我们上面所想要的结果，主线程print最后执行，并且主线程退出，注意主线程执行了打印操作和主线程结束不是一个概念，如果子线程不加join，则主线程也会执行打印，但是主线程不会结束，还是需要待非守护子线程结束之后，主线程才结束。</p>
<p>上面的情况，主进程都需要等待非守护子线程结束之后，主线程才结束。那我们是不是注意到一点，我说的是“非守护子线程”，那什么是非守护子线程？默认的子线程都是主线程的非守护子线程，但是有时候我们有需求，当主进程结束，不管子线程有没有结束，子线程都要跟随主线程一起退出，这时候我们引入一个“守护线程”的概念。</p>
<p>如果某个子线程设置为守护线程，主线程其实就不用管这个子线程了，当所有其他非守护线程结束，主线程就会退出，而守护线程将和主线程一起退出，守护主线程，这就是守护线程的意思</p>
<ol>
<li><p>设置t1线程为守护线程，看看执行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def say(name):</span><br><span class="line">        print(&#x27;你好%s at %s&#x27; %(name,time.ctime()))</span><br><span class="line">        time.sleep(2)</span><br><span class="line">        print(&quot;结束%s at %s&quot; %(name,time.ctime()))</span><br><span class="line"></span><br><span class="line">def listen(name):</span><br><span class="line">    print(&#x27;你好%s at %s&#x27; % (name,time.ctime()))</span><br><span class="line">    time.sleep(4)</span><br><span class="line">    print(&quot;结束%s at %s&quot; % (name,time.ctime()))</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    t1 = threading.Thread(target=say,args=(&#x27;tony&#x27;,))  #Thread是一个类，实例化产生t1对象，这里就是创建了一个线程对象t1</span><br><span class="line">    t1.setDaemon(True)</span><br><span class="line">    t1.start() #线程执行</span><br><span class="line">    t2 = threading.Thread(target=listen, args=(&#x27;simon&#x27;,)) #这里就是创建了一个线程对象t2</span><br><span class="line">    t2.start()</span><br><span class="line"></span><br><span class="line">    print(&quot;程序结束=====================&quot;)</span><br><span class="line">#输出</span><br><span class="line">你好tony at Fri Aug 20 15:59:52 2021</span><br><span class="line">你好simon at Fri Aug 20 15:59:52 2021程序结束=====================</span><br><span class="line"></span><br><span class="line">结束tony at Fri Aug 20 15:59:54 2021</span><br><span class="line">结束simon at Fri Aug 20 15:59:56 2021</span><br></pre></td></tr></table></figure></li>
<li><p>设置t2线程为守护线程，看看执行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def say(name):</span><br><span class="line">        print(&#x27;你好%s at %s&#x27; %(name,time.ctime()))</span><br><span class="line">        time.sleep(2)</span><br><span class="line">        print(&quot;结束%s at %s&quot; %(name,time.ctime()))</span><br><span class="line"></span><br><span class="line">def listen(name):</span><br><span class="line">    print(&#x27;你好%s at %s&#x27; % (name,time.ctime()))</span><br><span class="line">    time.sleep(4)</span><br><span class="line">    print(&quot;结束%s at %s&quot; % (name,time.ctime()))</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    t1 = threading.Thread(target=say,args=(&#x27;tony&#x27;,))  #Thread是一个类，实例化产生t1对象，这里就是创建了一个线程对象t1</span><br><span class="line">    </span><br><span class="line">    t1.start() #线程执行</span><br><span class="line">    t2 = threading.Thread(target=listen, args=(&#x27;simon&#x27;,)) #这里就是创建了一个线程对象t2</span><br><span class="line">    t2.setDaemon(True)</span><br><span class="line">    t2.start()</span><br><span class="line"></span><br><span class="line">    print(&quot;程序结束=====================&quot;)</span><br><span class="line">#输出</span><br><span class="line">你好tony at Fri Aug 20 16:02:19 2021</span><br><span class="line">你好simon at Fri Aug 20 16:02:19 2021程序结束=====================</span><br><span class="line"></span><br><span class="line">结束tony at Fri Aug 20 16:02:21 2021</span><br></pre></td></tr></table></figure></li>
</ol>
<p>不知道大家有没有弄清楚上面python多线程的实现方式以及join,守护线程的用法。</p>
<p>多线程的实现方法：</p>
<ol>
<li><p>直接创建子进程</p>
<p>首先可以使用 Thread 类来创建一个线程，创建时需要指定 target 参数为运行的方法名称，如果被调用的方法需要传入额外的参数，则可以通过 Thread 的 args 参数来指定。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line">def target(second):</span><br><span class="line">    print(f&#x27;Threading &#123;threading.current_thread().name&#125; is running&#x27;)</span><br><span class="line">    print(f&#x27;Threading &#123;threading.current_thread().name&#125; sleep &#123;second&#125;s&#x27;)</span><br><span class="line">    time.sleep(second)</span><br><span class="line">    print(f&#x27;Threading &#123;threading.current_thread().name&#125; is ended&#x27;)</span><br><span class="line">print(f&#x27;Threading &#123;threading.current_thread().name&#125; is running&#x27;)</span><br><span class="line">for i in [1, 5]:</span><br><span class="line">    thread = threading.Thread(target=target, args=[i])</span><br><span class="line">    thread.start()</span><br></pre></td></tr></table></figure></li>
<li><p>继承Thread类创建子进程</p>
<p>通过继承 Thread 类的方式创建一个线程，该线程需要执行的方法写在类的 run 方法里面即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line">class MyThread(threading.Thread):</span><br><span class="line">    def __init__(self, second):</span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.second = second</span><br><span class="line">    </span><br><span class="line">    def run(self):</span><br><span class="line">        print(f&#x27;Threading &#123;threading.current_thread().name&#125; is running&#x27;)</span><br><span class="line">        print(f&#x27;Threading &#123;threading.current_thread().name&#125; sleep &#123;self.second&#125;s&#x27;)</span><br><span class="line">        time.sleep(self.second)</span><br><span class="line">        print(f&#x27;Threading &#123;threading.current_thread().name&#125; is ended&#x27;)</span><br><span class="line">print(f&#x27;Threading &#123;threading.current_thread().name&#125; is running&#x27;)</span><br><span class="line">threads = []</span><br><span class="line">for i in [1, 5]:</span><br><span class="line">    thread = MyThread(i)</span><br><span class="line">    threads.append(thread)</span><br><span class="line">    thread.start()</span><br></pre></td></tr></table></figure></li>
</ol>
<p>主要方法：</p>
<p>join()：在子线程完成运行之前，这个子线程的父线程将一直被阻塞。</p>
<p>setDaemon(True)：</p>
<p>将线程声明为守护线程，必须在start() 方法调用之前设置， 如果不设置为守护线程程序会被无限挂起。这个方法基本和join是相反的。</p>
<p>当我们在程序运行中，执行一个主线程，如果主线程又创建一个子线程，主线程和子线程 就分兵两路，分别运行，那么当主线程完成</p>
<p>想退出时，会检验子线程是否完成。如 果子线程未完成，则主线程会等待子线程完成后再退出。但是有时候我们需要的是 只要主线程完成了，不管子线程是否完成，都要和主线程一起退出，这时就可以 用setDaemon方法啦。</p>
<p>其他方法：</p>
<p>run(): 线程被cpu调度后自动执行线程对象的run方法<br>start():启动线程活动。<br>isAlive(): 返回线程是否活动的。<br>getName(): 返回线程名。<br>setName(): 设置线程名。</p>
<p>threading模块提供的一些方法：<br>threading.currentThread(): 返回当前的线程变量。<br>threading.enumerate(): 返回一个包含正在运行的线程的list。正在运行指线程启动后、结束前，不包括启动前和终止后的线程。<br>threading.activeCount():返回正在运行的线程数量，与len(threading.enumerate())有相同的结果。</p>
<p>上面的例子中我们注意到两如果个任务如果顺序执行要6s结束，如果是多线程执行4S结束，性能是有所提升的，但是我们要知道这里的性能提升实际上是由于cpu并发实现性能提升，也就是cpu线程切换（多道技术）带来的，而并不是真正的多cpu并行执行。</p>
<p>上面提到了并行和并发，那这两者有什么区别呢？</p>
<p>并发：是指一个系统具有处理多个任务的能力（cpu切换，多道技术）<br>并行：是指一个系统具有同时处理多个任务的能力（cpu同时处理多个任务）<br>并行是并发的一种情况，子集</p>
<h1 id="python同步锁"><a href="#python同步锁" class="headerlink" title="python同步锁"></a>python同步锁<a href="#python同步锁" class="header-anchor">#</a></h1><p>锁通常被用来实现对共享资源的同步访问。为每一个共享资源创建一个Lock对象，当你需要访问该资源时，调用acquire方法来获取锁对象（如果其它线程已经获得了该锁，则当前线程需等待其被释放），待资源访问完后，再调用release方法释放锁。</p>
<p> 当没有同步锁时：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">num = 100</span><br><span class="line"></span><br><span class="line">def fun_sub():</span><br><span class="line">    global num</span><br><span class="line">    # num -= 1</span><br><span class="line">    num2 = num</span><br><span class="line">    time.sleep(0.001)</span><br><span class="line">    num = num2-1</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    print(&#x27;开始测试同步锁 at %s&#x27; % time.ctime())</span><br><span class="line"></span><br><span class="line">    thread_list = []</span><br><span class="line">    for thread in range(100):</span><br><span class="line">        t = threading.Thread(target=fun_sub)</span><br><span class="line">        t.start()</span><br><span class="line">        thread_list.append(t)</span><br><span class="line"></span><br><span class="line">    for t in thread_list:</span><br><span class="line">        t.join()</span><br><span class="line">    print(&#x27;num is %d&#x27; % num)</span><br><span class="line">    print(&#x27;结束测试同步锁 at %s&#x27; % time.ctime())</span><br><span class="line"># 输出</span><br><span class="line">开始测试同步锁 at Fri Aug 20 17:45:40 2021</span><br><span class="line">num is 98</span><br><span class="line">结束测试同步锁 at Fri Aug 20 17:45:40 2021</span><br></pre></td></tr></table></figure>

<p>上面的例子其实很简单就是创建100的线程，然后每个线程去从公共资源num变量去执行减1操作，按照正常情况下面，等到代码执行结束，打印num变量，应该得到的是0，因为100个线程都去执行了一次减1的操作。但我们会发现，每次执行的结果num值都不是一样的。</p>
<p>我们来看看上面代码的执行流程。<br>1.因为GIL，只有一个线程（假设线程1）拿到了num这个资源，然后把变量赋值给num2,sleep 0.001秒，这时候num=100<br>2.当第一个线程sleep 0.001秒这个期间，这个线程会做yield操作，就是把cpu切换给别的线程执行（假设线程2拿到个GIL，获得cpu使用权），线程2也和线程1一样也拿到num,返回赋值给num2，然sleep,这时候，其实num还是=100.<br>3.线程2 sleep时候，又要yield操作，假设线程3拿到num,执行上面的操作，其实num有可能还是100<br>4.等到后面cpu重新切换给线程1，线程2，线程3上执行的时候，他们执行减1操作后，其实等到的num其实都是99，而不是顺序递减的。<br>5.其他剩余的线程操作如上</p>
<p>加上锁后：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">num = 100</span><br><span class="line"></span><br><span class="line">def fun_sub():</span><br><span class="line">    global num</span><br><span class="line">    lock.acquire()</span><br><span class="line">    print(&#x27;----加锁----&#x27;)</span><br><span class="line">    print(&#x27;现在操作共享资源的线程名字是:&#x27;,t.name)</span><br><span class="line">    num2 = num</span><br><span class="line">    time.sleep(0.001)</span><br><span class="line">    num = num2-1</span><br><span class="line">    lock.release()</span><br><span class="line">    print(&#x27;----释放锁----&#x27;)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    print(&#x27;开始测试同步锁 at %s&#x27; % time.ctime())</span><br><span class="line"></span><br><span class="line">    lock = threading.Lock() #创建一把同步锁</span><br><span class="line"></span><br><span class="line">    thread_list = []</span><br><span class="line">    for thread in range(100):</span><br><span class="line">        t = threading.Thread(target=fun_sub)</span><br><span class="line">        t.start()</span><br><span class="line">        thread_list.append(t)</span><br><span class="line"></span><br><span class="line">    for t in thread_list:</span><br><span class="line">        t.join()</span><br><span class="line">    print(&#x27;num is %d&#x27; % num)</span><br><span class="line">    print(&#x27;结束测试同步锁 at %s&#x27; % time.ctime())</span><br></pre></td></tr></table></figure>



<h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁<a href="#死锁" class="header-anchor">#</a></h2><p>死锁的这个概念在很多地方都存在，比较在数据中，大概介绍下私有是怎么产生的</p>
<ol>
<li>A拿了一个苹果</li>
<li>B拿了一个香蕉</li>
<li>A现在想再拿个香蕉，就在等待B释放这个香蕉</li>
<li>B同时想要再拿个苹果，这时候就等待A释放苹果</li>
<li>这样就是陷入了僵局，这就是生活中的死锁</li>
</ol>
<p>python中在线程间共享多个资源的时候，如果两个线程分别占有一部分资源并且同时等待对方的资源，就会造成死锁，因为系统判断这部分资源都正在使用，所有这两个线程在无外力作用下将一直等待下去。下面是一个死锁的例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">lock_apple = threading.Lock()</span><br><span class="line">lock_banana = threading.Lock()</span><br><span class="line"></span><br><span class="line">class MyThread(threading.Thread):</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        self.fun1()</span><br><span class="line">        self.fun2()</span><br><span class="line"></span><br><span class="line">    def fun1(self):</span><br><span class="line"></span><br><span class="line">        lock_apple.acquire()  # 如果锁被占用,则阻塞在这里,等待锁的释放</span><br><span class="line"></span><br><span class="line">        print (&quot;线程 %s , 想拿: %s--%s&quot; %(self.name, &quot;苹果&quot;,time.ctime()))</span><br><span class="line"></span><br><span class="line">        lock_banana.acquire()</span><br><span class="line">        print (&quot;线程 %s , 想拿: %s--%s&quot; %(self.name, &quot;香蕉&quot;,time.ctime()))</span><br><span class="line">        lock_banana.release()</span><br><span class="line">        lock_apple.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def fun2(self):</span><br><span class="line"></span><br><span class="line">        lock_banana.acquire()</span><br><span class="line">        print (&quot;线程 %s , 想拿: %s--%s&quot; %(self.name, &quot;香蕉&quot;,time.ctime()))</span><br><span class="line">        time.sleep(0.1)</span><br><span class="line"></span><br><span class="line">        lock_apple.acquire()</span><br><span class="line">        print (&quot;线程 %s , 想拿: %s--%s&quot; %(self.name, &quot;苹果&quot;,time.ctime()))</span><br><span class="line">        lock_apple.release()</span><br><span class="line"></span><br><span class="line">        lock_banana.release()</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    for i in range(0, 10):  #建立10个线程</span><br><span class="line">        my_thread = MyThread()  #类继承法是python多线程的另外一种实现方式</span><br><span class="line">        my_thread.start()</span><br></pre></td></tr></table></figure>

<p>上面的代码其实就是描述了苹果和香蕉的故事。大家可以仔细看看过程。下面我们看看执行流程</p>
<p>1.fun1中，线程1先拿了苹果，然后拿了香蕉，然后释放香蕉和苹果，然后再在fun2中又拿了香蕉，sleep 0.1秒。<br>2.在线程1的执行过程中，线程2进入了，因为苹果被线程1释放了，线程2这时候获得了苹果，然后想拿香蕉<br>3.这时候就出现问题了，线程一拿完香蕉之后想拿苹果，返现苹果被线程2拿到了，线程2拿到苹果执行，想拿香蕉，发现香蕉被线程1持有了<br>4.双向等待，出现死锁，代码执行不下去了</p>
<h2 id="python递归锁rlock"><a href="#Python递归锁RLock" class="headerlink" title="Python递归锁RLock"></a>Python递归锁RLock<a href="#python递归锁rlock" class="header-anchor">#</a></h2><p>为了支持在同一线程中多次请求同一资源，python提供了”递归锁”：threading.RLock。RLock内部维护着一个Lock和一个counter变量，counter记录了acquire的次数，从而使得资源可以被多次acquire。直到一个线程所有的acquire都被release，其他的线程才能获得资源。</p>
<p>下面我们用递归锁RLock解决上面的死锁问题:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">lock = threading.RLock()  #递归锁</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class MyThread(threading.Thread):</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        self.fun1()</span><br><span class="line">        self.fun2()</span><br><span class="line"></span><br><span class="line">    def fun1(self):</span><br><span class="line"></span><br><span class="line">        lock.acquire()  # 如果锁被占用,则阻塞在这里,等待锁的释放</span><br><span class="line"></span><br><span class="line">        print (&quot;线程 %s , 想拿: %s--%s&quot; %(self.name, &quot;苹果&quot;,time.ctime()))</span><br><span class="line"></span><br><span class="line">        lock.acquire()</span><br><span class="line">        print (&quot;线程 %s , 想拿: %s--%s&quot; %(self.name, &quot;香蕉&quot;,time.ctime()))</span><br><span class="line">        lock.release()</span><br><span class="line">        lock.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def fun2(self):</span><br><span class="line"></span><br><span class="line">        lock.acquire()</span><br><span class="line">        print (&quot;线程 %s , 想拿: %s--%s&quot; %(self.name, &quot;香蕉&quot;,time.ctime()))</span><br><span class="line">        time.sleep(0.1)</span><br><span class="line"></span><br><span class="line">        lock.acquire()</span><br><span class="line">        print (&quot;线程 %s , 想拿: %s--%s&quot; %(self.name, &quot;苹果&quot;,time.ctime()))</span><br><span class="line">        lock.release()</span><br><span class="line"></span><br><span class="line">        lock.release()</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    for i in range(0, 10):  #建立10个线程</span><br><span class="line">        my_thread = MyThread()  #类继承法是python多线程的另外一种实现方式</span><br><span class="line">        my_thread.start()</span><br></pre></td></tr></table></figure>

<p>上面我们用一把递归锁，就解决了多个同步锁导致的死锁问题。大家可以把RLock理解为大锁中还有小锁，只有等到内部所有的小锁，都没有了，其他的线程才能进入这个公共资源。</p>
<p>另外一点前面没有就算用类继承的方法实现python多线程，这个大家可以查下，就算继承Thread类，然后重新run方法来实现。</p>
<h1 id="同步条件"><a href="#同步条件" class="headerlink" title="同步条件"></a>同步条件<a href="#同步条件" class="header-anchor">#</a></h1><p>先说说为什么我们需要这个同步条件，我们的python多线程在执行task过程中，是相互竞争的，大家都可以先获取cpu的执行权限，这就是问题所在的地方，每个线程都是独立运行且状态不可预测，但是我们想想如果我们的业务中需要根据情况来决定线程的执行顺序，也就是程序中的其他线程需要通过判断某个线程的状态来确定自己下一步的操作，这时候我们就需要使用threading库中的Event对象。 对象包含一个可由线程设置的信号标志,它允许线程等待某些事件的发生。</p>
<p>在 初始情况下,Event对象中的信号标志被设置为假，如果有线程等待一个Event对象, ,那么这个线程将会被一直阻塞直至该标志为真。</p>
<p>一个线程如果将一个Event对象的信号标志设置为真,它将唤醒所有等待这个Event对象的线程继续执行。</p>
<p>Event的方法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">event.isSet()：返回event的状态值</span><br><span class="line">event.wait()：如果 event.isSet()==False，将阻塞线程触发event.wait()</span><br><span class="line">event.set()： 设置event的状态值为True，所有阻塞池的线程激活进入就绪状态， 等待执行</span><br><span class="line">event.clear()：恢复event的状态值为False</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">class Teacher(threading.Thread):</span><br><span class="line">    def run(self):</span><br><span class="line">        print(&quot;大家现在要考试&quot;)</span><br><span class="line">        print(event.isSet())</span><br><span class="line">        event.set()</span><br><span class="line">        time.sleep(3)</span><br><span class="line">        print(&quot;考试结束&quot;)</span><br><span class="line">        print(event.isSet())</span><br><span class="line">        event.set()</span><br><span class="line">class Student(threading.Thread):</span><br><span class="line">    def run(self):</span><br><span class="line">        event.wait()</span><br><span class="line">        print(&quot;啊啊啊啊啊啊&quot;)</span><br><span class="line">        time.sleep(1)</span><br><span class="line">        event.clear()</span><br><span class="line">        event.wait()</span><br><span class="line">        print(&quot;下课回家&quot;)</span><br><span class="line"></span><br><span class="line">if __name__==&quot;__main__&quot;:</span><br><span class="line">    event=threading.Event()</span><br><span class="line">    threads=[]</span><br><span class="line">    for i in range(10):</span><br><span class="line">        threads.append(Student())</span><br><span class="line">    threads.append(Teacher())</span><br><span class="line">    for t in threads:</span><br><span class="line">        t.start()</span><br><span class="line">    for t in threads:</span><br><span class="line">        t.join()</span><br></pre></td></tr></table></figure>



<p>上述代码流程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.模拟1个老师和10个学生，进行考试，我们需要的目的是学生线程要等待老师线程说完“大家现在考试”，然后学生线程去考试，之后老师线程说“考试结束”，学生线程放学回家，学生线程的执行与否取决于老师线程，所以这里用的Event</span><br><span class="line">2.学生线程开始event.wait()，这个说明如果event如果一直不设置的话，学生线程就一直等待，等待一个event.set()操作</span><br><span class="line">3.老师线程说完&quot;大家现在要考试&quot;，然后event.set()，执行event,设置完执行，学生线程就能够被唤醒继续执行下面的操作发出&quot;啊啊啊啊啊啊&quot;的叫苦连天</span><br><span class="line">4.学生线程进行考试，并且执行event.clear()，清除event，因为他们在等老师说“考试结束”，之后他们在等老师线程的event.set()</span><br><span class="line">5.老师线程执行event.set()，唤醒学生线程，然后下课回家.</span><br></pre></td></tr></table></figure>



<h2 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量<a href="#信号量" class="header-anchor">#</a></h2><p>信号量用来控制线程并发数的，Semaphore管理一个内置的计数 器，每当调用acquire()时-1，调用release()时+1。计数器不能小于0，当计数器为 0时，acquire()将阻塞线程至同步锁定状态，直到其他线程调用release()。其实就是控制最多几个线程可以操作同享资源。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">semaphore = threading.Semaphore(5)</span><br><span class="line"></span><br><span class="line">def func():</span><br><span class="line">    if semaphore.acquire():</span><br><span class="line">        print (threading.currentThread().getName() + &#x27;获取共享资源&#x27;)</span><br><span class="line">        time.sleep(2)</span><br><span class="line">        semaphore.release()</span><br><span class="line"></span><br><span class="line">for i in range(10)</span><br><span class="line">  t1 = threading.Thread(target=func)</span><br><span class="line">  t1.start()</span><br></pre></td></tr></table></figure>

<p>上面一个简单的例子就是创建10个线程，让每次只让5个线程去执行func函数。</p>
<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列<a href="#队列" class="header-anchor">#</a></h2><p>Queue是python标准库中的线程安全的队列实现,提供了一个适用于多线程编程的先进先出的数据结构，即队列，用来在生产者和消费者线程之间的信息传递</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading,time</span><br><span class="line"></span><br><span class="line">m=[1,2,3,4,5]</span><br><span class="line">print(m[-1])</span><br><span class="line"></span><br><span class="line">def remove_last():</span><br><span class="line">    a=m[-1]</span><br><span class="line">    time.sleep(1)</span><br><span class="line">    m.remove(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t1=threading.Thread(target=remove_last)</span><br><span class="line">t1.start()</span><br><span class="line"></span><br><span class="line">t2=threading.Thread(target=remove_last)</span><br><span class="line">t2.start()</span><br><span class="line">## list 不是线程安全会报错</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">创建一个“队列”对象</span><br><span class="line">import Queue</span><br><span class="line">q = Queue.Queue(maxsize = 10)</span><br><span class="line">Queue.Queue类即是一个队列的同步实现。队列长度可为无限或者有限。可通过Queue的构造函数的可选参数maxsize来设定队列长度。如果maxsize小于1就表示队列长度无限。</span><br><span class="line"></span><br><span class="line">将一个值放入队列中</span><br><span class="line">q.put(10)</span><br><span class="line">调用队列对象的put()方法在队尾插入一个项目。put()有两个参数，第一个item为必需的，为插入项目的值；第二个block为可选参数，默认为</span><br><span class="line">1。如果队列当前为空且block为1，put()方法就使调用线程暂停,直到空出一个数据单元。如果block为0，put方法将引发Full异常。</span><br><span class="line"></span><br><span class="line">将一个值从队列中取出</span><br><span class="line">q.get()</span><br><span class="line">调用队列对象的get()方法从队头删除并返回一个项目。可选参数为block，默认为True。如果队列为空且block为True，</span><br><span class="line">get()就使调用线程暂停，直至有项目可用。如果队列为空且block为False，队列将引发Empty异常。</span><br><span class="line"></span><br><span class="line">Python Queue模块有三种队列及构造函数:</span><br><span class="line">1、Python Queue模块的FIFO队列先进先出。   class queue.Queue(maxsize)</span><br><span class="line">2、LIFO类似于堆，即先进后出。               class queue.LifoQueue(maxsize)</span><br><span class="line">3、还有一种是优先级队列级别越低越先出来。        class queue.PriorityQueue(maxsize)</span><br><span class="line"></span><br><span class="line">此包中的常用方法(q = Queue.Queue()):</span><br><span class="line">q.qsize() 返回队列的大小</span><br><span class="line">q.empty() 如果队列为空，返回True,反之False</span><br><span class="line">q.full() 如果队列满了，返回True,反之False</span><br><span class="line">q.full 与 maxsize 大小对应</span><br><span class="line">q.get([block[, timeout]]) 获取队列，timeout等待时间</span><br><span class="line">q.get_nowait() 相当q.get(False)</span><br><span class="line">非阻塞 q.put(item) 写入队列，timeout等待时间</span><br><span class="line">q.put_nowait(item) 相当q.put(item, False)</span><br><span class="line">q.task_done() 在完成一项工作之后，q.task_done() 函数向任务已经完成的队列发送一个信号</span><br><span class="line">q.join() 实际上意味着等到队列为空，再执行别的操作</span><br></pre></td></tr></table></figure>

<p>队列(queue)一般会被用在生产者和消费者模型上。</p>
<p>生产者消费者模型：</p>
<p>为什么要使用生产者和消费者模式</p>
<p>在python线程中，生产者就是生产数据的线程，消费者就是消费数据的线程。在多线程开发当中，如果生产者处理速度很快，而消费者处理速度很慢，那么生产者就必须等待消费者处理完，才能继续生产数据。同样的道理，如果消费者的处理能力大于生产者，那么消费者就必须等待生产者。为了解决这个问题于是引入了生产者和消费者模式。</p>
<p>什么是生产者消费者模式</p>
<p>生产者消费者模式是通过一个容器来解决生产者和消费者的强耦合问题。生产者和消费者彼此之间不直接通讯，而通过阻塞队列来进行通讯，所以生产者生产完数据之后不用等待消费者处理，直接扔给阻塞队列，消费者不找生产者要数据，而是直接从阻塞队列里取，阻塞队列就相当于一个缓冲区，平衡了生产者和消费者的处理能力。</p>
<p>下面我们看看生产者消费者的代码，就拿大家常说的吃包子为例子吧</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import time,random</span><br><span class="line">import queue,threading</span><br><span class="line"></span><br><span class="line">q = queue.Queue()</span><br><span class="line"></span><br><span class="line">def Producer(name):</span><br><span class="line">  count = 0</span><br><span class="line">  while count &lt;10:</span><br><span class="line">    print(&quot;制造包子ing&quot;)</span><br><span class="line">    time.sleep(random.randrange(3))</span><br><span class="line">    q.put(count)</span><br><span class="line">    print(&#x27;生产者 %s 生产了 %s 包子..&#x27; %(name, count))</span><br><span class="line">    count +=1</span><br><span class="line">    #q.task_done()</span><br><span class="line">    #q.join()</span><br><span class="line"></span><br><span class="line">def Consumer(name):</span><br><span class="line">  count = 0</span><br><span class="line">  while count &lt;10:</span><br><span class="line">    time.sleep(random.randrange(4))</span><br><span class="line">    if not q.empty():</span><br><span class="line">        data = q.get()</span><br><span class="line">        #q.task_done()</span><br><span class="line">        #q.join()</span><br><span class="line">        print(data)</span><br><span class="line">        print(&#x27;消费者 %s 消费了 %s 包子...&#x27; %(name, data))</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;包子吃完了&quot;)</span><br><span class="line">    count +=1</span><br><span class="line"></span><br><span class="line">c1 = threading.Thread(target=Producer, args=(&#x27;小明&#x27;,))</span><br><span class="line">c2 = threading.Thread(target=Consumer, args=(&#x27;小花&#x27;,))</span><br><span class="line">c3 = threading.Thread(target=Consumer, args=(&#x27;小灰&#x27;,))</span><br><span class="line">c1.start()</span><br><span class="line">c2.start()</span><br><span class="line">c3.start()</span><br><span class="line"></span><br><span class="line">c1.join()</span><br><span class="line">c2.join()</span><br><span class="line">c3.join()</span><br><span class="line"></span><br><span class="line">print(&#x27;结束&#x27;)</span><br></pre></td></tr></table></figure>

<p>另一种实现方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># q.task_done() 在完成一项工作之后，q.task_done() 函数向任务已经完成的队列发送一个信号</span><br><span class="line"># q.join() 实际上意味着等到队列为空，再执行别的操作</span><br><span class="line">import time,random</span><br><span class="line">import queue,threading</span><br><span class="line"></span><br><span class="line">q = queue.Queue()</span><br><span class="line"></span><br><span class="line">def Producer(name):</span><br><span class="line">  count = 0</span><br><span class="line">  while count &lt;10:</span><br><span class="line">    print(&quot;制造包子ing&quot;)</span><br><span class="line">    time.sleep(random.randrange(3))</span><br><span class="line">    q.put(count)</span><br><span class="line">    print(&#x27;生产者 %s 生产了 %s 包子..&#x27; %(name, count))</span><br><span class="line">    count +=1</span><br><span class="line">    q.task_done()</span><br><span class="line">    #q.join()</span><br><span class="line"></span><br><span class="line">def Consumer(name):</span><br><span class="line">  count = 0</span><br><span class="line">  while count &lt;10:</span><br><span class="line">    time.sleep(random.randrange(4))</span><br><span class="line">    data = q.get()</span><br><span class="line">    #q.task_done()</span><br><span class="line">    print(&#x27;等待中&#x27;)</span><br><span class="line">    q.join()</span><br><span class="line">    print(&#x27;消费者 %s 消费了 %s 包子...&#x27; %(name, data))</span><br><span class="line">    count +=1</span><br><span class="line"></span><br><span class="line">c1 = threading.Thread(target=Producer, args=(&#x27;小明&#x27;,))</span><br><span class="line">c2 = threading.Thread(target=Consumer, args=(&#x27;小花&#x27;,))</span><br><span class="line">c3 = threading.Thread(target=Consumer, args=(&#x27;小灰&#x27;,))</span><br><span class="line">c4 = threading.Thread(target=Consumer, args=(&#x27;小天&#x27;,))</span><br><span class="line"></span><br><span class="line">c1.start()</span><br><span class="line">c2.start()</span><br><span class="line">c3.start()</span><br><span class="line">c4.start()</span><br></pre></td></tr></table></figure>



<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料<a href="#参考资料" class="header-anchor">#</a></h1><p><a href="https://mp.weixin.qq.com/s/Hgp-x-T3ss4IiVk2_4VUrA">一篇文章搞懂Python多线程简单实现和GIL</a></p>
<p><a href="https://mp.weixin.qq.com/s/RZSBe2MG9tsbUVZLHxK9NA">一篇文章理清Python多线程同步锁，死锁和递归锁</a></p>
<p><a href="https://mp.weixin.qq.com/s/vKsNbDZnvg6LHWVA-AOIMA">同步条件</a></p>
]]></content>
  </entry>
  <entry>
    <title>hadoop_spark_hbase_hive</title>
    <url>/article/hadoop-spark-hbase-hive/</url>
    <content><![CDATA[<p>hdfs-site.xml</p>
<span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line">  you may not use this file except in compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to in writing, software</span><br><span class="line">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License for the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Put site-specific property overrides in this file. --&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                        &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">                                        &lt;value&gt;2&lt;/value&gt;</span><br><span class="line">                                                        &lt;final&gt;true&lt;/final&gt;</span><br><span class="line">                                                &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                        &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;</span><br><span class="line">                                        &lt;value&gt;/usr/local/hadoop/namenode&lt;/value&gt;</span><br><span class="line">                                                        &lt;final&gt;true&lt;/final&gt;</span><br><span class="line">                                                &lt;/property&gt;</span><br><span class="line">                                                &lt;property&gt;</span><br><span class="line">                                                                &lt;name&gt;dfs.datanode.name.dir&lt;/name&gt;</span><br><span class="line">                                                                                &lt;value&gt;/usr/local/hadoop/datanode&lt;/value&gt;</span><br><span class="line">                                                                                                &lt;final&gt;true&lt;/final&gt;</span><br><span class="line">                                                                                        &lt;/property&gt;</span><br><span class="line">                                                                                        &lt;property&gt;</span><br><span class="line">                                                                                                        &lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt;</span><br><span class="line"></span><br><span class="line">&lt;value&gt;master:50090&lt;/value&gt;</span><br><span class="line"></span><br><span class="line">                &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>



<p>core-site.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line">  you may not use this file except in compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to in writing, software</span><br><span class="line">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License for the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Put site-specific property overrides in this file. --&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                        &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">                                        &lt;value&gt;file:/usr/local/hadoop/tmp&lt;/value&gt;</span><br><span class="line">                                                        &lt;description&gt;Abase for other temporary directories.&lt;/description&gt;</span><br><span class="line">                                                &lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">           &lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">                      &lt;value&gt;hdfs://master:9000&lt;/value&gt;</span><br><span class="line">                               &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">                               &lt;property&gt;</span><br><span class="line">                                                       &lt;name&gt;ha.zookeeper.quorum&lt;/name&gt;</span><br><span class="line">                                                                               &lt;value&gt;master:2181,slave1:2181,slave2:2181&lt;/value&gt;</span><br><span class="line">                                                                                               &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line">~                                    </span><br></pre></td></tr></table></figure>



<p>hadoop-env.sh</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_291</span><br><span class="line">export HDFS_NAMENODE_USER=root</span><br><span class="line">export HDFS_DATANODE_USER=root</span><br><span class="line">export HDFS_SECONDARYNAMENODE_USER=root</span><br><span class="line">export YARN_RESOURCEMANAGER_USER=root</span><br><span class="line">export YARN_NODEMANAGER_USER=root</span><br></pre></td></tr></table></figure>



<p>mapred-site.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line">  you may not use this file except in compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to in writing, software</span><br><span class="line">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License for the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Put site-specific property overrides in this file. --&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                        &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">                                        &lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">                                                    &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                        &lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt;</span><br><span class="line">                                        &lt;value&gt;master:10020&lt;/value&gt;</span><br><span class="line">                                &lt;/property&gt;</span><br><span class="line">                                &lt;property&gt;</span><br><span class="line">                                                &lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt;</span><br><span class="line">                                                                &lt;value&gt;master:19888&lt;/value&gt;</span><br><span class="line">                                                        &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line">~                                                                                                                       ~                                                                                                                       ~   </span><br></pre></td></tr></table></figure>



<p>yarn-site.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line">  you may not use this file except in compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to in writing, software</span><br><span class="line">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License for the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Site specific YARN configuration properties --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                  &lt;name&gt;yarn.resourcemanager.webapp.address&lt;/name&gt;</span><br><span class="line">                            &lt;value&gt;master:8088&lt;/value&gt;</span><br><span class="line">                    &lt;/property&gt;</span><br><span class="line">                    &lt;property&gt;</span><br><span class="line">                              &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;</span><br><span class="line">                                        &lt;value&gt;master&lt;/value&gt;</span><br><span class="line">                                &lt;/property&gt;</span><br><span class="line">                                &lt;property&gt;</span><br><span class="line">                                          &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">                                                    &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">                                            &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line">~                                                                                                                       ~                                                                                                                       ~                                                                                                                       ~                                                                                                                       ~                                                                                                                       ~        </span><br></pre></td></tr></table></figure>



<p>workers</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">master</span><br><span class="line">slave1</span><br><span class="line">slave2</span><br><span class="line">~                                                                                                                       ~                                                                                                                       ~                                                                                                                       ~                                                                                                                       ~         </span><br></pre></td></tr></table></figure>

<p>在$HADOOP_HOME目录下创建datanode,namenode,tmp文件夹</p>
<p>HBASE</p>
<p>hbase-env.sh</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export HBASE_DISABLE_HADOOP_CLASSPATH_LOOKUP=&quot;true&quot;</span><br><span class="line"></span><br><span class="line"># Override text processing tools for use by these launch scripts.</span><br><span class="line"># export GREP=&quot;$&#123;GREP-grep&#125;&quot;</span><br><span class="line"># export SED=&quot;$&#123;SED-sed&#125;&quot;</span><br><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_291</span><br><span class="line">export HBASE_MANAGES_ZK=false</span><br></pre></td></tr></table></figure>



<p>hbase-site.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* Unless required by applicable law or agreed to in writing, software</span><br><span class="line"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line"> * See the License for the specific language governing permissions and</span><br><span class="line"> * limitations under the License.</span><br><span class="line"> */</span><br><span class="line">--&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">  &lt;!--</span><br><span class="line">    The following properties are set for running HBase as a single process on a</span><br><span class="line">    developer workstation. With this configuration, HBase is running in</span><br><span class="line">    &quot;stand-alone&quot; mode and without a distributed file system. In this mode, and</span><br><span class="line">    without further configuration, HBase and ZooKeeper data are stored on the</span><br><span class="line">    local filesystem, in a path under the value configured for `hbase.tmp.dir`.</span><br><span class="line">    This value is overridden from its default value of `/tmp` because many</span><br><span class="line">    systems clean `/tmp` on a regular basis. Instead, it points to a path within</span><br><span class="line">    this HBase installation directory.</span><br><span class="line"></span><br><span class="line">    Running against the `LocalFileSystem`, as opposed to a distributed</span><br><span class="line">    filesystem, runs the risk of data integrity issues and data loss. Normally</span><br><span class="line">    HBase will refuse to run in such an environment. Setting</span><br><span class="line">    `hbase.unsafe.stream.capability.enforce` to `false` overrides this behavior,</span><br><span class="line">    permitting operation. This configuration is for the developer workstation</span><br><span class="line">    only and __should not be used in production!__</span><br><span class="line"></span><br><span class="line">    See also https://hbase.apache.org/book.html#standalone_dist</span><br><span class="line">  --&gt;</span><br><span class="line">         &lt;property&gt;</span><br><span class="line">                         &lt;name&gt;hbase.rootdir&lt;/name&gt;</span><br><span class="line">                                         &lt;value&gt;hdfs://master:9000/hbase&lt;/value&gt;</span><br><span class="line">                                         &lt;description&gt;nothing&lt;/description&gt;                              &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;hbase.cluster.distributed&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;true&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">                  &lt;name&gt;hbase.zookeeper.quorum&lt;/name&gt;</span><br><span class="line">                                  &lt;value&gt;master:2181,slave1:2181,slave2:2181&lt;/value&gt;</span><br><span class="line">                                                          &lt;description&gt;nothing&lt;/description&gt;</span><br><span class="line">                                                                      &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;hbase.tmp.dir&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;./tmp&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;hbase.unsafe.stream.capability.enforce&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;false&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>



<p>regionservers</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">master</span><br><span class="line">slave1</span><br><span class="line">slave2</span><br><span class="line">~                                                                                                                       ~         :q</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>HIVE</p>
<p>hive-site.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;</span><br><span class="line">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">	&lt;property&gt;   </span><br><span class="line">    	&lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt;                                 &lt;value&gt;jdbc:mysql://master:3306/hive?createDatabaseIfNotExist=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;useSSL=false&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;                                                                 &lt;property&gt;</span><br><span class="line">		&lt;name&gt;javax.jdo.option.ConnectionDriverName&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;com.mysql.jdbc.Driver&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;javax.jdo.option.ConnectionUserName&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;root&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;javax.jdo.option.ConnectionPassword&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;asdfqwer&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;datanucleus.readOnlyDatastore&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;false&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;                                                                 &lt;property&gt;</span><br><span class="line">		&lt;name&gt;datanucleus.fixedDatastore&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;false&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">		&lt;name&gt;datanucleus.autoCreateSchema&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;datanucleus.schema.autoCreateAll&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;datanucleus.autoCreateTables&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;datanucleus.autoCreateColumns&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;hive.metastore.local&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;hive.cli.print.header&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;hive.cli.print.current.db&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;true&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;                                                             &lt;/configuration&gt;                                                                                  </span><br></pre></td></tr></table></figure>



<p>创建warehouse文件夹，将template去掉，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql-connector-java-5.1.49-bin.jar ##来自下载</span><br><span class="line">guava-27.0-jre.jar##来自hadoop</span><br></pre></td></tr></table></figure>



<p>SPARK</p>
<p>spark-env.sh</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_291</span><br><span class="line">export SCALA_HOME=/usr/share/scala</span><br><span class="line">export HADOOP_HOME=/usr/local/hadoop</span><br><span class="line">export HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop</span><br><span class="line">export SPARK_MASTER_HOST=master</span><br><span class="line">export SPARK_LOCAL_DIRS=/usr/local/spark</span><br></pre></td></tr></table></figure>

<p>workers</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">master</span><br><span class="line">slave1</span><br><span class="line">slave2</span><br><span class="line">~            </span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start-spark-all.sh</span><br><span class="line">stop-spark-all.sh</span><br><span class="line">### 防止与Hadoop start-all.sh 冲突，改名</span><br></pre></td></tr></table></figure>



<p>ZOOKEEPER</p>
<p>zoo.cfg</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># The number of milliseconds of each tick</span><br><span class="line">tickTime=2000</span><br><span class="line"># The number of ticks that the initial</span><br><span class="line"># synchronization phase can take</span><br><span class="line">initLimit=10</span><br><span class="line"># The number of ticks that can pass between</span><br><span class="line"># sending a request and getting an acknowledgement</span><br><span class="line">syncLimit=5</span><br><span class="line"># the directory where the snapshot is stored.</span><br><span class="line"># do not use /tmp for storage, /tmp here is just</span><br><span class="line"># example sakes.</span><br><span class="line">dataDir=/usr/local/zookeeper/data</span><br><span class="line"># the port at which the clients will connect</span><br><span class="line">clientPort=2181</span><br><span class="line">server.1=172.17.0.2:2888:3888</span><br><span class="line">server.2=172.17.0.3:2888:3888</span><br><span class="line">server.3=172.17.0.4:2888:3888</span><br></pre></td></tr></table></figure>







<p>~/.bashrc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_291</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line">export HADOOP_HOME=/usr/local/hadoop</span><br><span class="line">export HADOOP_CONFIG_HOME=$HADOOP_HOME/etc/hadoop</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/bin</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/sbin</span><br><span class="line">export ZOOKEEPER_HOME=/usr/local/zookeeper</span><br><span class="line">export PATH=$PATH:$ZOOKEEPER_HOME/bin</span><br><span class="line">export SCALA_HOME=/usr/local/scala</span><br><span class="line">export PATH=$PATH:$SCALA_HOME/bin</span><br><span class="line">export SPARK_HOME=/usr/local/spark</span><br><span class="line">export PATH=$PATH:$SPARK_HOME/bin:$SPARK_HOME/sbin</span><br><span class="line">export HBASE_HOME=/usr/local/hbase</span><br><span class="line">export PATH=$PATH:$HBASE_HOME/bin</span><br><span class="line">export HIVE_HOME=/usr/local/hive</span><br><span class="line">export PATH=$PATH:$HIVE_HOME/bin</span><br></pre></td></tr></table></figure>



<h1 id="hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop<a href="#hadoop" class="header-anchor">#</a></h1><h2 id="step-1-拉取ubuntu镜像"><a href="#step-1-拉取Ubuntu镜像" class="headerlink" title="step 1 拉取Ubuntu镜像"></a>step 1 拉取Ubuntu镜像<a href="#step-1-拉取ubuntu镜像" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull ubuntu:latest</span><br></pre></td></tr></table></figure>

<h2 id="step-2-使用dockerfile构建包含jdk的ubuntu镜像"><a href="#step-2-使用Dockerfile构建包含jdk的ubuntu镜像" class="headerlink" title="step 2 使用Dockerfile构建包含jdk的ubuntu镜像"></a>step 2 使用Dockerfile构建包含jdk的ubuntu镜像<a href="#step-2-使用dockerfile构建包含jdk的ubuntu镜像" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">去jdk官网下载jdk包，此处下载的为jdk1.8 ** jdk-8u291-linux-x64.tar.gz**, 将下载好的jdk文件移至wsl2环境下，在此目录下新建Dockerfile文件，并进入编辑状态</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim Dockerfile</span><br></pre></td></tr></table></figure>

<p>在Dockfile中输入以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM ubuntu:latest</span><br><span class="line">MAINTAINER duanmu</span><br><span class="line">ADD jdk-8u291-linux-x64.tar.gz /usr/local/</span><br><span class="line">ENV JAVA_HOME /usr/local/jdk1.8.0_291</span><br><span class="line">ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">ENV PATH $PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure>

<p>编辑后保存，开始build镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t jdk-20210127 .</span><br></pre></td></tr></table></figure>

<h2 id="step-3-进入镜像"><a href="#step-3-进入镜像" class="headerlink" title="step 3 进入镜像"></a>step 3 进入镜像<a href="#step-3-进入镜像" class="header-anchor">#</a></h2><p>​        新建一个以jdk-20210127为基础镜像的容器命名为ubuntu_hadoop并指定容器的hostname为charlie,并进入容器。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it --name=ubuntu_hadoop -h charlie jdk-20210127</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="step-4-升级apt-get"><a href="#step-4-升级apt-get" class="headerlink" title="step 4 升级apt-get"></a>step 4 升级apt-get<a href="#step-4-升级apt-get" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure>



<h2 id="step-5-安装vim"><a href="#step-5-安装vim" class="headerlink" title="step 5 安装vim"></a>step 5 安装vim<a href="#step-5-安装vim" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install vim</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="step-6-更新apt-get镜像源"><a href="#step-6-更新apt-get镜像源" class="headerlink" title="step 6 更新apt-get镜像源"></a>step 6 更新apt-get镜像源<a href="#step-6-更新apt-get镜像源" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure>

<p>将其中内容全部替换为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deb-src http://archive.ubuntu.com/ubuntu focal main restricted #Added by software-properties</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal main restricted</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted multiverse universe #Added by software-properties</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted multiverse universe #Added by software-properties</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-updates universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-updates multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse #Added by software-properties</span><br><span class="line">deb http://archive.canonical.com/ubuntu focal partner</span><br><span class="line">deb-src http://archive.canonical.com/ubuntu focal partner</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted multiverse universe #Added by software-properties</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-security universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-security multiverse</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="step-7-重新升级apt-get"><a href="#step-7-重新升级apt-get" class="headerlink" title="step 7 重新升级apt-get"></a>step 7 重新升级apt-get<a href="#step-7-重新升级apt-get" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure>

<h2 id="step-8-安装wget"><a href="#step-8-安装wget" class="headerlink" title="step 8 安装wget"></a>step 8 安装wget<a href="#step-8-安装wget" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure>

<h2 id="step-9-通过wget下载hadoop安装包"><a href="#step-9-通过wget下载Hadoop安装包" class="headerlink" title="step 9 通过wget下载Hadoop安装包"></a>step 9 通过wget下载Hadoop安装包<a href="#step-9-通过wget下载hadoop安装包" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://mirrors.cnnic.cn/apache/hadoop/common/hadoop-3.2.2/hadoop-3.2.2.tar.gz</span><br><span class="line"></span><br><span class="line">#wget https://mirrors.tuna.tsinghua.edu.cn/apache/hive/hive-3.1.2/apache-hive-3.1.2-bin.tar.gz</span><br><span class="line"></span><br><span class="line">#wget https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/zookeeper-3.6.3/apache-zookeeper-3.6.3-bin.tar.gz </span><br><span class="line"></span><br><span class="line">#wget https://mirrors.tuna.tsinghua.edu.cn/apache/hbase/stable/hbase-2.3.5-bin.tar.gz </span><br><span class="line"></span><br><span class="line">#wget https://mirrors.tuna.tsinghua.edu.cn/apache/spark/spark-3.1.2/spark-3.1.2-bin-hadoop3.2.tgz</span><br><span class="line"></span><br><span class="line">#wget https://downloads.lightbend.com/scala/2.13.6/scala-2.13.6.tgz</span><br><span class="line"></span><br><span class="line">#wget http://mirrors.ustc.edu.cn/mysql-ftp/Downloads/MySQL-5.7/mysql-server_5.7.31-1ubuntu18.04_amd64.deb-bundle.tar</span><br><span class="line"></span><br><span class="line">#wget https://cdn.mysql.com/archives/mysql-connector-java-5.1/mysql-connector-java-5.1.49.tar.gz</span><br></pre></td></tr></table></figure>

<h3 id="step-10-解压hadoop"><a href="#step-10-解压hadoop" class="headerlink" title="step 10 解压hadoop"></a>step 10 解压hadoop<a href="#step-10-解压hadoop" class="header-anchor">#</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -xvzf hadoop-3.2.2.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure>



<h3 id="step-11-配置环境变量并重启配置文件"><a href="#step-11-配置环境变量并重启配置文件" class="headerlink" title="step 11 配置环境变量并重启配置文件"></a>step 11 配置环境变量并重启配置文件<a href="#step-11-配置环境变量并重启配置文件" class="header-anchor">#</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure>

<p>新增以下环境变量：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_291</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line">export HADOOP_HOME=/usr/local/hadoop</span><br><span class="line">export HADOOP_CONFIG_HOME=$HADOOP_HOME/etc/hadoop</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/bin</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/sbin</span><br></pre></td></tr></table></figure>

<p>并重启配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure>

<h3 id="step-12-创建文件夹并修改配置文件"><a href="#step-12-创建文件夹并修改配置文件" class="headerlink" title="step 12 创建文件夹并修改配置文件"></a>step 12 创建文件夹并修改配置文件<a href="#step-12-创建文件夹并修改配置文件" class="header-anchor">#</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd $HADOOP_HOME</span><br><span class="line">mkdir tmp</span><br><span class="line">mkdir namenode</span><br><span class="line">mkdir datanode</span><br></pre></td></tr></table></figure>

<p>修改配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd $HADOOP_CONFIG_HOME</span><br><span class="line">vim core-site.xml</span><br></pre></td></tr></table></figure>

<p>将下面内容替换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line">  you may not use this file except in compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to in writing, software</span><br><span class="line">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License for the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Put site-specific property overrides in this file. --&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;file:/usr/local/hadoop/tmp&lt;/value&gt;</span><br><span class="line">		&lt;description&gt;Abase for other temporary directories.&lt;/description&gt;  		&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;hdfs://hdcluster&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;ha.zookeeper.quorum&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;master:2181,slave1:2181,slave2:2181&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>

<p>修改hdfs-site.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim hdfs-site.xml</span><br></pre></td></tr></table></figure>

<p>用下面配置替换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line">  you may not use this file except in compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to in writing, software</span><br><span class="line">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License for the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Put site-specific property overrides in this file. --&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;2&lt;/value&gt;</span><br><span class="line">        &lt;final&gt;true&lt;/final&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;/usr/local/hadoop/namenode&lt;/value&gt;</span><br><span class="line">        &lt;final&gt;true&lt;/final&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.datanode.name.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;/usr/local/hadoop/datanode&lt;/value&gt;</span><br><span class="line">        &lt;final&gt;true&lt;/final&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;master:50090&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>



<p>接下来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim mapred-site.xml</span><br></pre></td></tr></table></figure>

<p>使用下面内容替换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line">  you may not use this file except in compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to in writing, software</span><br><span class="line">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License for the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Put site-specific property overrides in this file. --&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">		&lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;master:10020&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;master:19888&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>

<p>再是yarn-site.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim yarn-site.xml</span><br></pre></td></tr></table></figure>

<p>使用下面的内容替换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line">  you may not use this file except in compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to in writing, software</span><br><span class="line">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License for the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Site specific YARN configuration properties --&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;yarn.resourcemanager.webapp.address&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;master:8088&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;master&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>

<p>修改hadoop环境变量，在hadoop安装目录下，找到hadoop-env.sh文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim hadoop-env.sh</span><br></pre></td></tr></table></figure>

<p>在最后添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_291</span><br><span class="line">export HDFS_NAMENODE_USER=root</span><br><span class="line">export HDFS_DATANODE_USER=root</span><br><span class="line">export HDFS_SECONDARYNAMENODE_USER=root</span><br><span class="line">export YARN_RESOURCEMANAGER_USER=root</span><br><span class="line">export YARN_NODEMANAGER_USER=root</span><br></pre></td></tr></table></figure>

<p>编辑安装目录下的workers文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim workers</span><br></pre></td></tr></table></figure>

<p>内容改为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">master</span><br><span class="line">slave1</span><br><span class="line">slave2</span><br></pre></td></tr></table></figure>

<h3 id="刷新及hdfs初始化"><a href="#刷新及hdfs初始化" class="headerlink" title="刷新及hdfs初始化"></a>刷新及hdfs初始化<a href="#刷新及hdfs初始化" class="header-anchor">#</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">chown -R root:root /usr/local/hadoop/</span><br></pre></td></tr></table></figure>

<h2 id="安装ssh"><a href="#安装SSH" class="headerlink" title="安装SSH"></a>安装SSH<a href="#安装ssh" class="header-anchor">#</a></h2><p>hadoop的环境必须满足ssh免密登陆，先安装ssh</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install net-tools</span><br><span class="line">apt-get install ssh</span><br></pre></td></tr></table></figure>

<p>创建sshd目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p ~/var/run/sshd</span><br></pre></td></tr></table></figure>

<p>生成访问密钥</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~/</span><br><span class="line">ssh-keygen -t rsa -P &#x27;&#x27; -f ~/.ssh/id_rsa</span><br><span class="line">cd .ssh</span><br><span class="line">cat id_rsa.pub &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure>

<p>这一步骤提示安装路径与设置密码时全布直接按回车即可设置成免密。</p>
<h2 id="修改ssh配置"><a href="#修改SSH配置" class="headerlink" title="修改SSH配置"></a>修改SSH配置<a href="#修改ssh配置" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/ssh/ssh_config</span><br></pre></td></tr></table></figure>

<p>添加,将下面这句话直接添加即可，也可以在文件中找到被注释的这句话去修改。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">StrictHostKeyChecking no #将ask改为no</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>

<p>在末尾添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#禁用密码验证</span><br><span class="line">PasswordAuthentication no</span><br><span class="line">#启用密钥验证</span><br><span class="line">RSAAuthentication yes</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line">AuthorizedKeysFile .ssh/authorized_keys</span><br></pre></td></tr></table></figure>

<p>最后使用下面语句测试是否免密登陆，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh localhost</span><br></pre></td></tr></table></figure>

<p>当出现报错时，考虑输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/init.d/ssh restart</span><br></pre></td></tr></table></figure>

<p>用户组问题，chown -R  root:root .ssh</p>
<p>权限问题 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod g-w /home/your_user # 或　chmod 0755 /home/your_user</span><br><span class="line"> </span><br><span class="line">chmod 700 /home/your_user/.ssh</span><br><span class="line"> </span><br><span class="line">chmod 600 /home/your_user/.ssh/authorized_keys</span><br><span class="line">chmod 600 .ssh/ida_*</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>将hadoop文件夹利用scp传输</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scp -r /usr/local/hadoop/ slave1:/usr/local/</span><br><span class="line">scp -r /usr/local/hadoop/ slave2:/usr/local/</span><br></pre></td></tr></table></figure>



<p>在master机器上初始化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hdfs namenode -format #否则web端看不到</span><br></pre></td></tr></table></figure>

<h1 id="zookeeper安装配置"><a href="#Zookeeper安装配置" class="headerlink" title="Zookeeper安装配置"></a>Zookeeper安装配置<a href="#zookeeper安装配置" class="header-anchor">#</a></h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/zookeeper-3.6.3/apache-zookeeper-3.6.3-bin.tar.gz</span><br><span class="line">#下载完成后解压至/usr/local目录下</span><br><span class="line">tar -zxvf apache-zookeeper-3.6.1-bin.tar.gz -C /usr/local/</span><br><span class="line">cd /usr/local</span><br><span class="line"># 重命名zookeeper</span><br><span class="line">mv apache-zookeeper-3.6.1-bin zookeeper</span><br></pre></td></tr></table></figure>

<p>设置环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure>

<p>添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export ZOOKEEPER_HOME=/usr/local/zookeeper</span><br><span class="line">export PATH=$PATH:$ZOOKEEPER_HOME/bin</span><br></pre></td></tr></table></figure>

<p>分发至其他机器并执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure>

<p>配置zookeeper</p>
<p>进入conf目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local/zookeeper/conf</span><br></pre></td></tr></table></figure>

<p>将zoo_sample.cfg复制一份并命名为zoo.cfg</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure>

<p>对zoo.cfg做如下修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dataDir=/usr/local/zookeeper/data</span><br><span class="line">server.1=master:2888:3888</span><br><span class="line">server.2=slave1:2888:3888</span><br><span class="line">server.3=slave2:2888:3888</span><br></pre></td></tr></table></figure>



<p>分发至其他机器</p>
<p>创建data目录并新建一个myid 的文件，在每个机器中，文件内容对应server.后面的数字，master机器即为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /usr/local/zookeeper/data/myid</span><br><span class="line"></span><br><span class="line">插入1</span><br></pre></td></tr></table></figure>

<p>至此还只是集群搭建，但不是高可用！</p>
<h1 id="spark-安装配置"><a href="#Spark-安装配置" class="headerlink" title="Spark 安装配置"></a>Spark 安装配置<a href="#spark-安装配置" class="header-anchor">#</a></h1><h2 id="spark"><a href="#spark" class="headerlink" title="spark"></a>spark<a href="#spark" class="header-anchor">#</a></h2><p>解压spark文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -xvf spark-3.1.2-bin-hadoop3.2.tgz -C /usr/local</span><br><span class="line"># 然后重命名</span><br><span class="line">cd /usr/local</span><br><span class="line">mv spark-3.1.2-bin-hadoop3.2 spark</span><br></pre></td></tr></table></figure>

<p>环境配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure>

<p>更改配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local/spark/conf</span><br><span class="line">vi spark-env.sh</span><br></pre></td></tr></table></figure>

<p>写入以下文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_291</span><br><span class="line">export SCALA_HOME=/usr/share/scala</span><br><span class="line">export HADOOP_HOME=/usr/local/hadoop</span><br><span class="line">export HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop</span><br><span class="line">export SPARK_MASTER_HOST=master</span><br><span class="line">export SPARK_LOCAL_DIRS=/usr/local/spark</span><br></pre></td></tr></table></figure>

<p>再同一目录下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim workers</span><br></pre></td></tr></table></figure>

<p>写入以下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">master</span><br><span class="line">slave1</span><br><span class="line">slave2</span><br></pre></td></tr></table></figure>

<p>将/usr/local/spark/sbin目录下start-all.sh 重命名为start-spark-all.sh, stop-all.sh 重命名为stop-spark-all.sh</p>
<h2 id="scala-安装配置"><a href="#scala-安装配置" class="headerlink" title="scala 安装配置"></a>scala 安装配置<a href="#scala-安装配置" class="header-anchor">#</a></h2><p>只需在~/.bashrc</p>
<p>添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export SCALA_HOME=/usr/local/scala</span><br><span class="line">export PATH=$PATH:$SCALA_HOME/bin</span><br></pre></td></tr></table></figure>

<h1 id="hbase-安装配置"><a href="#Hbase-安装配置" class="headerlink" title="Hbase 安装配置"></a>Hbase 安装配置<a href="#hbase-安装配置" class="header-anchor">#</a></h1><p>解压下载文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -xvf hbase-2.3.5-bin.tar.gz -C /usr/local/</span><br><span class="line">#重命名</span><br><span class="line">cd /usr/local</span><br><span class="line"> mv hbase-2.3.5/ hbase</span><br><span class="line">export HBASE_DISABLE_HADOOP_CLASSPATH_LOOKUP=&quot;true&quot;</span><br><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_291</span><br><span class="line">export HBASE_MANAGES_ZK=false</span><br></pre></td></tr></table></figure>

<p>修改~/.bashrc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export HBASE_HOME=/usr/local/hbase</span><br><span class="line">export PATH=$PATH:$HBASE_HOME/bin</span><br></pre></td></tr></table></figure>

<p>修改配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local/hbase/conf</span><br><span class="line">vi hbase-env.sh</span><br></pre></td></tr></table></figure>

<p>添加以下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export HBASE_DISABLE_HADOOP_CLASSPATH_LOOKUP=&quot;true&quot;</span><br><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_291</span><br><span class="line">export HBASE_MANAGES_ZK=false</span><br></pre></td></tr></table></figure>

<p>修改hbase-site.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">                       &lt;name&gt;hbase.rootdir&lt;/name&gt;</span><br><span class="line">                                       &lt;value&gt;hdfs://master:9000/hbase&lt;/value&gt;</span><br><span class="line">                                       &lt;description&gt;nothing&lt;/description&gt;                              &lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;hbase.cluster.distributed&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;true&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">                &lt;name&gt;hbase.zookeeper.quorum&lt;/name&gt;</span><br><span class="line">                                &lt;value&gt;master:2181,slave1:2181,slave2:2181&lt;/value&gt;</span><br><span class="line">                                                        &lt;description&gt;nothing&lt;/description&gt;</span><br><span class="line">                                                                    &lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;hbase.tmp.dir&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;./tmp&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;hbase.unsafe.stream.capability.enforce&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;false&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>



<p>修改regionservers</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">master</span><br><span class="line">slave1</span><br><span class="line">slave2</span><br></pre></td></tr></table></figure>

<h1 id="hive安装配置"><a href="#Hive安装配置" class="headerlink" title="Hive安装配置"></a>Hive安装配置<a href="#hive安装配置" class="header-anchor">#</a></h1><h2 id="mysql安装"><a href="#mysql安装" class="headerlink" title="mysql安装"></a>mysql安装<a href="#mysql安装" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -xvf mysql-server_5.7.31-1ubuntu18.04_amd64.deb-bundle.tar</span><br><span class="line">apt-get install ./libmysql*</span><br><span class="line">apt-get install libtinfo5</span><br><span class="line">apt-get install ./mysql-community-client_5.7.31-1ubuntu18.04_amd64.deb</span><br><span class="line">apt-get install ./mysql-client_5.7.31-1ubuntu18.04_amd64.deb</span><br><span class="line">apt-get install ./mysql-community-server_5.7.31-1ubuntu18.04_amd64.deb</span><br><span class="line">###第6行步骤会有两次让输入密码</span><br><span class="line">apt-get install ./mysql-server_5.7.31-1ubuntu18.04_amd64.deb</span><br><span class="line">###安装结束后，修改权限</span><br><span class="line">cd /var/run</span><br><span class="line">chmod -R 777 mysqld</span><br><span class="line">cd /var/lib</span><br><span class="line">chmod -R 777 mysql</span><br><span class="line">service mysql start</span><br><span class="line">mysql -uroot -p #输入密码</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">use mysql;</span><br><span class="line">grant all privileges on *.* to &#x27;hive&#x27;@&#x27;%&#x27; identified BY &#x27;yourpassword&#x27; with grant option;</span><br><span class="line">flush privileges;</span><br><span class="line">exit;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">service mysql restart</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="hive-安装"><a href="#hive-安装" class="headerlink" title="hive 安装"></a>hive 安装<a href="#hive-安装" class="header-anchor">#</a></h2><p>解压</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -xzvf apache-hive-3.1.2-bin.tar.gz -C /usr/local/</span><br><span class="line">#重命名</span><br><span class="line">cd /usr/local</span><br><span class="line">mv apache-hive-3.1.2-bin hive</span><br></pre></td></tr></table></figure>

<p>修改环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br><span class="line">#添加以下内容</span><br><span class="line">export HIVE_HOME=/usr/local/hive</span><br><span class="line">export PATH=$PATH:$HIVE_HOME/bin</span><br></pre></td></tr></table></figure>

<p>创建warehouse 文件夹</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local/hive</span><br><span class="line">mkdir warehouse</span><br></pre></td></tr></table></figure>

<p>配置文件修改</p>
<p>hive-env.sh</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HADOOP_HOME=/usr/local/hadoop</span><br><span class="line">export HIVE_CONF_DIR=/usr/local/hive/conf</span><br><span class="line">export HIVE_AUX_JARS_PATH=/usr/local/hive/lib</span><br></pre></td></tr></table></figure>

<p>hive-site.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;</span><br><span class="line">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">		&lt;property&gt;</span><br><span class="line">					&lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt;</span><br><span class="line">	 &lt;value&gt;jdbc:mysql://master:3306/hive?createDatabaseIfNotExist=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;useSSL=false&lt;/value&gt;</span><br><span class="line">		 	&lt;/property&gt;</span><br><span class="line">					&lt;property&gt;</span><br><span class="line">	&lt;name&gt;javax.jdo.option.ConnectionDriverName&lt;/name&gt;</span><br><span class="line">				&lt;value&gt;com.mysql.jdbc.Driver&lt;/value&gt;</span><br><span class="line">						&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">				&lt;name&gt;javax.jdo.option.ConnectionUserName&lt;/name&gt;</span><br><span class="line">&lt;value&gt;root&lt;/value&gt;</span><br><span class="line">		&lt;/property&gt;</span><br><span class="line">				&lt;property&gt;</span><br><span class="line">&lt;name&gt;javax.jdo.option.ConnectionPassword&lt;/name&gt;</span><br><span class="line">&lt;value&gt;asdfqwer&lt;/value&gt;</span><br><span class="line">				&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">			&lt;name&gt;datanucleus.readOnlyDatastore&lt;/name&gt;</span><br><span class="line">						&lt;value&gt;false&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">			&lt;property&gt;</span><br><span class="line">						&lt;name&gt;datanucleus.fixedDatastore&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;false&lt;/value&gt;</span><br><span class="line">				&lt;/property&gt;</span><br><span class="line">						&lt;property&gt;</span><br><span class="line">		&lt;name&gt;datanucleus.autoCreateSchema&lt;/name&gt;</span><br><span class="line">					&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">		&lt;property&gt;</span><br><span class="line">					&lt;name&gt;datanucleus.schema.autoCreateAll&lt;/name&gt;</span><br><span class="line">	&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">			&lt;/property&gt;</span><br><span class="line">					&lt;property&gt;</span><br><span class="line">	&lt;name&gt;datanucleus.autoCreateTables&lt;/name&gt;</span><br><span class="line">				&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">						&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">				&lt;name&gt;datanucleus.autoCreateColumns&lt;/name&gt;</span><br><span class="line">&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">		&lt;/property&gt;</span><br><span class="line">				&lt;property&gt;</span><br><span class="line">&lt;name&gt;hive.metastore.local&lt;/name&gt;</span><br><span class="line">			&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">					&lt;/property&gt;</span><br><span class="line">&lt;!-- 显示表的列名 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">			&lt;name&gt;hive.cli.print.header&lt;/name&gt;</span><br><span class="line">						&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">			&lt;!-- 显示数据库名称 --&gt;</span><br><span class="line">			&lt;property&gt;</span><br><span class="line">						&lt;name&gt;hive.cli.print.current.db&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">				&lt;/property&gt;</span><br><span class="line">			&lt;/configuration&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>客户端hive-site.xml<a href="#refer-anchor-1"><sup>1</sup></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                  &lt;name&gt;hive.metastore.warehouse.dir&lt;/name&gt;</span><br><span class="line">                  &lt;value&gt;/usr/local/hive/warehouse&lt;/value&gt;</span><br><span class="line">                    &lt;/property&gt;</span><br><span class="line">                    &lt;property&gt;</span><br><span class="line">                              &lt;name&gt;hive.metastore.local&lt;/name&gt;</span><br><span class="line">                                        &lt;value&gt;false&lt;/value&gt;</span><br><span class="line">                                &lt;/property&gt;</span><br><span class="line">                                &lt;property&gt;</span><br><span class="line">                                          &lt;name&gt;hive.metastore.uris&lt;/name&gt;</span><br><span class="line">                                                    &lt;value&gt;thrift://master:9083&lt;/value&gt;</span><br><span class="line">                                            &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line">~           </span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#服务器端</span><br><span class="line">schematool -dbType mysql -initSchema</span><br><span class="line">hive --service metastore</span><br><span class="line">客户端</span><br><span class="line">hive</span><br><span class="line">show databases;</span><br></pre></td></tr></table></figure>



<p>第一次运行报错：</p>
<p><img src="image-20210719140401396.png" alt="image-20210719140401396"></p>
<h1 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用<a href="#高可用" class="header-anchor">#</a></h1><p>core-site.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;file:/usr/local/hadoop/tmp&lt;/value&gt;</span><br><span class="line">		&lt;description&gt;Abase for other temporary directories.&lt;/description&gt;  		&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;hdfs://hdcluster&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;ha.zookeeper.quorum&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;master:2181,slave1:2181,slave2:2181&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>





<p>hdfs-site.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line">  you may not use this file except in compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to in writing, software</span><br><span class="line">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License for the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Put site-specific property overrides in this file. --&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.nameservices&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;hdcluster&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;!-- myNameService1下面有两个NameNode，分别是nn1，nn2 --&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.ha.namenodes.hdcluster&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;nn1,nn2&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;!-- nn1的RPC通信地址 --&gt;</span><br><span class="line">	 &lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.namenode.rpc-address.hdcluster.nn1&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;master:9000&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;!-- nn1的http通信地址 --&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.namenode.http-address.hdcluster.nn1&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;master:50070&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;!-- nn2的RPC通信地址 --&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.namenode.rpc-address.hdcluster.nn2&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;slave1:9000&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;!-- nn2的http通信地址 --&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.namenode.http-address.hdcluster.nn2&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;slave1:50070&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;!-- 指定NameNode的元数据在JournalNode上的存放位置 --&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.namenode.shared.edits.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;qjournal://master:8485;slave1:8485;slave2:8485/hdcluster&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;!-- 指定JournalNode在本地磁盘存放数据的位置 --&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.journalnode.edits.dir&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;/usr/local/hadoop/journalData&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;!-- 开启NameNode失败自动切换 --&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.ha.automatic-failover.enabled&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;!-- 配置失败自动切换实现方式 --&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.client.failover.proxy.provider.hdcluster&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;!-- 配置隔离机制方法，Failover后防止停掉的Namenode启动，造成两个服务,多个机制用换行分割，即每个机制暂用一行--&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.ha.fencing.methods&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;sshfence</span><br><span class="line">				shell(/bin/true)</span><br><span class="line">		&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;!-- 使用sshfence隔离机制时需要ssh免登陆，注意换成自己的用户名 --&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.ha.fencing.ssh.private-key-files&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;/root/.ssh/id_rsa&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.ha.fencing.ssh.connect-timeout&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;30000&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.permissions&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;false&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;2&lt;/value&gt;</span><br><span class="line">		&lt;final&gt;true&lt;/final&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;/usr/local/hadoop/namenode&lt;/value&gt;</span><br><span class="line">		&lt;final&gt;true&lt;/final&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.datanode.name.dir&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;/usr/local/hadoop/datanode&lt;/value&gt;</span><br><span class="line">		&lt;final&gt;true&lt;/final&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;master:50090&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>hadoop-env.sh</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_291</span><br><span class="line">export HDFS_NAMENODE_USER=root</span><br><span class="line">export HDFS_DATANODE_USER=root</span><br><span class="line">export HDFS_SECONDARYNAMENODE_USER=root</span><br><span class="line">export YARN_RESOURCEMANAGER_USER=root</span><br><span class="line">export YARN_NODEMANAGER_USER=root</span><br><span class="line">export HDFS_JOURNALNODE_USER=root</span><br><span class="line">export HDFS_ZKFC_USER=root</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>mapred-site.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;master:10020&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;master:19888&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>yarn-site.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;yarn.resourcemanager.ha.enabled&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;yarn.resourcemanager.cluster-id&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;yrc&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;yarn.resourcemanager.ha.rm-ids&lt;/name&gt;</span><br><span class="line"> 		&lt;value&gt;rm1,rm2&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;yarn.resourcemanager.hostname.rm1&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;master&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;yarn.resourcemanager.hostname.rm2&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;slave1&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;yarn.resourcemanager.webapp.address.rm1&lt;/name&gt;</span><br><span class="line">	    &lt;value&gt;master:8088&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;yarn.resourcemanager.webapp.address.rm2&lt;/name&gt;		</span><br><span class="line">		&lt;value&gt;slave1:8088&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;																	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;yarn.resourcemanager.zk-address&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;master:2181,slave1:2181&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;yarn.application.classpath&lt;/name&gt;</span><br><span class="line">					&lt;value&gt;/usr/local/hadoop/etc/hadoop:/usr/local/hadoop/share/hadoop/common/lib/*:/usr/local/hadoop/share/hadoop/common/*:/usr/local/hadoop/share/hadoop/hdfs:/usr/local/hadoop/share/hadoop/hdfs/lib/*:/usr/local/hadoop/share/hadoop/hdfs/*:/usr/local/hadoop/share/hadoop/mapreduce/lib/*:/usr/local/hadoop/share/hadoop/mapreduce/*:/usr/local/hadoop/share/hadoop/yarn:/usr/local/hadoop/share/hadoop/yarn/lib/*:/usr/local/hadoop/share/hadoop/yarn/*&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p><strong>运行错误</strong>：</p>
<p><strong>ERROR: Cannot set priority of datanode process</strong></p>
<p><strong>解决方案</strong></p>
<p>​    <strong>chown -R root:root ##权限问题</strong></p>
<p>​    <strong>也有可能是配置文件不一致</strong></p>
<p>如果初始化过，且journaldata可能初始化过，再次初始化namenode,则需要先启动journalnode</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">错误提示：</span><br><span class="line">Unable to check if JNs are ready for formatting. </span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hadoop-daemon.sh start journalnode-&gt;hdfs --daemon start journalnode</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;2&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.nameservices&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;hdcluster&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.ha.namenodes.hdcluster&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;nn1,nn2&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.namenode.rpc-address.hdcluster.nn1&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;master:8020&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.namenode.rpc-address.hdcluster.nn2&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;slave1:8020&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.namenode.http-address.hdcluster.nn1&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;master:9870&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.namenode.http-address.hdcluster.nn2&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;slave1:9870&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.namenode.shared.edits.dir&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;qjournal://master:8485;slave1:8485;slave2:8485/hdcluster&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.client.failover.proxy.provider.hdcluster&lt;/name&gt;</span><br><span class="line">	    &lt;value&gt;org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.ha.fencing.methods&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;sshfence&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.ha.fencing.ssh.private-key-files&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;/root/.ssh/id_rsa&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.journalnode.edits.dir&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;/usr/local/hadoop/journalData&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.ha.automatic-failover.enabled.hdcluster&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;/usr/local/hadoop/namenode&lt;/value&gt;</span><br><span class="line">        &lt;final&gt;true&lt;/final&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.datanode.name.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;/usr/local/hadoop/datanode&lt;/value&gt;</span><br><span class="line">        &lt;final&gt;true&lt;/final&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>



<h1 id="reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference<a href="#reference" class="header-anchor">#</a></h1><!--
&emsp;&emsp;<font face="黑体" size=10>16. 我是黑体字</font>  <div id="refer-anchor-1"></div>- [1] [hive搭建](https://www.jianshu.com/p/fd73c53668f5)
-->

<div style="display:none">这是一段注释</div>

<ol>
<li><p> <a href="https://blog.csdn.net/weixin_43993764/article/details/113405025"> Docker配置Hadoop集群并使用WordCount测试_出大问题-CSDN博客</a></p>
</li>
<li><p> <a href="https://blog.csdn.net/weixin_43311978/article/details/106099052">Hadoop3.2.1 HA 高可用集群的搭建（基于Zookeeper，NameNode高可用+Yarn高可用）_Captain.Y.的博客-CSDN博客</a></p>
</li>
<li><p> <a href="https://blog.csdn.net/weixin_43311978/article/details/105400694?spm=1001.2014.3001.5501"> CentOS7使用Docker安装hadoop集群_Captain.Y.的博客-CSDN博客</a></p>
</li>
<li><p> <a href="https://blog.csdn.net/u013015629/article/details/70045809">Ubuntu下”sshd:unrecognized service”_子建莫敌-CSDN博客</a></p>
</li>
<li><p> <a href="https://blog.csdn.net/weixin_43487121/article/details/103589532"> Hadoop3.1.3+Zookeeper3.5.6+hbase2.2.2+hive3.1.2安装以及测试_井鱼的博客-CSDN博客</a></p>
</li>
<li><p> <a href="https://blog.csdn.net/piaoxi6587/article/details/103569376"> Hadoop3.2 +Spark3.0全分布式安装_piaoxi6587的博客-CSDN博客</a></p>
</li>
<li><p> <a href="https://blog.csdn.net/shanhai3000/article/details/104865652"> 使用Paralles Desktop，在虚拟机环境中搭建hadoop集群（2主3从5节点）_shanhai3000的博客-CSDN博客</a></p>
</li>
<li><p> <a href="https://blog.csdn.net/shanhai3000/article/details/107682499">安装并配置HBase集群（5个节点）_shanhai3000的博客-CSDN博客</a></p>
</li>
<li><p> <a href="https://www.zabbx.cn/archives/docker%E4%BD%BF%E7%94%A8dockerfile%E6%9E%84%E5%BB%BAmysql%E9%95%9C%E5%83%8F%E5%8D%81%E4%BA%94">Docker 使用Dockerfile构建MySQL镜像（十五） - 勤奋的冬枣 (zabbx.cn)</a></p>
</li>
<li><p> <a href="https://blog.csdn.net/as480133937/article/details/100138838">(22条消息) Hexo-Next 主题博客个性化配置超详细，超全面(两万字)_Z小旋-CSDN博客_hexo next主题配置</a></p>
</li>
<li><p> <a href="https://www.jianshu.com/p/30d45fa044a2">3.Spark环境搭建-Spark完全分布式集群搭建 - 简书 (jianshu.com)</a></p>
</li>
<li><p> <a href="https://www.cnblogs.com/yinzhengjie2020/p/12508145.html">Apache Hadoop HDFS高可用部署实战案例 - JasonYin2020 - 博客园 (cnblogs.com)</a></p>
</li>
<li><p> <a href="https://www.cnblogs.com/rmxd/p/11316062.html#_label4_0">HBase的完全分布式搭建 - coder、 - 博客园 (cnblogs.com)</a></p>
</li>
<li><p> <a href="https://www.cnblogs.com/yinzhengjie2020/p/12239031.html">HBase完全分布式集群搭建 - JasonYin2020 - 博客园 (cnblogs.com)</a></p>
</li>
<li><p> <a href="https://blog.csdn.net/agent_x/article/details/78660341"> hive安装及mysql配置_炼剑-CSDN博客_hive配置mysql</a></p>
</li>
<li><p> <a href="https://blog.csdn.net/GentleCP/article/details/87936263"> Mysql 8.0.13 开启远程访问权限（ERROR 1064 (42000): You have an error in your SQL syntax; check the manual th）_GentleCP的博客-CSDN博客</a></p>
</li>
<li><p> <a href="https://www.cnblogs.com/tijun/p/7562282.html">运行Spark-shell，解决Unable to load native-hadoop library for your platform - 提君 - 博客园 (cnblogs.com)</a></p>
</li>
<li><p> <a href="https://zhuanlan.zhihu.com/p/89472385">ubuntu下hadoop、spark、hive、azkaban 集群搭建 - 知乎 (zhihu.com)</a></p>
</li>
<li><p> <a href="https://www.cnblogs.com/xuwujing/p/">我的随笔 - 虚无境 - 博客园 (cnblogs.com)-大数据学习系列 </a></p>
</li>
<li><p> <a href="https://cloud.tencent.com/developer/article/1624245">Spark on Hive &amp; Hive on Spark，傻傻分不清楚 - 云+社区 - 腾讯云 (tencent.com)</a></p>
</li>
<li><p> <a href="https://blog.csdn.net/Dante_003/article/details/72867493">hive on spark安装(hive2.3 spark2.1)_敲码的汉子-CSDN博客_hive on spark 安装</a></p>
</li>
<li><p> <a href="https://www.cnblogs.com/zlslch/category/965666.html">Hadoop Hive集群搭建（含CentOS和Ubuntu） - 随笔分类 - 大数据和AI躺过的坑 - 博客园 (cnblogs.com)</a></p>
</li>
<li><p><a href="https://blog.csdn.net/u011809553/article/details/80937624">(22条消息) ssh公钥都追加到authorized_keys文件了，但是还是无法免秘钥登陆_孑然一身踽踽而行-CSDN博客</a></p>
</li>
<li><p><a href="https://www.jianshu.com/p/fd73c53668f5">Hive学习笔记一：远程服务器模式搭建 - 简书 (jianshu.com)</a></p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>record_everyday</title>
    <url>/article/record_everyday/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="2db1a0ac0ec0e1429024065f1ac8290a3bb36b5820aa5f6879cd1a993543852e"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>加密</tag>
      </tags>
  </entry>
</search>
