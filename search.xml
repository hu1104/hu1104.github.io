<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hadoop_WSL2</title>
    <url>/article/Hadoop_WSL2/</url>
    <content><![CDATA[<h1 id="制作镜像"><a href="#制作镜像" class="headerlink" title="制作镜像"></a>制作镜像<a href="#制作镜像" class="header-anchor">#</a></h1><h2 id="1-拉取ubuntu镜像"><a href="#1-拉取Ubuntu镜像" class="headerlink" title="1. 拉取Ubuntu镜像"></a>1. 拉取Ubuntu镜像<a href="#1-拉取ubuntu镜像" class="header-anchor">#</a></h2><pre><code>首先拉取一个Ubuntu最新的镜像作为基础镜像`docker pull ubuntu:latest`,结束后，运行`docker images`,可以看到
</code></pre>
<p><img src="base_ubuntu.png" alt="图片" title="打开后显示图片"></p>
<h2 id="2-使用dockerfile构建包含jdk的ubuntu镜像"><a href="#2-使用Dockerfile构建包含jdk的ubuntu镜像" class="headerlink" title="2. 使用Dockerfile构建包含jdk的ubuntu镜像"></a>2. 使用Dockerfile构建包含jdk的ubuntu镜像<a href="#2-使用dockerfile构建包含jdk的ubuntu镜像" class="header-anchor">#</a></h2><pre><code>去jdk官网下载jdk包，此处下载的为jdk1.8 ** jdk-8u291-linux-x64.tar.gz**, 将下载好的jdk文件移至wsl2环境下，在此目录下新建Dockerfile文件，并进入编辑状态
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim Dockerfile</span><br></pre></td></tr></table></figure>

<span id="more"></span>
<p>&emsp;&emsp;在Dockerfile中输入以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM ubuntu:latest</span><br><span class="line">MAINTAINER duanmu</span><br><span class="line">ADD jdk-8u291-linux-x64.tar.gz /usr/local/</span><br><span class="line">ENV JAVA_HOME /usr/local/jdk1.8.0_291</span><br><span class="line">ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">ENV PATH $PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;编辑后保存，开始build镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t jdk-20210127 .</span><br></pre></td></tr></table></figure>

<h2 id="3-进入镜像"><a href="#3-进入镜像" class="headerlink" title="3. 进入镜像"></a>3. 进入镜像<a href="#3-进入镜像" class="header-anchor">#</a></h2><p>&emsp;&emsp;新建一个以jdk-20210127为基础镜像的容器命名为ubuntu_hadoop并指定容器的hostname为charlie,并进入容器。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it --name=ubuntu_hadoop -h charlie jdk-20210127</span><br></pre></td></tr></table></figure>

<h2 id="4-升级apt-get"><a href="#4-升级apt-get" class="headerlink" title="4. 升级apt-get"></a>4. 升级apt-get<a href="#4-升级apt-get" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure>

<h2 id="5-安装vim"><a href="#5-安装vim" class="headerlink" title="5. 安装vim"></a>5. 安装vim<a href="#5-安装vim" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install vim</span><br></pre></td></tr></table></figure>

<h2 id="6-更新apt-get镜像源"><a href="#6-更新apt-get镜像源" class="headerlink" title="6. 更新apt-get镜像源"></a>6. 更新apt-get镜像源<a href="#6-更新apt-get镜像源" class="header-anchor">#</a></h2><p>&emsp;&emsp;默认的apt-get下载源速度太慢，更换下载源可以提升速度,进入下载源列表文件，按a进入insert模式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure>
<p>将其中内容全部替换为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deb-src http://archive.ubuntu.com/ubuntu focal main restricted #Added by software-properties</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal main restricted</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted multiverse universe #Added by software-properties</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted multiverse universe #Added by software-properties</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-updates universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-updates multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse #Added by software-properties</span><br><span class="line">deb http://archive.canonical.com/ubuntu focal partner</span><br><span class="line">deb-src http://archive.canonical.com/ubuntu focal partner</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted multiverse universe #Added by software-properties</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-security universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-security multiverse</span><br></pre></td></tr></table></figure>

<h2 id="7-重新升级apt-get"><a href="#7-重新升级apt-get" class="headerlink" title="7. 重新升级apt-get"></a>7. 重新升级apt-get<a href="#7-重新升级apt-get" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure>

<h2 id="8-安装wget"><a href="#8-安装wget" class="headerlink" title="8. 安装wget"></a>8. 安装wget<a href="#8-安装wget" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install wget</span><br></pre></td></tr></table></figure>

<h2 id="9-创建并进入安装hadoop的文件目录"><a href="#9-创建并进入安装hadoop的文件目录" class="headerlink" title="9. 创建并进入安装hadoop的文件目录"></a>9. 创建并进入安装hadoop的文件目录<a href="#9-创建并进入安装hadoop的文件目录" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p soft/apache/hadoop/</span><br><span class="line">cd soft/apache/hadoop</span><br></pre></td></tr></table></figure>

<h2 id="10-通过wget下载安装hadoop安装包"><a href="#10-通过wget下载安装Hadoop安装包" class="headerlink" title="10. 通过wget下载安装Hadoop安装包"></a>10. 通过wget下载安装Hadoop安装包<a href="#10-通过wget下载安装hadoop安装包" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://mirrors.ustc.edu.cn/apache/hadoop/common/hadoop-3.3.0/hadoop-3.3.0.tar.gz</span><br></pre></td></tr></table></figure>

<h2 id="11-解压hadoop"><a href="#11-解压hadoop" class="headerlink" title="11. 解压hadoop"></a>11. 解压hadoop<a href="#11-解压hadoop" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -xvzf Hadoop-3.3.0.tar.gz</span><br></pre></td></tr></table></figure>

<h2 id="12-配置环境变量并重启配置文件"><a href="#12-配置环境变量并重启配置文件" class="headerlink" title="12. 配置环境变量并重启配置文件"></a>12. 配置环境变量并重启配置文件<a href="#12-配置环境变量并重启配置文件" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure>

<p>新增以下环境变量：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_291</span><br><span class="line">export HADOOP_HOME=/soft/apache/hadoop/hadoop-3.3.0</span><br><span class="line">export HADOOP_CONFIG_HOME=$HADOOP_HOME/etc/hadoop</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/bin</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/sbin</span><br></pre></td></tr></table></figure>

<p>并重启配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure>

<h2 id="13-创建文件夹并修改配置文件"><a href="#13-创建文件夹并修改配置文件" class="headerlink" title="13. 创建文件夹并修改配置文件"></a>13. 创建文件夹并修改配置文件<a href="#13-创建文件夹并修改配置文件" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd $HADOOP_HOME</span><br><span class="line">mkdir tmp</span><br><span class="line">mkdir namenode</span><br><span class="line">mkdir datanode</span><br></pre></td></tr></table></figure>

<p>修改配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd $HADOOP_CONFIG_HOME</span><br><span class="line">vim core-site.xml</span><br></pre></td></tr></table></figure>

<p>将下面内容替换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line">  you may not use this file except in compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to in writing, software</span><br><span class="line">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License for the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Put site-specific property overrides in this file. --&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;/soft/apache/hadoop/hadoop-3.3.0/tmp&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;fs.default.name&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;hdfs://master:9000&lt;/value&gt;</span><br><span class="line">        &lt;final&gt;true&lt;/final&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>

<p>更改hdfs-site.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim hdfs-site.xml</span><br></pre></td></tr></table></figure>

<p>用下面配置替换：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line">  you may not use this file except in compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to in writing, software</span><br><span class="line">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License for the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Put site-specific property overrides in this file. --&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;2&lt;/value&gt;</span><br><span class="line">        &lt;final&gt;true&lt;/final&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;/soft/apache/hadoop/hadoop-3.3.0/namenode&lt;/value&gt;</span><br><span class="line">        &lt;final&gt;true&lt;/final&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.datanode.name.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;/soft/apache/hadoop/hadoop-3.3.0/datanode&lt;/value&gt;</span><br><span class="line">        &lt;final&gt;true&lt;/final&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>

<p>接下来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim mapred-site.xml</span><br></pre></td></tr></table></figure>

<p>使用下面内容替换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line">  you may not use this file except in compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to in writing, software</span><br><span class="line">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License for the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Put site-specific property overrides in this file. --&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;mapred.job.tarcker&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;master:9001&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>

<h2 id="14-修改hadoop环境变量"><a href="#14-修改hadoop环境变量" class="headerlink" title="14. 修改hadoop环境变量"></a>14. 修改hadoop环境变量<a href="#14-修改hadoop环境变量" class="header-anchor">#</a></h2><p>在hadoop的安装目录下，找到<code>hadoop-env.sh</code>文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim hadoop-env.sh</span><br></pre></td></tr></table></figure>

<p>在最后添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_291</span><br></pre></td></tr></table></figure>

<p>刷新</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hadoop namenode -format</span><br></pre></td></tr></table></figure>

<h2 id="15-安装ssh"><a href="#15-安装SSH" class="headerlink" title="15. 安装SSH"></a>15. 安装SSH<a href="#15-安装ssh" class="header-anchor">#</a></h2><p>hadoop的环境必须满足ssh免密登陆，先安装ssh</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install net-tools</span><br><span class="line">apt-get install ssh</span><br></pre></td></tr></table></figure>

<p>创建sshd目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p ~/var/run/sshd</span><br></pre></td></tr></table></figure>

<p>生成访问密钥</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~/</span><br><span class="line">ssh-keygen -t rsa -P &#x27;&#x27; -f ~/.ssh/id_rsa</span><br><span class="line">cd .ssh</span><br><span class="line">cat id_rsa.pub &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure>

<p>这一步骤提示安装路径与设置密码时全布直接按回车即可设置成免密。</p>
<h3 id="修改ssh配置"><a href="#修改ssh配置" class="headerlink" title="修改ssh配置"></a>修改ssh配置<a href="#修改ssh配置" class="header-anchor">#</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/ssh/ssh_config</span><br></pre></td></tr></table></figure>

<p>添加,将下面这句话直接添加即可，也可以在文件中找到被注释的这句话去修改。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">StrictHostKeyChecking no #将ask改为no</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>

<p>在末尾添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#禁用密码验证</span><br><span class="line">PasswordAuthentication no</span><br><span class="line">#启用密钥验证</span><br><span class="line">RSAAuthentication yes</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line">AuthorizedKeysFile .ssh/authorized_keys</span><br></pre></td></tr></table></figure>

<p>最后使用下面语句测试是否免密登陆，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh localhost</span><br></pre></td></tr></table></figure>

<p>当出现报错时，考虑输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/init.d/ssh restart</span><br></pre></td></tr></table></figure>

<p>为了避免踩坑，先提前设置,进入环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure>

<p>增加如下内容并保存：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export HDFS_NAMENODE_USER=root</span><br><span class="line">export HDFS_DATANODE_USER=root</span><br><span class="line">export HDFS_SECONDARYNAMENODE_USER=root</span><br><span class="line">export YARN_RESOURCEMANAGER_USER=root</span><br><span class="line">export YARN_NODEMANAGER_USER=root</span><br></pre></td></tr></table></figure>

<p>使配置生效</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<h2 id="16-导出镜像"><a href="#16-导出镜像" class="headerlink" title="16. 导出镜像"></a>16. 导出镜像<a href="#16-导出镜像" class="header-anchor">#</a></h2><p>至此镜像已经配置完成，退出容器，将配置好的镜像保存，其中xxxx为刚刚操作的容器的id，可以使用docker ps -a查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker commit xxxx ubuntu:hadoop</span><br></pre></td></tr></table></figure>

<p>此时ubuntu_hadoop就是最终配置好的包含hadoop的镜像。</p>
<h2 id="17-集群测试"><a href="#17-集群测试" class="headerlink" title="17. 集群测试"></a>17. 集群测试<a href="#17-集群测试" class="header-anchor">#</a></h2><p>依次构建并启动三个以刚刚生成的镜像为基本镜像的容器，依次命名为master 、slave1、slave2，并将master做端口映射（提示：容器要处于运行状态，生成容器后使用ctrl+P+Q退出可以使容器保持后台运行。）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it  -h master --name=master -p 9870:9870 -p 8088:8088 -p 9000:9000 ubuntu:hadoop </span><br><span class="line">docker run -it  -h slave1 --name=slave1 ubuntu:hadoop </span><br><span class="line">docker run -it  -h slave2 --name=slave2 ubuntu:hadoop </span><br></pre></td></tr></table></figure>

<p>修改每个容器的host文件<br>对matser、slave1、slave2里的host文件，分别加入其他两个容器的ip</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1       localhost</span><br><span class="line">::1     localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0 ip6-localnet</span><br><span class="line">ff00::0 ip6-mcastprefix</span><br><span class="line">ff02::1 ip6-allnodes</span><br><span class="line">ff02::2 ip6-allrouters</span><br><span class="line">172.17.0.2      master</span><br><span class="line">172.17.0.3      slave1</span><br><span class="line">172.17.0.4      slave2 ###根据实际修改</span><br></pre></td></tr></table></figure>

<h3 id="修改master中slaves文件"><a href="#修改master中slaves文件" class="headerlink" title="修改master中slaves文件"></a>修改master中slaves文件<a href="#修改master中slaves文件" class="header-anchor">#</a></h3><p>注意，在hadoop3.3.0版本中并不是修改slaves文件，而是修改workers文件。此处为3.3.0版本的一些变化。<br>老版本（自行查找hadoop版本中已存在文件是slaves还是iworkers）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd $HADOOP_CONFIG_HOME/</span><br><span class="line">vim workers</span><br></pre></td></tr></table></figure>

<p>将其他两个节点名称加入文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">slave1</span><br><span class="line">slave2</span><br></pre></td></tr></table></figure>

<h3 id="启动hadoop"><a href="#启动hadoop" class="headerlink" title="启动hadoop"></a>启动hadoop<a href="#启动hadoop" class="header-anchor">#</a></h3><p>此时报错的话，可在每个节点运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>



<h1 id="reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference<a href="#reference" class="header-anchor">#</a></h1><ol>
<li><a href="https://blog.csdn.net/weixin_43993764/article/details/113405025">https://blog.csdn.net/weixin_43993764/article/details/113405025</a></li>
<li><a href="https://blog.csdn.net/u013015629/article/details/70045809">https://blog.csdn.net/u013015629/article/details/70045809</a></li>
</ol>
<!--
&emsp;&emsp;<font face="黑体" size=10>16. 我是黑体字</font>
-->

<div style="display:none">这是一段注释</div>]]></content>
  </entry>
  <entry>
    <title>WSL2安装Ubuntu</title>
    <url>/article/WSL2_Ubuntu/</url>
    <content><![CDATA[<h1 id="系统更新至预览版"><a href="#系统更新至预览版" class="headerlink" title="系统更新至预览版"></a>系统更新至预览版<a href="#系统更新至预览版" class="header-anchor">#</a></h1><ol>
<li><p>加入Windows Insider Program</p>
<p> <a href="https://insider.windows.com/en-us/getting-started">链接</a></p>
<p> <img src="wip.png" alt="图片" title="打开后显示"></p>
</li>
<li><p>注册加入完成后，前往【开始】菜单&gt;【设置】&gt;【更新和安全】&gt;【Windows 预览体验计划】，选择【开始】，然后点击【确认】。</p>
<p> <img src="update.png" alt="图片" title="打开后显示"><br> <img src="choose.png" alt="图片" title="打开后显示"><br> <img src="microsoft_login.png" alt="图片" title="打开后显示"></p>
</li>
<li><p>漫长的等待，等待过程中如果出现太久旋转没动静，可反复取消-选择账户，几次下来一般就可以了。随后使用加入Windows Insider Program时注册的账号密码，之后出现</p>
<p> <img src="dev.png" alt="图片" title="打开后显示"><br> 选择dev渠道，然后立即重启。</p>
</li>
<li><p>前往【开始】菜单&gt;【设置】&gt;【更新和安全】&gt;【Windows 更新】，下载更新完window，<br>选择【检查更新】，然后耐心等待最新 Windows 10 预览版的下载和安装。</p>
<p> <img src="update_wid.png" alt="图片" title="打开后显示"></p>
</li>
<li><p>检查系统更新成功与否</p>
<p> win+R-&gt;winver:<br> <img src="version.png" alt="图片" title="打开后显示"><br> 确认这里的os内部版本和第四步下载的版本一致</p>
 <span id="more"></span></li>
</ol>
<h1 id="安装驱动"><a href="#安装驱动" class="headerlink" title="安装驱动"></a>安装驱动<a href="#安装驱动" class="header-anchor">#</a></h1><ol>
<li><p>前往<a href="https://developer.nvidia.com/cuda/wsl">链接</a></p>
<p> <img src="driver.png" alt="图片" title="打开后显示"></p>
</li>
<li><p>下载完成后，正常win程序安装</p>
</li>
</ol>
<h1 id="安装wsl2"><a href="#安装WSL2" class="headerlink" title="安装WSL2"></a>安装WSL2<a href="#安装wsl2" class="header-anchor">#</a></h1><p>按照官方说法，使用预览版会有简单操作，但我是在未使用预览版时安装的，所以仅供参考。</p>
<ol>
<li><p>管理员身份运行power shell</p>
<p> 如果出现以下问题：<br> <img src="problem.png" alt="图片" title="打开后显示"><br> 则执行<code>set-ExecutionPolicy RemoteSigned</code><br> 成功结果为：<br> <img src="success.png" alt="图片" title="打开后显示"><br> 如果没有出现上述问题，则执行<code>dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</code>开启子系统<br> <img src="subsystem.png" alt="图片" title="打开后显示"><br> 然后，执行<code>dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</code>开启虚拟机<br> <img src="vm.png" alt="图片" title="打开后显示"><br> <font color="red">随后重启计算机！</font></p>
</li>
<li><p>安装WSL内核更新包<a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi">链接</a></p>
</li>
<li><p>将wsl2设置为默认版本：<code>set --set-default-version 2</code></p>
</li>
</ol>
<h1 id="安装ubuntu1804"><a href="#安装ubuntu18-04" class="headerlink" title="安装ubuntu18.04"></a>安装ubuntu18.04<a href="#安装ubuntu1804" class="header-anchor">#</a></h1><ol>
<li><p>打开Microsoft store,搜索ubuntu18,点击获取，等待下载安装，安装完成后，点击右上角的启动按钮，会出现下面操作；设置好用户名及密码，子系统安装完成。<br><img src="ubuntu.png" alt="图片" title="打开后显示"></p>
</li>
<li><p>安装完成后，运行<code>wsl --list --verbose</code><br><img src="wsl_lv.png" alt="图片" title="打开后显示"></p>
</li>
<li><p>运行</p>
<ul>
<li>点击ubuntu图标<br>  <img src="run_1.png" alt="图片" title="打开后显示"></li>
<li>在power shell中运行<code>wsl</code><br>  <img src="run_2.png" alt="图片" title="打开后显示"></li>
</ul>
</li>
</ol>
<h1 id="安装cuda-toolkit在ubuntu环境下"><a href="#安装cuda-toolkit-在ubuntu环境下" class="headerlink" title="安装cuda toolkit(在ubuntu环境下)"></a>安装cuda toolkit(在ubuntu环境下)<a href="#安装cuda-toolkit在ubuntu环境下" class="header-anchor">#</a></h1><ol>
<li><p>配置cuda网络仓库<br> 依次执行</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub</span><br><span class="line"></span><br><span class="line">sudo sh -c &#x27;echo &quot;deb http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64 /&quot; &gt; /etc/apt/sources.list.d/cuda.list&#x27;</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></li>
<li><p>安装cuda</p>
<p> 执行<code>sudo apt-get install -y cuda-toolkit-11-0</code></p>
</li>
</ol>
<h1 id="安装docker和nvidia-docker"><a href="#安装docker和nvidia-docker" class="headerlink" title="安装docker和nvidia-docker"></a>安装docker和nvidia-docker<a href="#安装docker和nvidia-docker" class="header-anchor">#</a></h1><ol>
<li><p>安装docker-ce:<code>curl https://get.docker.com | sh</code></p>
</li>
<li><p>安装nvidia-docker2:</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">distribution=$(. /etc/os-release;echo $ID$VERSION_ID)</span><br><span class="line"></span><br><span class="line">curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -</span><br><span class="line"></span><br><span class="line">curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list</span><br><span class="line"></span><br><span class="line">curl -s -L https://nvidia.github.io/libnvidia-container/experimental/$distribution/libnvidia-container-experimental.list | sudo tee /etc/apt/sources.list.d/libnvidia-container-experimental.list</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get install -y nvidia-docker2</span><br><span class="line"></span><br><span class="line">sudo gpasswd -a username docker ###username 为设置的Ubuntu用户名</span><br><span class="line"></span><br><span class="line">newgrp docker</span><br></pre></td></tr></table></figure></li>
<li><p>完成安装</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo service docker stop</span><br><span class="line"></span><br><span class="line">sudo service docker start</span><br></pre></td></tr></table></figure></li>
<li><p>验证安装<br> 执行<code>docker run --runtime=nvidia  --rm -it --name tensorflow-1.14.0 tensorflow/tensorflow:1.14.0-gpu-py3</code></p>
<p> 然后执行</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python</span><br><span class="line">import tensorflow as tf</span><br><span class="line">print(tf.test.is_gpu_available()) ###输出True</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference<a href="#reference" class="header-anchor">#</a></h1><ol>
<li><a href="https://docs.nvidia.com/cuda/wsl-user-guide/index.html">CUDA on WSL :: CUDA Toolkit Documentation (nvidia.com)</a></li>
</ol>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>win10</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>decorator</title>
    <url>/article/decorator/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E8%A3%85%E9%A5%B0%E5%99%A8">什么是装饰器</a></li>
<li><a href="#%E7%AE%80%E5%8D%95%E8%A3%85%E9%A5%B0%E5%99%A8">简单装饰器</a></li>
<li><a href="#%E9%AB%98%E7%BA%A7%E8%A3%85%E9%A5%B0%E5%99%A8">高级装饰器</a><ul>
<li><a href="#%E5%9F%BA%E4%BA%8E%E5%87%BD%E6%95%B0%E7%9A%84%E5%B8%A6%E5%8F%82%E8%A3%85%E9%A5%B0%E5%99%A8">基于函数的带参装饰器</a></li>
<li><a href="#%E5%9F%BA%E4%BA%8E%E7%B1%BB%E7%9A%84%E4%B8%8D%E5%B8%A6%E5%8F%82%E8%A3%85%E9%A5%B0%E5%99%A8">基于类的不带参装饰器</a></li>
<li><a href="#%E5%9F%BA%E4%BA%8E%E7%B1%BB%E7%9A%84%E5%B8%A6%E5%8F%82%E6%95%B0%E8%A3%85%E9%A5%B0%E5%99%A8">基于类的带参数装饰器</a></li>
</ul>
</li>
<li><a href="#%E5%86%85%E7%BD%AE%E8%A3%85%E9%A5%B0%E5%99%A8">内置装饰器</a><ul>
<li><a href="#classmethod">@classmethod</a></li>
<li><a href="#staticmethod">@staticmethod</a></li>
<li><a href="#property">@property</a></li>
<li><a href="#wraps">@wraps</a></li>
<li><a href="#python%E5%86%85%E7%BD%AE%E7%B1%BB%E5%B1%9E%E6%80%A7">python内置类属性</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99">参考资料</a></li>
</ul>
<!-- tocstop -->

</div>





<h1 id="什么是装饰器"><a href="#什么是装饰器" class="headerlink" title="什么是装饰器"></a>什么是装饰器<a href="#什么是装饰器" class="header-anchor">#</a></h1><p>一个decorator只是一个带有一个函数作为参数并返回一个替换函数的闭包。<br>简单示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 未使用装饰器时</span><br><span class="line">def outer(some_func):</span><br><span class="line">	def inner():</span><br><span class="line">		print (&quot;before some_func&quot;)</span><br><span class="line">		ret = some_func() # 1</span><br><span class="line">		return ret + 1</span><br><span class="line">	return inner</span><br><span class="line">def foo():</span><br><span class="line">	return 1</span><br><span class="line">decorated = outer(foo)</span><br><span class="line">decorated()</span><br><span class="line"></span><br><span class="line">#使用装饰器时</span><br><span class="line">def outer(some_func):</span><br><span class="line">	def inner():</span><br><span class="line">		print (&quot;before some_func&quot;)</span><br><span class="line">		ret = some_func() # 1</span><br><span class="line">		return ret + 1</span><br><span class="line">	return inner</span><br><span class="line">@outer</span><br><span class="line">def foo():</span><br><span class="line">	return 1</span><br><span class="line"></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="简单装饰器"><a href="#简单装饰器" class="headerlink" title="简单装饰器"></a>简单装饰器<a href="#简单装饰器" class="header-anchor">#</a></h1><p>引入装饰器会便于开发，便于代码复用</p>
<p>简单示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def say_hello():</span><br><span class="line">    print(&quot;[DEBUG]: enter say_hello()&quot;)</span><br><span class="line">    print(&quot;hello!&quot;)</span><br><span class="line"></span><br><span class="line">def say_goodbye():</span><br><span class="line">    print( &quot;[DEBUG]: enter say_goodbye()&quot;)</span><br><span class="line">    print( &quot;hello!&quot;)</span><br><span class="line">    </span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    say_hello()</span><br><span class="line">    say_goodbye()</span><br></pre></td></tr></table></figure>

<p>进一步</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def debug():</span><br><span class="line">    import inspect</span><br><span class="line">    caller_name = inspect.stack()[1][3]</span><br><span class="line">    print(&quot;[DEBUG]: enter &#123;&#125;()&quot;.format(caller_name)  ) </span><br><span class="line"></span><br><span class="line">def say_hello():</span><br><span class="line">    debug()</span><br><span class="line">    print(&quot;hello!&quot;)</span><br><span class="line"></span><br><span class="line">def say_goodbye():</span><br><span class="line">    debug()</span><br><span class="line">    print( &quot;goodbye!&quot;)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    say_hello()</span><br><span class="line">    say_goodbye()</span><br></pre></td></tr></table></figure>

<p>但依然每个业务函数都需要调用一次<code>debug()</code>函数</p>
<p>使用装饰器:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def debug(func):</span><br><span class="line">    def wrapper():</span><br><span class="line">        print(&quot;[DEBUG]: enter &#123;&#125;()&quot;.format(func.__name__))</span><br><span class="line">        return func()</span><br><span class="line">    return wrapper</span><br><span class="line"></span><br><span class="line">@debug</span><br><span class="line">def say_hello():</span><br><span class="line">    print( &quot;hello!&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这个装饰器依然存在一个问题， 不能引入参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def debug(func):</span><br><span class="line">    def wrapper(something):  # 指定一毛一样的参数</span><br><span class="line">        print &quot;[DEBUG]: enter &#123;&#125;()&quot;.format(func.__name__)</span><br><span class="line">        return func(something)</span><br><span class="line">    return wrapper  # 返回包装过函数</span><br><span class="line"></span><br><span class="line">@debug</span><br><span class="line">def say(something):</span><br><span class="line">    print &quot;hello &#123;&#125;!&quot;.format(something)</span><br></pre></td></tr></table></figure>

<p>那么如果参数不定的时候呢？<code>(*args, **kwargs)</code>就可以派上用场了，其中<code>*args</code>只是表明在函数定义中位置参数应该保存在变量<code>args</code>中, *表示<code>iterables</code>和位置参数,**表示dictionaries &amp; key/value对</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def debug(func):</span><br><span class="line">    def wrapper(*args, **kwargs):  # 指定宇宙无敌参数</span><br><span class="line">        print &quot;[DEBUG]: enter &#123;&#125;()&quot;.format(func.__name__)</span><br><span class="line">        print &#x27;Prepare and say...&#x27;,</span><br><span class="line">        return func(*args, **kwargs)</span><br><span class="line">    return wrapper  # 返回</span><br><span class="line"></span><br><span class="line">@debug</span><br><span class="line">def say(something):</span><br><span class="line">    print &quot;hello &#123;&#125;!&quot;.format(something)</span><br></pre></td></tr></table></figure>

<p>至此，简单的装饰器完成！</p>
<h1 id="高级装饰器"><a href="#高级装饰器" class="headerlink" title="高级装饰器"></a>高级装饰器<a href="#高级装饰器" class="header-anchor">#</a></h1><h2 id="基于函数的带参装饰器"><a href="#基于函数的带参装饰器" class="headerlink" title="基于函数的带参装饰器"></a>基于函数的带参装饰器<a href="#基于函数的带参装饰器" class="header-anchor">#</a></h2><p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def logging(level): # 传递装饰器参数</span><br><span class="line">    def wrapper(func): # 调用函数名</span><br><span class="line">        def inner_wrapper(*args, **kwargs): # 函数参数</span><br><span class="line">            print &quot;[&#123;level&#125;]: enter function &#123;func&#125;()&quot;.format(</span><br><span class="line">                level=level,</span><br><span class="line">                func=func.__name__)</span><br><span class="line">            return func(*args, **kwargs)</span><br><span class="line">        return inner_wrapper</span><br><span class="line">    return wrapper</span><br><span class="line"></span><br><span class="line">@logging(level=&#x27;INFO&#x27;)</span><br><span class="line">def say(something):</span><br><span class="line">    print &quot;say &#123;&#125;!&quot;.format(something)</span><br><span class="line"></span><br><span class="line"># 如果没有使用@语法，等同于</span><br><span class="line"># say = logging(level=&#x27;INFO&#x27;)(say)</span><br><span class="line"></span><br><span class="line">@logging(level=&#x27;DEBUG&#x27;)</span><br><span class="line">def do(something):</span><br><span class="line">    print &quot;do &#123;&#125;...&quot;.format(something)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    say(&#x27;hello&#x27;)</span><br><span class="line">    do(&quot;my work&quot;)</span><br></pre></td></tr></table></figure>

<p>你可以这么理解，当带参数的装饰器被打在某个函数上时，比如<code>@logging(level=&#39;DEBUG&#39;)</code>，它其实是一个函数，会马上被执行，只要这个它返回的结果是一个装饰器时，那就没问题。</p>
<h2 id="基于类的不带参装饰器"><a href="#基于类的不带参装饰器" class="headerlink" title="基于类的不带参装饰器"></a>基于类的不带参装饰器<a href="#基于类的不带参装饰器" class="header-anchor">#</a></h2><p>装饰器函数其实是这样一个接口约束，它必须接受一个callable对象作为参数，然后返回一个callable对象。在Python中一般callable对象都是函数，但也有例外。只要某个对象重载了<code>__call__()</code>方法，那么这个对象就是callable的。</p>
<p>装饰器要求接受一个callable对象，并返回一个callable对象（不太严谨，详见后文）。那么用类来实现也是也可以的。我们可以让类的构造函数<code>__init__()</code>接受一个函数，然后重载<code>__call__()</code>并返回一个函数，也可以达到装饰器函数的效果。</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class logging(object):</span><br><span class="line">    def __init__(self, func): # 接受函数</span><br><span class="line">        self.func = func</span><br><span class="line"></span><br><span class="line">    def __call__(self, *args, **kwargs): # 函数参数</span><br><span class="line">        print &quot;[DEBUG]: enter function &#123;func&#125;()&quot;.format(</span><br><span class="line">            func=self.func.__name__)</span><br><span class="line">        return self.func(*args, **kwargs)</span><br><span class="line">@logging</span><br><span class="line">def say(something):</span><br><span class="line">    print &quot;say &#123;&#125;!&quot;.format(something)</span><br></pre></td></tr></table></figure>



<h2 id="基于类的带参数装饰器"><a href="#基于类的带参数装饰器" class="headerlink" title="基于类的带参数装饰器"></a>基于类的带参数装饰器<a href="#基于类的带参数装饰器" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class logging(object):</span><br><span class="line">    def __init__(self, level=&#x27;INFO&#x27;):</span><br><span class="line">        self.level = level</span><br><span class="line">        </span><br><span class="line">    def __call__(self, func): # 接受函数</span><br><span class="line">        def wrapper(*args, **kwargs):</span><br><span class="line">            print &quot;[&#123;level&#125;]: enter function &#123;func&#125;()&quot;.format(</span><br><span class="line">                level=self.level,</span><br><span class="line">                func=func.__name__)</span><br><span class="line">            func(*args, **kwargs)</span><br><span class="line">        return wrapper  #返回函数</span><br><span class="line"></span><br><span class="line">@logging(level=&#x27;INFO&#x27;)</span><br><span class="line">def say(something):</span><br><span class="line">    print &quot;say &#123;&#125;!&quot;.format(something)</span><br></pre></td></tr></table></figure>



<h1 id="内置装饰器"><a href="#内置装饰器" class="headerlink" title="内置装饰器"></a>内置装饰器<a href="#内置装饰器" class="header-anchor">#</a></h1><h2 id="classmethod"><a href="#classmethod" class="headerlink" title="@classmethod"></a>@classmethod<a href="#classmethod" class="header-anchor">#</a></h2><p>类方法，不需要实例化，也不需要self参数，需要一个cls参数，可以用类名调用，也可以用对象来调用。</p>
<p>原则上，类方法是将类本身作为对象进行操作的方法。假设有个方法，且这个方法在逻辑上采用类本身作为对象来调用更合理，那么这个方法就可以定义为类方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class A:</span><br><span class="line">    &quot;&quot;&quot;docstring for A&quot;&quot;&quot;</span><br><span class="line">    # 类变量v</span><br><span class="line">    v = 0</span><br><span class="line"> </span><br><span class="line">    def __init__(self):</span><br><span class="line">        # __init__定义的为实例变量，属于类的实例</span><br><span class="line">        self.my_v = 10000000</span><br><span class="line"> </span><br><span class="line">    # 类方法需要使用@classmethod装饰器定义</span><br><span class="line">    @classmethod</span><br><span class="line">    # 类方法至少有一个形参,第一个形参用于绑定类,约定为:&#x27;cls&#x27;</span><br><span class="line">    def get_v(cls):</span><br><span class="line">        &quot;&quot;&quot;此方法为类方法,cls用于绑定调用此方法的类;此方法用于返回类变量v的值&quot;&quot;&quot;</span><br><span class="line">        return cls.v</span><br><span class="line"> </span><br><span class="line">    @classmethod</span><br><span class="line">    def set_v(cls, value):</span><br><span class="line">        cls.v = value</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    # 通过类实例来调用类方法</span><br><span class="line">    print(A.get_v())</span><br><span class="line">    A.set_v(100)</span><br><span class="line">    print(A.get_v())</span><br><span class="line"> </span><br><span class="line">    # 通过对象实例调用类方法</span><br><span class="line">    a = A()</span><br><span class="line">    print(a.get_v())</span><br><span class="line">    a.set_v(200)</span><br><span class="line">    print(a.get_v())</span><br><span class="line"> </span><br><span class="line">    # 访问实例属性</span><br><span class="line">    print(a.my_v)</span><br></pre></td></tr></table></figure>



<h2 id="staticmethod"><a href="#staticmethod" class="headerlink" title="@staticmethod"></a>@staticmethod<a href="#staticmethod" class="header-anchor">#</a></h2><p>静态方法，不需要实例化，不需要self和cls等参数，就跟使用普通的函数一样，只是封装在类中</p>
<p>静态方法是类中的函数，不需要实例。静态方法主要是用来存放逻辑性的代码，逻辑上属于类，但是和类本身没有关系，也就是说在静态方法中，不会涉及到类中的属性和方法的操作。可以理解为，静态方法是个独立的、单纯的函数，它仅仅托管于某个类的名称空间中，便于使用和维护。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Student:</span><br><span class="line">    &quot;&quot;&quot;描述学生的信息&quot;&quot;&quot;</span><br><span class="line">    count = 0</span><br><span class="line"> </span><br><span class="line">    def __init__(self, name, age, score):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.score = score</span><br><span class="line">        self.__class__.count += 1</span><br><span class="line"> </span><br><span class="line">    def print_info(self):</span><br><span class="line">        print(&quot;&#123;&#125;: age=&#123;&#125;, score=&#123;&#125;&quot;.format(self.name, self.age, self.score))</span><br><span class="line"> </span><br><span class="line">    @classmethod</span><br><span class="line">    def get_stu_number(cls):</span><br><span class="line">        &quot;&quot;&quot;只访问类变量，使用类方法即可&quot;&quot;&quot;</span><br><span class="line">        return cls.count</span><br><span class="line"> </span><br><span class="line">    @staticmethod</span><br><span class="line">    def average(students, kind):</span><br><span class="line">        &quot;&quot;&quot;不需要访问实例变量和类变量，仅仅是定义在类内的函数，使用静态方法即可&quot;&quot;&quot;</span><br><span class="line">        sum_kind = 0</span><br><span class="line">        for student in students:</span><br><span class="line">            sum_kind += student.__dict__[kind]</span><br><span class="line">        average = sum_kind // Student.get_stu_number()</span><br><span class="line">        return average</span><br><span class="line"> </span><br><span class="line">    @staticmethod</span><br><span class="line">    def add_stu_info():</span><br><span class="line">        &quot;&quot;&quot;一次性录入所有的学生信息，并以列表形式返回所有创建好的学生实例&quot;&quot;&quot;</span><br><span class="line">        students = []</span><br><span class="line">        while True:</span><br><span class="line">            name = input(&#x27;输入姓名:&#x27;) or &#x27;q&#x27;</span><br><span class="line">            if name == &#x27;q&#x27;:</span><br><span class="line">                break</span><br><span class="line">            age = int(input(&#x27;输入年龄:&#x27;))</span><br><span class="line">            score = int(input(&#x27;输入成绩:&#x27;))</span><br><span class="line">            student = Student(name, age, score)</span><br><span class="line">            students.append(student)</span><br><span class="line">        return students</span><br><span class="line"> </span><br><span class="line">    @classmethod</span><br><span class="line">    def remove_student(cls, name, students):</span><br><span class="line">        &quot;&quot;&quot;根据姓名删除列表中的学生&quot;&quot;&quot;</span><br><span class="line">        for student in students:</span><br><span class="line">            if student.name.lower() == name.lower():</span><br><span class="line">                stu_list.remove(student)</span><br><span class="line">                cls.count -= 1</span><br><span class="line"></span><br><span class="line">&gt;&gt; Student.average(stu_list, &#x27;score&#x27;)</span><br><span class="line">95</span><br><span class="line">&gt;&gt; Student.average(stu_list, &#x27;age&#x27;)</span><br><span class="line">13</span><br></pre></td></tr></table></figure>



<h2 id="property"><a href="#property" class="headerlink" title="@property"></a>@property<a href="#property" class="header-anchor">#</a></h2><p>属性方法，主要作用是将一个操作方法封装成一个属性,用户用起来就和操作普通属性完全一致,非常简单.定义时，在实例方法的基础上添加@property装饰器，并且只有一个self参数，调用时，不需要括号</p>
<p>@property 是经典类中的一种装饰器，新式类中具有三种:</p>
<ol>
<li>@property获取属性</li>
<li>@方法名.setter 修改属性</li>
<li>@方法名.deleter 删除属性</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Goods(object):</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        # 原价</span><br><span class="line">        self.original_price = 100</span><br><span class="line">        # 折扣</span><br><span class="line">        self.discount = 0.8</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    def price(self):</span><br><span class="line">        # 实际价格 = 原价*折扣</span><br><span class="line">        new_price = self.original_price*self.discount</span><br><span class="line">        return new_price</span><br><span class="line"></span><br><span class="line">    @price.setter</span><br><span class="line">    def price(self,value):</span><br><span class="line">        self.original_price = value</span><br><span class="line"></span><br><span class="line">    @price.deleter</span><br><span class="line">    def price(self):</span><br><span class="line">        del self.original_price</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = Goods()</span><br><span class="line"># print(obj.price)</span><br><span class="line">obj.price = 200</span><br><span class="line">print(obj.price)</span><br><span class="line">del obj.price  # 删除了类中的price属性若再次调用就会报错</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="wraps"><a href="#wraps" class="headerlink" title="@wraps"></a>@wraps<a href="#wraps" class="header-anchor">#</a></h2><p>Python装饰器（decorator）在实现的时候，被装饰后的函数其实已经是另外一个函数了（函数名等函数属性会发生改变），为了不影响，Python的functools包中提供了一个叫wraps的decorator来消除这样的副作用。写一个decorator的时候，最好在实现之前加上functools的wrap，它能保留原有函数的名称和docstring。</p>
<p>不加wraps:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#coding=utf-8</span><br><span class="line"># -*- coding=utf-8 -*- </span><br><span class="line">from functools import wraps   </span><br><span class="line">def my_decorator(func):</span><br><span class="line">    def wrapper(*args, **kwargs):</span><br><span class="line">        &#x27;&#x27;&#x27;decorator&#x27;&#x27;&#x27;</span><br><span class="line">        print(&#x27;Calling decorated function...&#x27;)</span><br><span class="line">        return func(*args, **kwargs)</span><br><span class="line">    return wrapper  </span><br><span class="line"> </span><br><span class="line">@my_decorator </span><br><span class="line">def example():</span><br><span class="line">    &quot;&quot;&quot;Docstring&quot;&quot;&quot; </span><br><span class="line">    print(&#x27;Called example function&#x27;)</span><br><span class="line">print(example.__name__, example.__doc__)</span><br><span class="line"></span><br><span class="line"># 输出</span><br><span class="line">(&#x27;wrapper&#x27;, &#x27;decorator&#x27;)</span><br><span class="line">[Finished in 0.2s]</span><br></pre></td></tr></table></figure>

<p>加上后：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#coding=utf-8</span><br><span class="line"># -*- coding=utf-8 -*- </span><br><span class="line">from functools import wraps   </span><br><span class="line">def my_decorator(func):</span><br><span class="line">    @wraps(func)</span><br><span class="line">    def wrapper(*args, **kwargs):</span><br><span class="line">        &#x27;&#x27;&#x27;decorator&#x27;&#x27;&#x27;</span><br><span class="line">        print(&#x27;Calling decorated function...&#x27;)</span><br><span class="line">        return func(*args, **kwargs)</span><br><span class="line">    return wrapper  </span><br><span class="line"> </span><br><span class="line">@my_decorator </span><br><span class="line">def example():</span><br><span class="line">    &quot;&quot;&quot;Docstring&quot;&quot;&quot; </span><br><span class="line">    print(&#x27;Called example function&#x27;)</span><br><span class="line">print(example.__name__, example.__doc__)</span><br><span class="line"># 输出</span><br><span class="line">(&#x27;example&#x27;, &#x27;Docstring&#x27;)</span><br><span class="line">[Finished in 0.5s]</span><br></pre></td></tr></table></figure>



<h2 id="python内置类属性"><a href="#python内置类属性" class="headerlink" title="python内置类属性"></a>python内置类属性<a href="#python内置类属性" class="header-anchor">#</a></h2><ol>
<li><p><code>__dict__ </code>: 类的属性（包含一个字典，由类的数据属性组成）</p>
</li>
<li><p><code>__doc__</code> :类的文档字符串</p>
</li>
<li><p><code>__name__</code>: 类名</p>
</li>
<li><p><code>__module__</code>: 类定义所在的模块（类的全名是’<strong>main</strong>.className’，如果类位于一个导入模块mymod中，那么className.<strong>module</strong> 等于 mymod）</p>
</li>
<li><p><code>__bases__</code> : 类的所有父类构成元素（包含了一个由所有父类组成的元组）</p>
</li>
</ol>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料<a href="#参考资料" class="header-anchor">#</a></h1><p><a href="https://www.cnblogs.com/cicaday/p/python-decorator.html">详解Python的装饰器</a></p>
<p><a href="http://ruanyifeng.com/blog/2017/02/fp-tutorial.html">函数式编程入门</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/269012332">装饰器八种写法</a></p>
]]></content>
  </entry>
  <entry>
    <title>coroutine</title>
    <url>/article/coroutine/</url>
    <content><![CDATA[<h3 id="asyncio-yield-from"><a href="#asyncio-yield-from" class="headerlink" title="asyncio + yield from"></a>asyncio + yield from<a href="#asyncio-yield-from" class="header-anchor">#</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#-*- coding:utf8 -*-</span><br><span class="line">import asyncio</span><br><span class="line"></span><br><span class="line">@asyncio.coroutine</span><br><span class="line">def test(i):</span><br><span class="line">    print(&#x27;test_1&#x27;, i)</span><br><span class="line">    r = yield from asyncio.sleep(1)</span><br><span class="line">    print(&#x27;test_2&#x27;, i)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    tasks = [test(i) for i in range(3)]</span><br><span class="line">    loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line">    loop.close()</span><br></pre></td></tr></table></figure>

<p><code>@asyncio.coroutine</code>把一个generator标记为coroutine类型，然后就把这个coroutine扔到EventLoop中执行。test()会首先打印出test_1，然后<code>yield from</code>语法可以让我们方便地调用另一个generator。由于<code>asyncio.sleep()</code>也是一个coroutine，所以线程不会等待<code>asyncio.sleep()</code>，而是直接中断并执行下一个消息循环。当<code>asyncio.sleep()</code>返回时，线程就可以从<code>yield from</code>拿到返回值（此处是None），然后接着执行下一行语句。把<code>asyncio.sleep(1)</code>看成是一个耗时1秒的IO操作，在此期间主线程并未等待，而是去执行EventLoop中其他可以执行的coroutine了，因此可以实现并发执行。</p>
<span id="more"></span>

<h3 id="asyncio-asyncawait"><a href="#asyncio-async-await" class="headerlink" title="asyncio + async/await"></a>asyncio + async/await<a href="#asyncio-asyncawait" class="header-anchor">#</a></h3><p>为了简化并更好地标识异步IO，从Python3.5开始引入了新的语法async和await，可以让coroutine的代码更简洁易读。请注意，async和await是coroutine的新语法，使用新语法只需要做两步简单的替换：</p>
<ul>
<li>把@asyncio.coroutine替换为async</li>
<li>把yield from替换为await</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#-*- coding:utf8 -*-</span><br><span class="line">import asyncio</span><br><span class="line"></span><br><span class="line">async def test(i):</span><br><span class="line">    print(&#x27;test_1&#x27;, i)</span><br><span class="line">    await asyncio.sleep(1)</span><br><span class="line">    print(&#x27;test_2&#x27;, i)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    tasks = [test(i) for i in range(3)]</span><br><span class="line">    loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line">    loop.close()</span><br></pre></td></tr></table></figure>

<h2 id="gevent"><a href="#Gevent" class="headerlink" title="Gevent"></a>Gevent<a href="#gevent" class="header-anchor">#</a></h2><p>Gevent是一个基于Greenlet实现的网络库，通过greenlet实现协程。基本思想是一个greenlet就认为是一个协程，当一个greenlet遇到IO操作的时候，比如访问网络，就会自动切换到其他的greenlet，等到IO操作完成，再在适当的时候切换回来继续执行。由于IO操作非常耗时，经常使程序处于等待状态，有了gevent为我们自动切换协程，就保证总有greenlet在运行，而不是等待IO操作。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#-*- coding:utf8 -*-</span><br><span class="line">import gevent</span><br><span class="line"></span><br><span class="line">def test(n):</span><br><span class="line">    for i in range(n):</span><br><span class="line">        print(gevent.getcurrent(), i)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    g1 = gevent.spawn(test, 3)</span><br><span class="line">    g2 = gevent.spawn(test, 3)</span><br><span class="line">    g3 = gevent.spawn(test, 3)</span><br><span class="line"></span><br><span class="line">    g1.join()</span><br><span class="line">    g2.join()</span><br><span class="line">    g3.join()</span><br></pre></td></tr></table></figure>

<p>可以看到3个greenlet是依次运行而不是交替运行。要让greenlet交替运行，可以通过<code>gevent.sleep()</code>交出控制权:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def test(n):</span><br><span class="line">    for i in range(n):</span><br><span class="line">        print(gevent.getcurrent(), i)</span><br><span class="line">        gevent.sleep(1)</span><br></pre></td></tr></table></figure>

<p>当然在实际的代码里，我们不会用<code>gevent.sleep()</code>去切换协程，而是在执行到IO操作时gevent会自动完成，所以gevent需要将Python自带的一些标准库的运行方式由阻塞式调用变为协作式运行。这一过程在启动时通过monkey patch完成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#-*- coding:utf8 -*-</span><br><span class="line">from gevent import monkey; monkey.patch_all()</span><br><span class="line">from urllib import request</span><br><span class="line">import gevent</span><br><span class="line"></span><br><span class="line">def test(url):</span><br><span class="line">    print(&#x27;Get: %s&#x27; % url)</span><br><span class="line">    response = request.urlopen(url)</span><br><span class="line">    content = response.read().decode(&#x27;utf8&#x27;)</span><br><span class="line">    print(&#x27;%d bytes received from %s.&#x27; % (len(content), url))</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    gevent.joinall([</span><br><span class="line">        gevent.spawn(test, &#x27;http://httpbin.org/ip&#x27;),</span><br><span class="line">        gevent.spawn(test, &#x27;http://httpbin.org/uuid&#x27;),</span><br><span class="line">        gevent.spawn(test, &#x27;http://httpbin.org/user-agent&#x27;)</span><br><span class="line">    ])</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[CONSUMER] start&quot;</span>)</span><br><span class="line">    r = <span class="string">&#x27;start&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        n = <span class="keyword">yield</span> r</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> n:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;n is empty&quot;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[CONSUMER] Consumer is consuming %s&quot;</span> % n)</span><br><span class="line">        r = <span class="string">&quot;200 ok&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span>(<span class="params">c</span>):</span></span><br><span class="line">    <span class="comment"># 启动generator</span></span><br><span class="line">    start_value = c.send(<span class="literal">None</span>)</span><br><span class="line">    <span class="built_in">print</span>(start_value)</span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; <span class="number">3</span>:</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[PRODUCER] Producer is producing %d&quot;</span> % n)</span><br><span class="line">        r = c.send(n)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[PRODUCER] Consumer return: %s&#x27;</span> % r)</span><br><span class="line">    <span class="comment"># 关闭generator</span></span><br><span class="line">    c.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建生成器</span></span><br><span class="line">c = consumer()</span><br><span class="line"><span class="comment"># 传入generator</span></span><br><span class="line">producer(c)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 子生成器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">n</span>):</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; n:</span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 委派生成器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_yield_from</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test_yield_from start&quot;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> test(n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test_yield_from end&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> test_yield_from(<span class="number">3</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>



<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料<a href="#参考资料" class="header-anchor">#</a></h1><p><a href="https://zhuanlan.zhihu.com/p/95722895">Python异步IO操作</a></p>
<p><a href="https://www.jianshu.com/p/b5e347b3a17c">Python黑魔法 — 异步IO（ asyncio） 协程 </a></p>
<p><a href="https://cloud.tencent.com/developer/article/1590280">python 多进程和协程配合使用</a></p>
]]></content>
  </entry>
  <entry>
    <title>deeplearning</title>
    <url>/article/deeplearning/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="b31157566198a7e21362b0ec90d5f165701dea308ca35047da2c02452e8594af">1e0e73741e06b0129e61c2ad316ca7f7e5461bce2236a74a72b61150c72cf901</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>加密</tag>
      </tags>
  </entry>
  <entry>
    <title>distributed_torch</title>
    <url>/article/distributed-torch/</url>
    <content><![CDATA[<h1 id="多gpu分配"><a href="#多GPU分配" class="headerlink" title="多GPU分配"></a>多GPU分配<a href="#多gpu分配" class="header-anchor">#</a></h1><p>实现逻辑：寻找（可用显存 / 总显存）最大的的GPU，并优先安排任务</p>
<p>nvidia-smi可以很方便的获得GPU的各种详细信息。</p>
<p>首先获得可用的GPU数目，nvidia-smi -L | grep GPU |wc -l</p>
<p>然后获得GPU各自的总显存，nvidia-smi -q -d Memory | grep -A4 GPU | grep Total | grep -o ‘[0-9]+‘</p>
<p>最后获得GPU各自的可用显存，nvidia-smi -q -d Memory | grep -A4 GPU | grep Free | grep -o ‘[0-9]+‘</p>
<p>将（可用显存 / 总显存）另存为numpy数组，并使用np.argmax返回值即为可用GPU</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def available_GPU(self):</span><br><span class="line">    import subprocess</span><br><span class="line">    import numpy as np</span><br><span class="line">    nDevice = int(subprocess.getoutput(&quot;nvidia-smi -L | grep GPU |wc -l&quot;))</span><br><span class="line">    total_GPU_str = subprocess.getoutput(&quot;nvidia-smi -q -d Memory | grep -A4 GPU | grep Total | grep -o &#x27;[0-9]\+&#x27;&quot;)</span><br><span class="line">    total_GPU = total_GPU_str.split(&#x27;\n&#x27;)</span><br><span class="line">    total_GPU = np.array([int(device_i) for device_i in total_GPU])</span><br><span class="line">    avail_GPU_str = subprocess.getoutput(&quot;nvidia-smi -q -d Memory | grep -A4 GPU | grep Free | grep -o &#x27;[0-9]\+&#x27;&quot;)</span><br><span class="line">    avail_GPU = avail_GPU_str.split(&#x27;\n&#x27;)</span><br><span class="line">    avail_GPU = np.array([int(device_i) for device_i in avail_GPU])</span><br><span class="line">    avail_GPU = avail_GPU / total_GPU</span><br><span class="line">    return np.argmax(avail_GPU)</span><br></pre></td></tr></table></figure>



<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料<a href="#参考资料" class="header-anchor">#</a></h1><p><a href="https://www.cnblogs.com/yh-blog/p/12877922.html">pytorch(分布式)数据并行个人实践总结——DataParallel/DistributedDataParallel </a></p>
<p><a href="https://blog.csdn.net/junqing_wu/article/details/112732338">torch 多进程训练(详细例程)</a></p>
<p><a href="https://blog.csdn.net/qq_34914551/article/details/110576421">PyTorch多进程分布式训练最简单最好用的实施办法</a></p>
<p><a href="https://blog.csdn.net/ZAQ1018472917/article/details/84626040">python并行编程 - GPU篇</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/107230545">Pytorch 分布式、多进程模块测试 </a></p>
<p><a href="https://blog.csdn.net/baidu_36669549/article/details/95094464">多进程GPU调用问题</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/77307505">GPU加速02:超详细Python Cuda零基础入门教程，没有显卡也能学</a></p>
<p><a href="https://blog.csdn.net/sh39o/article/details/90382101">使用python多GPU任务分配</a></p>
<p><a href="https://blog.csdn.net/github_37320188/article/details/100519346">Deep Learning:PyTorch 基于docker 容器的分布式训练实践</a></p>
]]></content>
  </entry>
  <entry>
    <title>generator_and_iterator</title>
    <url>/article/generator-and-iterator/</url>
    <content><![CDATA[<!--toc-->

<h1 id="列表表达式"><a href="#列表表达式" class="headerlink" title="列表表达式"></a>列表表达式<a href="#列表表达式" class="header-anchor">#</a></h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">info = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class="line">a = [i+1 for i in range(10)]</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>



<p>多重循环</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = [(i,j) for i in range(4) for j in range(2)]</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>



<p>多重循环+判断语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls = [(&#x27;x&#x27;,[&#x27;open1&#x27;,&#x27;open1&#x27;,&#x27;open1&#x27;]),(&#x27;y&#x27;,[&#x27;open1&#x27;,&#x27;open1&#x27;,&#x27;open0&#x27;]),(&#x27;z&#x27;,[&#x27;open0&#x27;,&#x27;open0&#x27;,&#x27;open1&#x27;])]</span><br><span class="line"></span><br><span class="line">def find(con):</span><br><span class="line">    return [j for i in con for j in i if j.isdigit()]</span><br><span class="line"> </span><br><span class="line">[w for w,con in ls if find(con)==[&#x27;1&#x27;,&#x27;1&#x27;,&#x27;1&#x27;]]</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器<a href="#生成器" class="header-anchor">#</a></h1><ol>
<li><p>什么是生成器</p>
<p>生成器是一种特殊的迭代器，生成器的出现是为了简化迭代器应用。</p>
<p>生成器的主要思想：对于可以公式自动生成的数字序列，由计算机不断迭代，每次只生成一个数字，从而通过循环遍历生成序列中的所有元素。所以说，生成器产生的不是一个静态的值（比如类似字符串、元组和列表等，都是一次性生成所有值），而是一个动态的数据流。</p>
<p>示例1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = (x**2 for x in range(1,9))</span><br><span class="line">print(type(a))</span><br><span class="line">next(a)</span><br></pre></td></tr></table></figure>

<p>示例2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def gen(x):</span><br><span class="line">	x += 1</span><br><span class="line">	yield x**2</span><br><span class="line">b = gen(0)</span><br><span class="line">print(type(b))</span><br><span class="line">next(b)</span><br></pre></td></tr></table></figure>

<p>可以看到，变量a和b都是生成器，我们不能直接使用a、b，因为它们实际上保存的是一个公式，使用时可以调用内置函数next()，由next(a)、next(b)来动态生成序列中的下一个值。采用生成器的好处是：节省内存空间，特别是对于数据量大的序列，一次性生成所有值将会耗费大量内存，而采用生成器可以极大地节省存储空间。同时，生成器还可以处理无限长的序列。比如，上述实例中，变量b就是一个无限序列，理论上可以永远next(b)，而且每次都是按顺序生成其中的一个值。</p>
<p>可以把生成器看作是一种特殊的函数，它与一般函数最主要的区别就在于生成器函数中有关键字yield。比如，上述实例2，函数中只要有yield关键字，就是一个生成器函数。</p>
</li>
<li><p>生成器怎么用</p>
<p>​    (1). 生成器使用场景</p>
<p>​            当你需要生成一个大型的序列，但又不想因此占用大量的存储空间，提高存储和计算效率。此时，可以考虑用生成器。</p>
<p>​    (2). 生成器的构造</p>
<p>​            主要有两种方式：一是生成器表达式；二是生成器函数。上面实例1就是生成器表达式；实例2其实就是生成器函数。</p>
<p>​    (3). 生成器的使用</p>
<p>​            ①采用for循环</p>
<p>​            ②采用内置函数next()遍历生成器元素</p>
<p>​            ③采用生成器自身方法<code>__next()__</code>循环生成下一个值。</p>
</li>
</ol>
<h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器<a href="#迭代器" class="header-anchor">#</a></h1><ol>
<li><p>什么是迭代器</p>
<p>​    首先了解几个概念：</p>
<p>​        (1). 可迭代对象。可以直接作用于for 循环的对象统称为可迭代对象：Iterable。可以使用isinstance()判断一个对象是否为可Iterable对象。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from collections import Iterable</span><br><span class="line">&gt;&gt;&gt; isinstance(fib(8), Iterable)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; b = [1,2,3,4]</span><br><span class="line">&gt;&gt;&gt; isinstance(b, Iterable)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; c = 8</span><br><span class="line">&gt;&gt;&gt; isinstance(c, Iterable)</span><br><span class="line">False</span><br></pre></td></tr></table></figure>

<p>Python中可直接采用for循环的对象有：一类是集合数据类型，如list，tuple，dict，set，str等；一类是generator，包括生成器表达式和带yield的生成器函数。</p>
<p>​        (2). 迭代器。Python中一个实现了_iter_方法和_next_方法的类对象，就是迭代器。</p>
<pre><code>    (3).迭代器协议：要构造一个迭代器，对象需要提供next()方法，它要么返回迭代中的下一项，要么就引起一个StopIteration异常，以终止迭代。
</code></pre>
</li>
<li><p>迭代器的构造</p>
<p>（1）自定义迭代器类</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Fib(object):</span><br><span class="line">    def __init__(self, max):</span><br><span class="line">        super(Fib, self).__init__()</span><br><span class="line">        self.max = max</span><br><span class="line">    def __iter__(self):</span><br><span class="line">        self.a = 0</span><br><span class="line">        self.b = 1</span><br><span class="line">        return self</span><br><span class="line">    def __next__(self):</span><br><span class="line">        fib = self.a</span><br><span class="line">        if fib &gt; self.max:</span><br><span class="line">            raise StopIteration</span><br><span class="line">        self.a, self.b = self.b, self.a + self.b</span><br><span class="line">        return fib</span><br><span class="line"># 定义一个main函数，循环遍历每一个菲波那切数</span><br><span class="line">def main():</span><br><span class="line">    # 20以内的数</span><br><span class="line">    fib = Fib(20)</span><br><span class="line">    for i in fib:</span><br><span class="line">        print(i)</span><br><span class="line"># 测试</span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>​    （2）通过调用内置函数iter()构造迭代器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; g = iter(range(10))</span><br><span class="line">&gt;&gt;&gt; isinstance(g, Iterator)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(range(10), Iterable)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(range(10), Iterator)</span><br><span class="line">False</span><br></pre></td></tr></table></figure>

<p>注意，不少文章中写道，map、filter等内置函数返回的都是生成器，还有个别资料中说range返回的也是生成器。要检查一个对象是否为迭代器，也可以采用isinstance()判断，所以我们可以进行以下的判断：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from collections import Iterable， Iterator， Generator</span><br><span class="line">&gt;&gt;&gt; d= range(10)</span><br><span class="line">&gt;&gt;&gt; isinstance(d, Iterable)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(d, Iterator)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; e = map(lambda x : x**2, [1,2,4,6,7,8,9])</span><br><span class="line">&gt;&gt;&gt; isinstance(e, Iterable)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(e, Iterator)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(e, Generator)</span><br><span class="line">&gt;&gt;&gt; f = (x**2 for x in [1,2,4,6,7,8,9])</span><br><span class="line">&gt;&gt;&gt; isinstance(f, Iterator)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(f, Generator)</span><br><span class="line">True</span><br></pre></td></tr></table></figure>



<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料<a href="#参考资料" class="header-anchor">#</a></h1><p><a href="https://zhuanlan.zhihu.com/p/122537818">生成器和迭代器总结</a></p>
]]></content>
  </entry>
  <entry>
    <title>logging</title>
    <url>/article/logging/</url>
    <content><![CDATA[<h1 id="按天生成日志"><a href="#按天生成日志" class="headerlink" title="按天生成日志"></a>按天生成日志<a href="#按天生成日志" class="header-anchor">#</a></h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># #coding=utf-8</span><br><span class="line">import logging,os  # 引入logging模块</span><br><span class="line">from com_tools import setting</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from logging import handlers</span><br><span class="line"></span><br><span class="line">class Logger(object):</span><br><span class="line">    level_relations = &#123;</span><br><span class="line">        &#x27;debug&#x27;:logging.DEBUG,</span><br><span class="line">        &#x27;info&#x27;:logging.INFO,</span><br><span class="line">        &#x27;warning&#x27;:logging.WARNING,</span><br><span class="line">        &#x27;error&#x27;:logging.ERROR,</span><br><span class="line">        &#x27;crit&#x27;:logging.CRITICAL</span><br><span class="line">    &#125;#日志级别关系映射</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def __init__(self,filename,level=&#x27;info&#x27;,when=&#x27;MIDNIGHT&#x27;,backCount=7,fmt=&#x27;%(asctime)s - %(pathname)s[line:%(lineno)d] - %(levelname)s: %(message)s&#x27;):</span><br><span class="line">        self.logger = logging.getLogger(filename)</span><br><span class="line">        format_str = logging.Formatter(fmt)#设置日志格式</span><br><span class="line">        self.logger.setLevel(self.level_relations.get(level))#设置日志级别</span><br><span class="line">        sh = logging.StreamHandler()#往控制台输出</span><br><span class="line">        sh.setFormatter(format_str) #设置控制台上显示的格式</span><br><span class="line">        th = handlers.TimedRotatingFileHandler(filename=filename,interval=1,when=when,backupCount=backCount,encoding=&#x27;utf-8&#x27;)#往文件里写入#指定间隔时间自动生成文件的处理器</span><br><span class="line">        #实例化TimedRotatingFileHandler</span><br><span class="line">        #interval是时间间隔，backupCount是备份文件的个数，如果超过这个个数，就会自动删除，when是间隔的时间单位，单位有以下几种：</span><br><span class="line">        # S 秒</span><br><span class="line">        # M 分</span><br><span class="line">        # H 小时、</span><br><span class="line">        # D 天、</span><br><span class="line">        # W 每星期（interval==0时代表星期一）</span><br><span class="line">        # midnight 每天凌晨</span><br><span class="line">        th.suffix = &quot;%Y-%m-%d.log&quot; #设置文件后缀</span><br><span class="line">        th.setFormatter(format_str)#设置文件里写入的格式</span><br><span class="line">        self.logger.addHandler(sh) #把对象加到logger里</span><br><span class="line">        self.logger.addHandler(th)</span><br><span class="line">logfile = os.path.join(setting.logs_path, &quot;daodianmockapi.txt&quot;) # 这个文件的名称就是当天的日志文件，过往的日志文件，会在后面追加文件后缀 th.suffix</span><br><span class="line">logger = Logger(logfile,level=&#x27;debug&#x27;)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    #logger = Logger(&#x27;all.log&#x27;,level=&#x27;debug&#x27;)</span><br><span class="line">    # filename = setting.now_time+ &quot;.txt&quot;</span><br><span class="line">    # logfile = os.path.join(setting.logs_path,filename)</span><br><span class="line">    # logger = Logger(logfile,level=&#x27;debug&#x27;)</span><br><span class="line">    logger.logger.debug(&#x27;debug&#x27;) # 括号内的内容即为日志的文本内容</span><br><span class="line">    logger.logger.info(&#x27;info&#x27;)</span><br><span class="line">    logger.logger.warning(&#x27;警告&#x27;)</span><br><span class="line">    logger.logger.error(&#x27;报错&#x27;)</span><br><span class="line">    logger.logger.critical(&#x27;严重&#x27;)</span><br><span class="line">    #Logger(&#x27;error.log&#x27;, level=&#x27;error&#x27;).logger.error(&#x27;error&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="loguru"><a href="#loguru" class="headerlink" title="loguru"></a>loguru<a href="#loguru" class="header-anchor">#</a></h1><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料<a href="#参考资料" class="header-anchor">#</a></h1><p><a href="https://zhuanlan.zhihu.com/p/144506204">python定时任务最强框架APScheduler详细教程 </a></p>
<p><a href="https://pythondict.com/life-intelligent/tools/loguru/">Loguru — 最强大的 Python 日志记录器</a></p>
]]></content>
  </entry>
  <entry>
    <title>mmdetection</title>
    <url>/article/mmdetection/</url>
    <content><![CDATA[<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料<a href="#参考资料" class="header-anchor">#</a></h1><p><a href="https://www.jianshu.com/p/38f4525246e1">MMDetection 2.5 目标检测（3）：配置修改 - 简书 (jianshu.com)</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/137454940">mmdetection源码分析faster-rcnn，读懂mmdetection - 知乎 (zhihu.com)</a></p>
<p><a href="https://www.jianshu.com/p/924db4d52213">将自己数据集转化成voc数据集格式并用mmdetection训练 - 简书 (jianshu.com)</a></p>
<p><a href="https://blog.csdn.net/qq_33897832/article/details/103995636">(29条消息) （详细教程）mmdetection训练自己的模型，测试，评估_若风的博客-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/qq_41251963/article/details/112940253">(29条消息) 【MMDetection-学习记录】 训练自己的VOC数据集_乐亦亦乐的博客-CSDN博客</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/162730118">MMDetection v2.0 训练自己的数据集 - 知乎 (zhihu.com)</a></p>
<p><a href="https://www.aiuai.cn/aifarm1218.html">mmdetection 模型训练</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/128697076">mmdetection源码解读（一） - 知乎 (zhihu.com)</a></p>
]]></content>
  </entry>
  <entry>
    <title>multiprocessing</title>
    <url>/article/multiprocessing/</url>
    <content><![CDATA[<p>由于python的GIL锁的存在，导致在多线程的时候，同一时间只能有一个线程在cpu上运行，而且是单个cpu上运行，不管cpu有多少核数。如果要充分利用多核cpu的资源，在python中大部分情况下需要使用多进程。</p>
<h1 id="python多进程模块"><a href="#python多进程模块" class="headerlink" title="python多进程模块"></a>python多进程模块<a href="#python多进程模块" class="header-anchor">#</a></h1><p>Python中的多进程是通过multiprocessing包来实现的，和多线程的threading.Thread差不多，它可以利用multiprocessing.Process对象来创建一个进程对象。这个进程对象的方法和线程对象的方法差不多也有start(), run(), join()等方法，其中有一个方法不同Thread线程对象中的守护线程方法是setDeamon，而Process进程对象的守护进程是通过设置daemon属性来完成的。</p>
<span id="more"></span>

<h1 id="多进程的实现方法"><a href="#多进程的实现方法" class="headerlink" title="多进程的实现方法"></a>多进程的实现方法<a href="#多进程的实现方法" class="header-anchor">#</a></h1><ol>
<li><p>方法一</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from multiprocessing import  Process</span><br><span class="line"></span><br><span class="line">def fun1(name):</span><br><span class="line">    print(&#x27;测试%s多进程&#x27; %name)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    process_list = []</span><br><span class="line">    for i in range(5):  #开启5个子进程执行fun1函数</span><br><span class="line">        p = Process(target=fun1,args=(&#x27;Python&#x27;,)) #实例化进程对象</span><br><span class="line">        p.start()</span><br><span class="line">        process_list.append(p)</span><br><span class="line"></span><br><span class="line">    for i in process_list:</span><br><span class="line">        p.join()</span><br><span class="line"></span><br><span class="line">    print(&#x27;结束测试&#x27;)</span><br></pre></td></tr></table></figure>

<p>上面的代码开启了5个子进程去执行函数，我们可以观察结果，是同时打印的，这里实现了真正的并行操作，就是多个CPU同时执行任务。我们知道进程是python中最小的资源分配单元，也就是进程中间的数据，内存是不共享的，每启动一个进程，都要独立分配资源和拷贝访问的数据，所以进程的启动和销毁的代价是比较大了，所以在实际中使用多进程，要根据服务器的配置来设定。</p>
</li>
<li><p>方法二</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from multiprocessing import  Process</span><br><span class="line"></span><br><span class="line">class MyProcess(Process): #继承Process类</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        super(MyProcess,self).__init__()</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        print(&#x27;测试%s多进程&#x27; % self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    process_list = []</span><br><span class="line">    for i in range(5):  #开启5个子进程执行fun1函数</span><br><span class="line">        p = MyProcess(&#x27;Python&#x27;) #实例化进程对象</span><br><span class="line">        p.start()</span><br><span class="line">        process_list.append(p)</span><br><span class="line"></span><br><span class="line">    for i in process_list:</span><br><span class="line">        p.join()</span><br><span class="line"></span><br><span class="line">    print(&#x27;结束测试&#x27;)</span><br></pre></td></tr></table></figure>

<p>Process类的其他方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">构造方法：</span><br><span class="line"></span><br><span class="line">Process([group [, target [, name [, args [, kwargs]]]]])</span><br><span class="line">　　group: 线程组 </span><br><span class="line">　　target: 要执行的方法</span><br><span class="line">　　name: 进程名</span><br><span class="line">　　args/kwargs: 要传入方法的参数</span><br><span class="line"></span><br><span class="line">实例方法：</span><br><span class="line">　　is_alive()：返回进程是否在运行,bool类型。</span><br><span class="line">　　join([timeout])：阻塞当前上下文环境的进程程，直到调用此方法的进程终止或到达指定的timeout（可选参数）。</span><br><span class="line">　　start()：进程准备就绪，等待CPU调度</span><br><span class="line">　　run()：strat()调用run方法，如果实例进程时未制定传入target，这star执行t默认run()方法。</span><br><span class="line">　　terminate()：不管任务是否完成，立即停止工作进程</span><br><span class="line"></span><br><span class="line">属性：</span><br><span class="line">　　daemon：和线程的setDeamon功能一样</span><br><span class="line">　　name：进程名字</span><br><span class="line">　　pid：进程号</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="python-多进程的通信"><a href="#python-多进程的通信" class="headerlink" title="python 多进程的通信"></a>python 多进程的通信<a href="#python-多进程的通信" class="header-anchor">#</a></h1><p>进程是系统独立调度核分配系统资源（CPU、内存）的基本单位，进程之间是相互独立的，每启动一个新的进程相当于把数据进行了一次克隆，子进程里的数据修改无法影响到主进程中的数据，不同子进程之间的数据也不能共享，这是多进程在使用中与多线程最明显的区别。但是难道Python多进程中间难道就是孤立的吗？当然不是，python也提供了多种方法实现了多进程中间的通信和数据共享（可以修改一份数据）</p>
<h3 id="进程对列queue"><a href="#进程对列Queue" class="headerlink" title="进程对列Queue"></a><strong>进程对列Queue</strong><a href="#进程对列queue" class="header-anchor">#</a></h3><p>Queue在多线程中也说到过，在生成者消费者模式中使用，是线程安全的，是生产者和消费者中间的数据管道，那在python多进程中，它其实就是进程之间的数据管道，实现进程通信。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from multiprocessing import Process,Queue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def fun1(q,i):</span><br><span class="line">    print(&#x27;子进程%s 开始put数据&#x27; %i)</span><br><span class="line">    q.put(&#x27;我是%s 通过Queue通信&#x27; %i)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    q = Queue()</span><br><span class="line"></span><br><span class="line">    process_list = []</span><br><span class="line">    for i in range(3):</span><br><span class="line">        p = Process(target=fun1,args=(q,i,))  #注意args里面要把q对象传给我们要执行的方法，这样子进程才能和主进程用Queue来通信</span><br><span class="line">        p.start()</span><br><span class="line">        process_list.append(p)</span><br><span class="line"></span><br><span class="line">    for i in process_list:</span><br><span class="line">        p.join()</span><br><span class="line"></span><br><span class="line">    print(&#x27;主进程获取Queue数据&#x27;)</span><br><span class="line">    print(q.get())</span><br><span class="line">    print(q.get())</span><br><span class="line">    print(q.get())</span><br><span class="line">    print(&#x27;结束测试&#x27;)</span><br></pre></td></tr></table></figure>



<h3 id="管道pipe"><a href="#管道Pipe" class="headerlink" title="管道Pipe"></a><strong>管道Pipe</strong><a href="#管道pipe" class="header-anchor">#</a></h3><p>管道Pipe和Queue的作用大致差不多，也是实现进程间的通信，下面之间看怎么使用吧</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from multiprocessing import Process, Pipe</span><br><span class="line">def fun1(conn):</span><br><span class="line">    print(&#x27;子进程发送消息：&#x27;)</span><br><span class="line">    conn.send(&#x27;你好主进程&#x27;)</span><br><span class="line">    print(&#x27;子进程接受消息：&#x27;)</span><br><span class="line">    print(conn.recv())</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    conn1, conn2 = Pipe() #关键点，pipe实例化生成一个双向管</span><br><span class="line">    p = Process(target=fun1, args=(conn2,)) #conn2传给子进程</span><br><span class="line">    p.start()</span><br><span class="line">    print(&#x27;主进程接受消息：&#x27;)</span><br><span class="line">    print(conn1.recv())</span><br><span class="line">    print(&#x27;主进程发送消息：&#x27;)</span><br><span class="line">    conn1.send(&quot;你好子进程&quot;)</span><br><span class="line">    p.join()</span><br><span class="line">    print(&#x27;结束测试&#x27;)</span><br></pre></td></tr></table></figure>

<h3 id="managers"><a href="#Managers" class="headerlink" title="Managers"></a><strong>Managers</strong><a href="#managers" class="header-anchor">#</a></h3><p>Queue和Pipe只是实现了数据交互，并没实现数据共享，即一个进程去更改另一个进程的数据。那么就要用到Managers</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from multiprocessing import Process, Manager</span><br><span class="line"></span><br><span class="line">def fun1(dic,lis,index):</span><br><span class="line"></span><br><span class="line">    dic[index] = &#x27;a&#x27;</span><br><span class="line">    dic[&#x27;2&#x27;] = &#x27;b&#x27;    </span><br><span class="line">    lis.append(index)    #[0,1,2,3,4,0,1,2,3,4,5,6,7,8,9]</span><br><span class="line">    #print(l)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    with Manager() as manager:</span><br><span class="line">        dic = manager.dict()#注意字典的声明方式，不能直接通过&#123;&#125;来定义</span><br><span class="line">        l = manager.list(range(5))#[0,1,2,3,4]</span><br><span class="line"></span><br><span class="line">        process_list = []</span><br><span class="line">        for i in range(10):</span><br><span class="line">            p = Process(target=fun1, args=(dic,l,i))</span><br><span class="line">            p.start()</span><br><span class="line">            process_list.append(p)</span><br><span class="line"></span><br><span class="line">        for res in process_list:</span><br><span class="line">            res.join()</span><br><span class="line">        print(dic)</span><br><span class="line">        print(l)</span><br></pre></td></tr></table></figure>

<h1 id="进程池"><a href="#进程池" class="headerlink" title="进程池"></a>进程池<a href="#进程池" class="header-anchor">#</a></h1><p>进程池内部维护一个进程序列，当使用时，则去进程池中获取一个进程，如果进程池序列中没有可供使用的进程，那么程序就会等待，直到进程池中有可用进程为止。就是固定有几个进程可以使用。</p>
<p>进程池中有两个方法：</p>
<p>apply：同步，一般不使用</p>
<p>apply_async：异步</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from  multiprocessing import Process,Pool</span><br><span class="line">import os, time, random</span><br><span class="line"></span><br><span class="line">def fun1(name):</span><br><span class="line">    print(&#x27;Run task %s (%s)...&#x27; % (name, os.getpid()))</span><br><span class="line">    start = time.time()</span><br><span class="line">    time.sleep(random.random() * 3)</span><br><span class="line">    end = time.time()</span><br><span class="line">    print(&#x27;Task %s runs %0.2f seconds.&#x27; % (name, (end - start)))</span><br><span class="line"></span><br><span class="line">if __name__==&#x27;__main__&#x27;:</span><br><span class="line">    pool = Pool(5) #创建一个5个进程的进程池</span><br><span class="line"></span><br><span class="line">    for i in range(10):</span><br><span class="line">        pool.apply_async(func=fun1, args=(i,))</span><br><span class="line"></span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    print(&#x27;结束测试&#x27;)</span><br></pre></td></tr></table></figure>

<p>对<code>Pool</code>对象调用<code>join()</code>方法会等待所有子进程执行完毕，调用<code>join()</code>之前必须先调用<code>close()</code>，调用<code>close()</code>之后就不能继续添加新的<code>Process</code>了。</p>
<h3 id="进程池map方法"><a href="#进程池map方法" class="headerlink" title="进程池map方法"></a><strong>进程池map方法</strong><a href="#进程池map方法" class="header-anchor">#</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import os </span><br><span class="line">import PIL </span><br><span class="line"></span><br><span class="line">from multiprocessing import Pool </span><br><span class="line">from PIL import Image</span><br><span class="line"></span><br><span class="line">SIZE = (75,75)</span><br><span class="line">SAVE_DIRECTORY = \&#x27;thumbs\&#x27;</span><br><span class="line"></span><br><span class="line">def get_image_paths(folder):</span><br><span class="line">    return (os.path.join(folder, f) </span><br><span class="line">            for f in os.listdir(folder) </span><br><span class="line">            if \&#x27;jpeg\&#x27; in f)</span><br><span class="line"></span><br><span class="line">def create_thumbnail(filename): </span><br><span class="line">    im = Image.open(filename)</span><br><span class="line">    im.thumbnail(SIZE, Image.ANTIALIAS)</span><br><span class="line">    base, fname = os.path.split(filename) </span><br><span class="line">    save_path = os.path.join(base, SAVE_DIRECTORY, fname)</span><br><span class="line">    im.save(save_path)</span><br><span class="line"></span><br><span class="line">if __name__ == \&#x27;__main__\&#x27;:</span><br><span class="line">    folder = os.path.abspath(</span><br><span class="line">        \&#x27;11_18_2013_R000_IQM_Big_Sur_Mon__e10d1958e7b766c3e840\&#x27;)</span><br><span class="line">    os.mkdir(os.path.join(folder, SAVE_DIRECTORY))</span><br><span class="line"></span><br><span class="line">    images = get_image_paths(folder)</span><br><span class="line"></span><br><span class="line">    pool = Pool()</span><br><span class="line">    pool.map(creat_thumbnail, images) #关键点，images是一个可迭代对象</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br></pre></td></tr></table></figure>





<h1 id="参考方法"><a href="#参考方法" class="headerlink" title="参考方法"></a>参考方法<a href="#参考方法" class="header-anchor">#</a></h1><p><a href="https://zhuanlan.zhihu.com/p/64702600">一篇文章搞定Python多进程</a></p>
<p><a href="https://blog.csdn.net/ubuntu64fan/article/details/51898740">python 如何优雅地退出子进程</a></p>
<p><a href="https://blog.csdn.net/qq_43475705/article/details/115518463"> python多进程多线程,多个程序同时运行</a></p>
<p><a href="https://blog.csdn.net/qq_17127427/article/details/116532097">pytorch多模型异步推理</a></p>
]]></content>
  </entry>
  <entry>
    <title>python_base</title>
    <url>/article/python-base/</url>
    <content><![CDATA[<h1 id="initpy"><a href="#init-py" class="headerlink" title="init.py"></a><strong>init</strong>.py<a href="#initpy" class="header-anchor">#</a></h1><p>首先，module其实就是一个.py文件，中文名为模块，其内置有各种函数和类与变量等。而package就是一个包含很多subpackage或者module(.py文件)的一个包。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/16486710-40ddf50fd0d6b105.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/format/webp" alt="img"></p>
<p>一个directories 只有包含__init__.py文件才会被python识别成package。只有在import package时，才会执行package目录下的__init__.py文件。</p>
<p>若文件结构如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mypackage</span><br><span class="line">    ——__init__.py</span><br><span class="line">    ——subpackage_1</span><br><span class="line">        ——__init__.py</span><br><span class="line">        ——test11.py</span><br><span class="line">        ——test12.py</span><br><span class="line">    ——subpackage_2</span><br><span class="line">        ——__init__.py</span><br><span class="line">        ——test21.py</span><br><span class="line">        ——test22.py</span><br></pre></td></tr></table></figure>



<h1 id="pickle-json"><a href="#pickle-json" class="headerlink" title="pickle, json"></a>pickle, json<a href="#pickle-json" class="header-anchor">#</a></h1><p>都是四个函数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pickle.dumps()：将 Python 中的对象序列化成二进制对象，并返回；</span><br><span class="line">pickle.loads()：读取给定的二进制对象数据，并将其转换为 Python 对象；</span><br><span class="line">pickle.dump()：将 Python 中的对象序列化成二进制对象，并写入文件；</span><br><span class="line">pickle.load()：读取指定的序列化数据文件，并返回对象。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">json.load()从文件中读取json字符串</span><br><span class="line">json.loads()将json字符串转换为字典类型</span><br><span class="line">json.dumps()将python中的字典类型转换为字符串类型</span><br><span class="line">json.dump()将json格式字符串写到文件中</span><br></pre></td></tr></table></figure>



<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料<a href="#参考资料" class="header-anchor">#</a></h1><p><a href="https://www.jianshu.com/p/eaae9678a779"><strong>init</strong>.py文件与__all__变量</a></p>
<p><a href="https://blog.csdn.net/yucicheung/article/details/79445350">python模块中__init__.py的作用</a></p>
<p><a href="https://www.cnblogs.com/qi-yuan-008/p/12827918.html">Python：<strong>init</strong>.py文件和、<strong>all__、import、__name__、__doc</strong> </a></p>
]]></content>
  </entry>
  <entry>
    <title>result_record</title>
    <url>/article/result-record/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="4c4b9bb42ea02a9c4f12cbb619927a37672052d7ec732725df69faf6a4e78438"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">st结果记录2</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>加密</tag>
      </tags>
  </entry>
  <entry>
    <title>theme</title>
    <url>/article/theme/</url>
    <content><![CDATA[<h3 id="更改主题"><a href="#更改主题" class="headerlink" title="更改主题"></a>更改主题<a href="#更改主题" class="header-anchor">#</a></h3><p>进入命令行，下载 NexT 主题，输入:</p>
<p><code>git clone https://github.com/theme-next/hexo-theme-next themes/next</code></p>
<p>修改站点配置文件<code>_config.yml</code>，找到如下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: landscape</span><br></pre></td></tr></table></figure>

<p>将 landscape 修改为 next 即可。</p>
<span id="more"></span>

<h3 id="隐藏网页底部-powered-by-hexo-强力驱动"><a href="#隐藏网页底部-powered-By-Hexo-强力驱动" class="headerlink" title="隐藏网页底部 powered By Hexo / 强力驱动"></a>隐藏网页底部 powered By Hexo / 强力驱动<a href="#隐藏网页底部-powered-by-hexo-强力驱动" class="header-anchor">#</a></h3><p>打开 themes/next/layout/_partials/footer.swig</p>
<p>找到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.footer.powered.enable %&#125;</span><br><span class="line">&lt;div class=&quot;powered-by&quot;&gt;&#123;#</span><br><span class="line">#&#125;&#123;&#123; __(&#x27;footer.powered&#x27;, &#x27;&lt;a class=&quot;theme-link&quot; target=&quot;_blank&quot;&#x27; + nofollow + &#x27; href=&quot;https://hexo.io&quot;&gt;Hexo&lt;/a&gt;&#x27;) &#125;&#125;&#123;% if theme.footer.powered.version %&#125; v&#123;&#123; hexo_env(&#x27;version&#x27;) &#125;&#125;&#123;% endif %&#125;&#123;#</span><br><span class="line">#&#125;&lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% if theme.footer.powered.enable and theme.footer.theme.enable %&#125;</span><br><span class="line">&lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% if theme.footer.theme.enable %&#125;</span><br><span class="line">&lt;div class=&quot;theme-info&quot;&gt;&#123;#</span><br><span class="line">#&#125;&#123;&#123; __(&#x27;footer.theme&#x27;) &#125;&#125; – &#123;#</span><br><span class="line">#&#125;&lt;a class=&quot;theme-link&quot; target=&quot;_blank&quot;&#123;&#123; nofollow &#125;&#125; href=&quot;https://theme-next.org&quot;&gt;&#123;#</span><br><span class="line">#&#125;NexT.&#123;&#123; theme.scheme &#125;&#125;&#123;#</span><br><span class="line">#&#125;&lt;/a&gt;&#123;% if theme.footer.theme.version %&#125; v&#123;&#123; version &#125;&#125;&#123;% endif %&#125;&#123;#</span><br><span class="line">#&#125;&lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>把这段代码首尾分别加上：<code>&lt;!--</code> 和<code>--&gt;</code>，或者直接删除。</p>
<h3 id="统计字数和阅读时间"><a href="#统计字数和阅读时间" class="headerlink" title="统计字数和阅读时间"></a>统计字数和阅读时间<a href="#统计字数和阅读时间" class="header-anchor">#</a></h3><p>安装插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure>

<p>在站点配置文件_config.yml中添加如下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  symbols: true</span><br><span class="line">  time: true</span><br><span class="line">  total_symbols: true</span><br><span class="line">  total_time: true</span><br></pre></td></tr></table></figure>



<p>在主题配置文件找到对应代码修改为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  separated_meta: true</span><br><span class="line">  item_text_post: true</span><br><span class="line">  item_text_total: false</span><br><span class="line">  awl: 4</span><br><span class="line">  wpm: 275</span><br></pre></td></tr></table></figure>

<p>最后：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g </span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>





<h3 id="文档加密"><a href="#文档加密" class="headerlink" title="文档加密"></a>文档加密<a href="#文档加密" class="header-anchor">#</a></h3><p>安装插件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-blog-encrypt</span><br></pre></td></tr></table></figure>

<p>在站点配置文件中启用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">encrypt:</span><br><span class="line">    enable: true</span><br></pre></td></tr></table></figure>

<p>然后在文章头部加上对应字段password, abstract, message</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章加密</span><br><span class="line">date: 2019-01-04T22:20:13.000Z</span><br><span class="line">category: 教程</span><br><span class="line">tags:</span><br><span class="line">  - 博客</span><br><span class="line">  - Hexo</span><br><span class="line">keywords: 博客文章密码</span><br><span class="line">password: TloveY</span><br><span class="line">abstract: 密码：TloveY</span><br><span class="line">message:  输入密码，查看文章</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">password: 是该博客加密使用的密码</span><br><span class="line">abstract: 是该博客的摘要，会显示在博客的列表页</span><br><span class="line">message: 这个是博客查看时，密码输入框上面的描述性文字</span><br></pre></td></tr></table></figure>

<h3 id="部分显示"><a href="#部分显示" class="headerlink" title="部分显示"></a>部分显示<a href="#部分显示" class="header-anchor">#</a></h3><ol>
<li><p>写概述</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 让首页显示部分内容</span><br><span class="line">date: 2020-02-23 22:55:10</span><br><span class="line">description: 这是显示在首页的概述，正文内容均会被隐藏。</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li>
<li><p>文章截断</p>
<p>在需要的地方插入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>todo_list</title>
    <url>/article/todo-list/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>train_record</title>
    <url>/article/train-record/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="76e88f2144305cb6fa77381186c6dbf90445879fb455877dd4ec170b7395b02c">1e0e73741e06b0129e61c2ad316ca7f7aec566f4417fae11ff910a1f6b9d36898bc4c216e03b6aa8167a0573722578a532b48a3c8bfbb6fc0d02cf5aa650b6069136555666971f17ca7f0a834c36d48e679e0abb1c03fc3419b250158154fec83c992c0a1f11005860b1cc6be79adf0042cf08fda093e846671254236ca441af02401e18eadb923c63c1f27ceb9b83e0bbad43ced7032c5a7c9034e44b780b9ef0d7d65a8862be9cb64bf5b43afbc93671585a1cb322adf5435e75469e44c7a63b002b65c02383e9a23c0fd81e55dfb0d8c7f891d4e75466e3a95a83da164943199d4fe858c0773f0a2bac87548d2fbba1bd5ebc35a4e21a748b58104ac98094cd8fdb21f9288b035d182a93bc97125ea0ffcb9e43e88a01430151516cae836bef615b722b3fad81c9e7ab0a1dd72757f3937be349f86c11c530181928eb16558ac11d1f8499d45f4768a913ddfc3bcac8c01d39bd24720d8249d32fe0404ad255d2bcd3fc273e2a6745e521cfb688316ee9095b26e506e91c2343895e9fd39f7a8039d8ee6522830a44c15807869112f2fe4ce7e14f764ce8fcb31b91ae800bfa3357f30ca4a37ef7b45244e8276ce511d226f8553f780a5bd66296345909dafa0225904874cc993b0ac87166f88f4ff32ec79981a175f210a7077be7711ff86ed58cd2ccd9aeb36d275e0612c3380e7ffdc1992545ef3d430d32194a73a8c06e25e75508aa0d9f49c58d60dfb0944d39c1c34f9899666f7efd753264529e33180aef7e2ffd20f3dbf53f9f787ac945ae4963919e052c494b3b91d68e1235d671560bbe39c6be9d328a35d0ddf93ef591f7cc63474cc852835121cfdef696ac132ee5cdd6407c5069f10a7b6c1854d348b40b50c938413d75050c6999fd670d1794a1c745503d651ab053a6ea04dd700dfafe300807e83a56f93e36469f3cbcf5b414aab8afd8ce7a8fc4c46769108755cb0ae19074ddbaf1ea509af89f50180d2e0cd99ea2f524ec785c69caad6036d7c0dd1048e16dd6d12c417d53f68ce29a17314f070429d466cc4dec1a1b301ba35ad468759b7ba9fbb55ea50d61a077cf14ecb1c62c29d9be29840a998edc9ac110dd5d0b52342ce5a7590f6fc6c77f01626cb9fab466ee0b3e5b96dc02f98e91a7fd98565f9b7fe180d33fe7ea81a8d771eb78b9b7f978461628b385aa682f3455befce7b516695efb62eea4bc2a00dab93b5baf2562b297e3a79a862259b61b7d31dfa751aaa88c62689f17cf051471ab77b794d9825362fca087ab48257320f86491cd86786c5a39c151d26b9923a3c4c059ca7d977c978e4a917b4856aea5f07b927b9f3df6863f0060f0dfa9ce34ff116d3da4df8439c02c2bc5a4243d31d447756a4afa4e4f1ac10246b9e37a0b3e59a5ec8166e88a80cb7ceb072cddecdae74dba6ed2a399e5fa8d76369ff80dd62b3cf380ac344aa3c073872060502b1599929c93929af88820f2a41352225d10ddb97cc27abc8a415706f8d3e1eacfdd912261c4e4c46d887a37df694a777e582bb6513fb9512e61a4f892a2c73b90b25957bc04716d02cfdea1280d20fdd2a3668d3b33d6724017ded1e66864aacc7c0ec5cd268283bb18767e0fe32527b8bb764af4405a1901194250b104c69b0d52f298d4ecbc6ee2f5624f76094997645b3d659da11219e93ae88d3a4c8fe63b20edd181b1dfc769b9f7f4e1a1b33ae3fb8e150e401d21d728790d1c817e7a703ddb293caac3d0473ffd20576411d9b39be5f8191f0d547b26c7f8b0923bd638a085c1c653f3eadb09f27909a90870d756539aa368e29932d4e5e93fe6085a7b74487153612da90cb4e3934e9dd0cbe1b8c237062313400b57e0e4ac23887ae729db537a296a4e1c6e1af79197c2ff962004344158c333c1e2e9e47dc63d52aa56cf635681c929e312e0d28b4fee3c579c02776790d11f3030fe59a432f38e4a0f11bbba707ffbed42f65339fba14bd85d7c4e013be69fbbb15fa82b042e6adaaa71285f8e76211fe16053c98a7792dab56c0469d2e3b5c44558db429709c34a1211aec44898fb1a64467d60f421b0c14277514145e64cc6f294d54abcc03d7e8569dfcb013d9f083a8f600e61d6e356ee066e441c78e9c16bc469c32ef315f22c402d334f84eea7e96b71597ded69ef6c2d388c85f84e830d71fbd06b0f366ec2eaba3db8044a4dbd378c70581858e1585c3666e157c9d7443cb18f4be79b7c27108e03406eb7406f00ddbf3835e767e46eeb5b23eadbe4c8019488377edd9cc22429f10cdddeece648d80d737800366cddce74eca60e3b9881a5b6341f4990b808257c78750947b3051356af2c886d8380a255b3aad9483c3e76b2310fa6464c388759599fc88841463a67696d2354671f2f8aeb87db6829b71126558cc8c576913072fd8485321b2a5af66ed7e2d18d526892de2a431753a4e7bbd2fee4aaaa29487b9a2d708f95df69a8b6736c87f03c47afdac0a5b173a233d28f52967c767b4205b5858f5b9117b64a720b914542179a6db6b60f94066982cd1af08dcc4984af2cab554b7aa55ffe1f8cc82ed5ab939332949d62672596f86668bc6f9672c39c41809ea9abd3aae73f5240de4cf634f8f31c78ebf6e18e5a0a7235065636b9ad7c66fb344bd2c30424da74e44bc9e83bb6a26551b671adefd9204a6f7bdbf8d8c720cdef7fe401a6d486038a30eb014590b6222b840bcd00e4cab82a3e43b3d7830570f3c9383696db1063348be938f409ab38c4b8f9c6f4dae6b1dee7d6c1b8834dd8d5e13f8a85bf57b78d4687003fe6ff2b2d5c1f43c0db0f379bb16514368060d320df33f3759ceb1557d3a88ac11f24fa02bd3adc37d093f2da484f0eb026b3692005c4a0054b3b8ac423ad6971abe78a22b95968de479fba9dfbda35d6d4a6502e646e4942e7c05bfed4f5a05ca0b834609e4a2cc2ca4114340d8a44e9139eadeab57799b5ed484f74a9bdd738a725530c25790b76eeae7250f9ed0426e28fb2f15fe70ffa264cbf6b435f181e10f0daaa3c2b3605a6654d3fb239be6823f5f016185593c3bd8f621bfdb5a5ad8844a800425f02b71250af205572ed6820c6c953b46e61bebc35804348188319c2ebac0f1efa9fcb78dc53059ea24f10069207b4a07c6fdb120fbf6f1290e23ac1b28d5cb3d21c912e77f670515fd0f303fdc75ef2f62046291bb529ca575286457b155998b651c334c8a27463012c6eeeb391410a3637f004d834bc1ae80fab4935cc131734197816272e85a16249626025673266fee8667c97470dd9b8c2c16dc5769f6b3b07f1e82cdf89e07e2d638b17973f55750301eefea426428d48865667a6b0d9f97b7815ba05daf60dba58e7b3ae15d5628a6ec955fe63c6e53811bcca5a979f198b2f520fe9fdf55c4256bfbbc40705acc726673eb1515faa397fe3b3e2af2b90a0a4bbbb2349c33bfe847d56db500e44fd9b9660b372c655f8a3fa30bb8ce6ab3aa8df9e72d62b593bf06d652ef1e5520e7b9ecaab6dfc3511d9fd6255ca0eabe0e0b93d3e440e4cab5573dedfe9b04b8e84ff2936dcc3bb4d5d5c78c1ce74e9c40cc56c3282392342e3f6d0d8517d50468b97c5ecaaf4f0754b5a64997e5f6eb0b0f2030863bfe086b1db6edbe1c77c32f47a655c6c67f575d84ffc02834494b0f0407828f456eaa2f8735a9de7b39a257e87d72197efb0981393ce057205094cb3cbea4f76f693abbe4bb3bbd8df225e436dbe7d0b9fcdedde44a88cc98bbfa26eb1b7133f9b70ad0c633849518cead0f26bacbad76a86e2135063289cb128e5027656f567d1aa85dd9c1a0e865d079f63bfdd5b98b04e7062985e571a4744e3e9a06224ee85c7c91ac2967738b190638810400543a26dbd1279dfa5c0ff587e2c0fe8d0cd988d43a3758e6637e1c71b1bc25f565f66b898dce1c050b0f4d3e1f1793d85cec3cb7494a384cc43f4bfa690d1df757f93deacbe3255c3cc675235d2719d378fb4ec0f9857a7b9803382f1b819ce069b568778b5ff86122b87a7e0c4e1b5adff37d5bd614f4810c6538b878cf7954b3edce8ef2c7656ec476529ddec3325abcc4b8972e2c72685279558728197c5508a57169a541e475f033a9eba3e352876f4cc97662f9c0dd37f01e4a12f7ffde488376a8a9a853073fd4631b1432aa89a442b95e06ec6f27fcc28bbbc24057b8f642ff09f844fa0d1268dc49200fe1fa311af63bbbb34dfbef54b3b2f81f8624f94e322e8c283758875bc9172df68104151acf6a0fafd37632ad755a81e4dc0afbdb260e03ac28e24eeeee17b4405119b43705bf97c957ead68f1cd5c6cdc479273de5caae0e633b8fd2996d0f77d30097238733c679743e245d425dc5aff928a28b397c1e94a03213a7bba9020a6d6ceccc7a50c0b57d33861937dbe4b23cd639e38427d559bbe7056d8fd343ae5d8bf4644d8aa0703d1015ff827fa194daebfce892de73637c05d6c2e2095da15063386319135ae41fb8c839e52e7cb61bb7bfd3b4c10462fa74a42c8b5d4c0ee11f3c6b12cfaf3775aaaa3ad0402e0a178256217d08b0d4de6de67824fbe6132087713f2047f498116826e277809ff928b0c060e061190087ba17da30f5760a151ed307c483aa7a110b78b9f9f927a12956c5c669548e9519e1406ef025c3724c4b3b8a384815f61b8a9c447440ad956b2ce62a6d5615877917c77ae96e03817126efccfe61d1f7cde48081a23b26f4b105221b82df0595a198d58a03f191ecff8fc6f6d0ffa9c15f44750f369fb7078533f906ec9bf1e0b891e0820509abbc67538576108664bb08aafaeac05afb1f2aa4b7c9cd27a739aaaba996bd2c9e6ac8e4ae07e4604a976a73e47241179682375a03a22b55b8a7243c9691c49c15ee0290cda300131ce85b8fd44352b017334ced6eaf7d2e7abe7e8f4e97688f798fe0e0f460067cf2bf368adf056c7b9cd09915f73c88c5a9715459c072424582fe65e8875282c61925cdeef1e7a596d39b08e5f62ccda66785b3603a218c615270b0a7ef4fcd0c9112095a8c3e3d1dff9dc3a671bf2f9219230dcbf4c2f56644d805d1cd9ff89b625e7b227eb0546175aec24c77391591291a53c96a78701f3bb986109fbd6a94110440409c76d3b419418074e289d75c933d701e0a8da191ce7c6784ff3e792a5db94b507f88ce5402d7378964227162a9a24a938684d4dac42632ad16352a5337c374a91f7e558d4317703ef58a12b397c943fd1a82d0354232584dde1b86f68a19632ed9e0aa7eb35e2db0684582cec1c7fdbf7442a2d1778f4aee1a7eac2fc392069411323ce1b1b2ed747fe0c5ff4188280d1d88b11e7cc346d843729ccfab120f6af7b3dd2a6c730753dc730b05c71f7a227982ce22db6489b1d26dfd84392995768f771c84ab4aaea2bd2c17f69a4e686711c42a674f689d80b25c84ccd16ae4fe1245acf9b56f6995802c797aefbd71dc3798f00e20a62310e19e84dc6aed48872776427354c10b72a9ab74f7d538bb57ae3d590b072fa68b5efe675c2b20c08a9203f418fe3ef3930bf3038e22b1472da1e0c0457ad72c2dbd7866625f341fc538a4947651c4aaa8c627c17040fb4a2a82803b2daa869fbf2dff4550836babea0c1c790f3372699521155f351c9526925b58e05adf4e4a88060e6fcd23089ac8949bdee5453f824e719421eff1dc8f33ec4bd4b1d52cbc73bffaa2b878143228951056cca82c1c40f4c240b81ff849b251c8f57139c43952f35ddbbcb8462b6c0214118a022d6f0965d474967d5702f7dc013d7976452ae787ba0751f361a26240e69d77603b6c2bff60142e6209134b213c6e26bb2e22df8ed7733a616aae43df06295d3a1ae04731c9b0724c3d0a295ae0ae564da0bd6058bdaeb4f44773c99793b8cf67646be9eb8d88d66a2fabb939a4d526f8d795c0f53df5bd28d8db871449fb22babb267676896d7081ea2d2a84d4e0f757ac9f6f16adbcea744c5482dd68e6b44d304a13f2bb55e2cf0d53a5fd02d1cd85e0be40b61413bf74322406a9bdb826ab31224e2f7cb44b3451dade595171180c416318d7893276752817c0c7ad02932331860c35b9e9417b9ce81de43bfb063f0743d5911ab10f34a59725086b208bc826dc8efdf87316692cd7b68a28eb4d044b27ed7ee896abb83ed1c4bc5e96df173b8f28601ec0258aa809ca06678da51b7beeb66d6a4e33e0ef0678f03cfd81179fb68e3c48e094bd1ab8afd4b35e07bbaa0ef9a9dedd5c820ee52a40f4c56b12c05352626a34ded2e5f216bafe6a72da150939a3cdb0a7f5de64df422cf77958a131d0ffa9f082ecc705399c957f4374b993a9dfab5c381a1738eca5e540cc89a4592915868b108453fc1afe41b45a0e2f1b0594a958b81b9a6933411554c77241bbc07192a927a720585a187c047c391535f39c8c7fe462dbe739194864d2ab78b5f3285286272832eae6e96039858e28bd29618d4b4347564d49b735c6e33a757cf2acb2e50e71069fee2bae90eeb95efef032cb1a3a79087cce0882872c38fd44f208261fcd64497f6654db7e272c2ef469f5989c2dccff2e322030606510eb406fd90cecee90e8b5e45896e24b4fab8498ab1d3f2ccfb4545339a11f82b34161738d8e96d52588d8d8573266a8d2a8f2adf62dd2c0879edd26168e01ad22c12d037f6fe75dab7bdc596ba54ed3010c0d95a07cc000c7f97c8e342256a3acd202be6685678047f2755cfa932d895c888d6695a9062b211584c339c7c95d9caa79e30fa92dc3a25ba28d6cb976b767946222bae6552959d522828c6dcc4a952cab03851f15451f5b18b4aebc26c7cbd6bde2cc694309d88f44361d016fb550eee222405788714b0f06a73ede37d785533caf1ce886abb61611844887dba524a89ef31d5673fe0abe67685c6341aeb9a8e243dce758d172a325403256af6d36dec0981a01c34e515af7f4ceb4f5ab86ce05e688a72e46ca31bdce1c7a4aa53d51a4adc2c45066cdd208079abe82f4adf4998b23e5c9bbcc847e0cc5ba43bbd476648524a328eec87a912f345e4556c9182dd3ac65f44fc6327fc020e2930007b5258c7b881c8d3ce025e839834abd74266646525f24ddac489afefe261ad1494b3bac182c93c2ef2edaaf54adb83189f64e34c93da6ed8cf0f816abd1c760f6b0c928b9bf6857f59cb1f78f57f5bbfa319f4e8e993216fcfdaf73d78bf78886d90609a3bb52a7d72af885bfe3260cf02669636371ef20e5dab9d99cd49e29ca117fb76bdf11b497427e93b22faf78e9e8ed37426883eba87c3e120552101a00f7fc50c394e17cfe9c4c6df1d7e03dfc525b8c60e6e1fb627b4edb7caaac6baa16a91acdf223f5bc154967f52cf70297407ca72c5e4dca4f6cb07505867dfb19142736cee49474883e81b9e3089c8049c6dcab55764c93e01a4c44edaf2786513b8a8b645d8a5cc7f1d4f70b98401d1fe81525dbb780526dc225ec92c99d303da1ba70fd13f9096173662f1d73d8edcb1e1242f48cd01de1a44c2513a533a78b105727bd1dd212eea572d5b9d33a20ffc6598dca0889403718545f49cf3ad9f3e8b273f9fd1a8471422cc1b16af7fe251c5fa4942b83aaba2273721fe57f05e64e77c6dbfff232b1e9596ad86c252179676511ac2b3c82e139a4a6ded65ebaab5327cc0ad1049a4635783790b227982f5557da561279381dd6f912ea192b9f2a5bc82003d1c08673423f42ba76d6518dbc38dfe8198cd585e023a753f4a6dcf63a99edaa23d797f700bd2a95e73f090ed4a3a9c816182736a5e6092942005501ef8bd8fa9c3779fb63322e0051a7e46f1afc545ddce84434ca15ffadef2d999420b3fe8f751c80edf9492f5a39c0b9f7396dd0777af2365420c118275763ff51770f4d64bab1df19977fd1d39c8ba908e1d2c0240f18d2d7da75957528986713108e9c46d4fc36954d1847be9c1ef8926fcd4a3e1572fe3fcea57eeaf8142319a2cfb387247e0396482b3ec81fe4c4e4bc374bc1ab6a286fad85a2a30d9d0d67558a5b74a154afa8047cc51702c9c59dff61ac4cf4a9f35be13e4f9fb42e45429cfaee80808710d4784f901d0c8e15594ae6b4939c70178e4e734ec3d665869e359562ab276bfad1690cd2e4e430d13ee6ddd88d4e2a6680cd4f23177581bab31903881a5f68f0955e9d85e95b3482e6b7bf0ba625f9e36f7ce8affd25d14ab29425da8a13b1096bad05fd4d65ffae3e4c2796c956fae489eed8d5c0f634cb28f4088fb06dc129550fa0e0df9e2e2041e57ce4fece9ef2cae814b458e56aaaa895125c0293a9e5fb1da309af3e3e3b9580802edaafe3502777b12b2d3abb9f038016820fdd7c4872b55f7bcf423d8bcd2ae0835f17a05464982d9e0a40acf2b6113b53c74aa918b2d32db591d66adc28bdae800d7</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>加密</tag>
      </tags>
  </entry>
  <entry>
    <title>tqdm使用</title>
    <url>/article/tqdm%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用<a href="#基本使用" class="header-anchor">#</a></h1><ol>
<li><p>迭代的形式</p>
<p>使用<code>tqdm()</code>封装可迭代的对象：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from tqdm import tqdm</span><br><span class="line">from time import sleep</span><br><span class="line"></span><br><span class="line">text = &quot;&quot;</span><br><span class="line">for char in tqdm([&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]):</span><br><span class="line">    sleep(0.25)</span><br><span class="line">    text = text + char</span><br></pre></td></tr></table></figure>

<span id="more"></span></li>
<li><p>手动的形式</p>
<p>除了迭代的形式，你可以手动控制进度，加一个tqdm上下文即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">with tqdm(total=100) as pbar:</span><br><span class="line">    for i in range(10):</span><br><span class="line">        sleep(0.1)</span><br><span class="line">        pbar.update(10)</span><br></pre></td></tr></table></figure>

<p>上述例子中，pbar 是 tpdm 的“进度”，每一次对 pbar 进行 update 10 都相当于进度加10。</p>
<p>也可以不是上下文形式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pbar = tqdm(total=100)</span><br><span class="line">for i in range(10):</span><br><span class="line">    sleep(0.1)</span><br><span class="line">    pbar.update(10)</span><br><span class="line">pbar.close()</span><br></pre></td></tr></table></figure></li>
<li><p>观察处理的数据</p>
<p>通过<code>tqdm</code>提供的<code>set_description</code>方法可以实时查看每次处理的数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from tqdm import tqdm</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">pbar = tqdm([&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;])</span><br><span class="line">for c in pbar:</span><br><span class="line">  time.sleep(1)</span><br><span class="line">  pbar.set_description(&quot;Processing %s&quot;%c)</span><br></pre></td></tr></table></figure></li>
<li><p>linux命令行进度条</p>
<p>不使用tqdm</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ time find . -name &#x27;*.py&#x27; -type f -exec cat \&#123;&#125; \; | wc -l</span><br><span class="line">857365</span><br><span class="line"></span><br><span class="line">real  0m3.458s</span><br><span class="line">user  0m0.274s</span><br><span class="line">sys   0m3.325s</span><br></pre></td></tr></table></figure>

<p>使用tqdm</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ time find . -name &#x27;*.py&#x27; -type f -exec cat \&#123;&#125; \; | tqdm | wc -l</span><br><span class="line">857366it [00:03, 246471.31it/s]</span><br><span class="line">857365</span><br><span class="line"></span><br><span class="line">real  0m3.585s</span><br><span class="line">user  0m0.862s</span><br><span class="line">sys   0m3.358s</span><br></pre></td></tr></table></figure>

<p>指定tqdm的参数控制进度条</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ find . -name &#x27;*.py&#x27; -type f -exec cat \&#123;&#125; \; |</span><br><span class="line">  tqdm --unit loc --unit_scale --total 857366 &gt;&gt; /dev/null</span><br><span class="line">100%|███████████████████████████████████| 857K/857K [00:04&lt;00:00, 246Kloc/s]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ 7z a -bd -r backup.7z docs/ | grep Compressing |</span><br><span class="line">  tqdm --total $(find docs/ -type f | wc -l) --unit files &gt;&gt; backup.log</span><br><span class="line">100%|███████████████████████████████▉| 8014/8014 [01:37&lt;00:00, 82.29files/s]</span><br></pre></td></tr></table></figure></li>
<li><p>自定义进度条显示信息</p>
<p>通过<code>set_description</code>和<code>set_postfix</code>方法设置进度条显示信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from tqdm import trange</span><br><span class="line">from random import random,randint</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">with trange(100) as t:</span><br><span class="line">  for i in t:</span><br><span class="line">    #设置进度条左边显示的信息</span><br><span class="line">    t.set_description(&quot;GEN %i&quot;%i)</span><br><span class="line">    #设置进度条右边显示的信息</span><br><span class="line">    t.set_postfix(loss=random(),gen=randint(1,999),str=&quot;h&quot;,lst=[1,2])</span><br><span class="line">    time.sleep(0.1)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from tqdm import tqdm</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">with tqdm(total=10,bar_format=&quot;&#123;postfix[0]&#125;&#123;postfix[1][value]:&gt;9.3g&#125;&quot;,</span><br><span class="line">     postfix=[&quot;Batch&quot;,dict(value=0)]) as t:</span><br><span class="line">  for i in range(10):</span><br><span class="line">    time.sleep(0.05)</span><br><span class="line">    t.postfix[1][&quot;value&quot;] = i / 2</span><br><span class="line">    t.update()</span><br></pre></td></tr></table></figure></li>
<li><p>多层循环进度条</p>
<p>通过<code>tqdm</code>也可以很简单的实现嵌套循环进度条的展示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from tqdm import tqdm</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">for i in tqdm(range(20), ascii=True,desc=&quot;1st loop&quot;):</span><br><span class="line">  for j in tqdm(range(10), ascii=True,desc=&quot;2nd loop&quot;):</span><br><span class="line">    time.sleep(0.01)</span><br></pre></td></tr></table></figure></li>
<li><p>多进程进度条</p>
<p>在使用多进程处理任务的时候，通过tqdm可以实时查看每一个进程任务的处理情况</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from time import sleep</span><br><span class="line">from tqdm import trange, tqdm</span><br><span class="line">from multiprocessing import Pool, freeze_support, RLock</span><br><span class="line"></span><br><span class="line">L = list(range(9))</span><br><span class="line"></span><br><span class="line">def progresser(n):</span><br><span class="line">  interval = 0.001 / (n + 2)</span><br><span class="line">  total = 5000</span><br><span class="line">  text = &quot;#&#123;&#125;, est. &#123;:&lt;04.2&#125;s&quot;.format(n, interval * total)</span><br><span class="line">  for i in trange(total, desc=text, position=n,ascii=True):</span><br><span class="line">    sleep(interval)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">  freeze_support() # for Windows support</span><br><span class="line">  p = Pool(len(L),</span><br><span class="line">       # again, for Windows support</span><br><span class="line">       initializer=tqdm.set_lock, initargs=(RLock(),))</span><br><span class="line">  p.map(progresser, L)</span><br><span class="line">  print(&quot;\n&quot; * (len(L) - 2))</span><br></pre></td></tr></table></figure></li>
<li><p>pandas中使用tqdm</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line">from tqdm import tqdm</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.random.randint(0, 100, (100000, 6)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tqdm.pandas(desc=&quot;my bar!&quot;)</span><br><span class="line">df.progress_apply(lambda x: x**2)</span><br></pre></td></tr></table></figure></li>
<li><p>递归使用进度条</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from tqdm import tqdm</span><br><span class="line">import os.path</span><br><span class="line"></span><br><span class="line">def find_files_recursively(path, show_progress=True):</span><br><span class="line">  files = []</span><br><span class="line">  # total=1 assumes `path` is a file</span><br><span class="line">  t = tqdm(total=1, unit=&quot;file&quot;, disable=not show_progress)</span><br><span class="line">  if not os.path.exists(path):</span><br><span class="line">    raise IOError(&quot;Cannot find:&quot; + path)</span><br><span class="line"></span><br><span class="line">  def append_found_file(f):</span><br><span class="line">    files.append(f)</span><br><span class="line">    t.update()</span><br><span class="line"></span><br><span class="line">  def list_found_dir(path):</span><br><span class="line">    &quot;&quot;&quot;returns os.listdir(path) assuming os.path.isdir(path)&quot;&quot;&quot;</span><br><span class="line">    try:</span><br><span class="line">      listing = os.listdir(path)</span><br><span class="line">    except:</span><br><span class="line">      return []</span><br><span class="line">    # subtract 1 since a &quot;file&quot; we found was actually this directory</span><br><span class="line">    t.total += len(listing) - 1</span><br><span class="line">    # fancy way to give info without forcing a refresh</span><br><span class="line">    t.set_postfix(dir=path[-10:], refresh=False)</span><br><span class="line">    t.update(0) # may trigger a refresh</span><br><span class="line">    return listing</span><br><span class="line"></span><br><span class="line">  def recursively_search(path):</span><br><span class="line">    if os.path.isdir(path):</span><br><span class="line">      for f in list_found_dir(path):</span><br><span class="line">        recursively_search(os.path.join(path, f))</span><br><span class="line">    else:</span><br><span class="line">      append_found_file(path)</span><br><span class="line"></span><br><span class="line">  recursively_search(path)</span><br><span class="line">  t.set_postfix(dir=path)</span><br><span class="line">  t.close()</span><br><span class="line">  return files</span><br><span class="line"></span><br><span class="line">find_files_recursively(&quot;E:/&quot;)</span><br></pre></td></tr></table></figure></li>
<li><p>注意</p>
<p>在使用<code>tqdm</code>显示进度条的时候，如果代码中存在<code>print</code>可能会导致输出多行进度条，此时可以将<code>print</code>语句改为<code>tqdm.write</code>，代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for i in tqdm(range(10),ascii=True):</span><br><span class="line">  tqdm.write(&quot;come on&quot;)</span><br><span class="line">  time.sleep(0.1)</span><br></pre></td></tr></table></figure></li>
<li><p>alive-process 花式进度条</p>
</li>
</ol>
<p><a href="https://jishuin.proginn.com/p/763bfbd55bf8">酷炫的 Python 进度条开源库：alive-progress-技术圈 (proginn.com)</a></p>
]]></content>
  </entry>
  <entry>
    <title>yolov5_real</title>
    <url>/article/yolov5_real/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3f3d2b4903348586b0d519d55c6ca8be7dc19536536666d8ead458945856bf74">1e0e73741e06b0129e61c2ad316ca7f7aec566f4417fae11ff910a1f6b9d36899fb60a23418a5b093430c28d7654d2044057c8b4d3fa7c0c306b03f78ed300c227adedd7fc251a81895af8103ac2475d0738e6f4b300c7df8bc6f1d96218e8d4a86413a06827353620f9c4dcf08de79d867d2b1fad7409755ea815999ba4489d4a444cccf84cf33ae6291935c72be659586fcf5760c8f395fc5e389795217172579821cbbc4c1d448210aceb2fa5d7a002b44222fbde43d8c18319b535cf13cb66d21394fb53ed10667e84dcf23a2fa584c3c2280134132640d092d6d7dbb92dae60eaaf25346c4dd4e3412a5f7befaca7d468e79cf97d3af1f6d6dc978820af6a56768e1d8a6f26d42ff33ef4656d6dc576ac09f2d1fee20b7ffa95fa2dc3e13f3efbd1473e2843b884d20ffb6bb1b9d50b15a61ec0fbac5a113bdca049ed6deb544dc6b4d309aa076aa37ea6e9809da1fdb9374c507438d517a3ad7afdc0f89800e4ffca617294c216c102b7a36ced45dfd0a0ed2bbe94ab63901142427dde52c46b083e94ec091da1aaf984435b3ba30e5aedefd69243dfdffbf4f66f677e28e4b5f2be435252f77e331226ce8102c825aaeeb26954c8fefcaa193cffa99e28d5371457dcb26f3368663c4b7b9d639129d19b70a0b5cdef55fb915bd97d0bf3aecdc59a7743b4cf14cc721ad6da2922656f237c43b74da1f253872d94e90a5933ed3e98a2cd2962e2da0482459e2f0c39c671d9ebdc045a2a68e30549c770f6e001f1cb0d0748bd5e0154febc4e56083c8fc02b6ae8a5b2001081105e65f516d677f08e26fcaa4426bbea8af095297475ecf9f53c6c531893a89fd61abf5114fa450ac62c364e90359f212e5ad49f1829974c526b2292c56edca7b9924f5643621a9165ebc7015ae75f4b3025dcc8d132ff0e98e4636638bb319ec736ec21372c9b7238600ca40bcbab8a356c106ec037961222446e7cd781500178b5316d0004598f796c2a1dd093c70d65c12a67841947c8407997e8968785b5b9297aab8cd37ebd9959bd2b2b0332471f68d65d8105285cb087c4306282eadc4a50b76ab87bafb8bd28f33a23348bc43b4b62e6416ab52bc2813cb425dd347ee764ba64826b00e3a659a05ad8cde6426e04a8f6714103323f734d9a783ae9c95772ff7f4ecca685cae995c783d36884b3828db38c19cc8e58c0e0c4c714d9a8642cebb0f572c3c70a293b166844f922e43d89c0884ba9cb8c95a09ebddbeb3ff5b9433929be450d529a9fe1c1be66292c47137f084f5ce16de3520ac0bfaecb11624a6b0b96ed960e439651285359caf93a550acfef4891d102aed5ea7dc59eaeae3d1e0795b0f4542a0d57ecfd169f185f52c8839faefc7fc1b12e7e6fa565e873b811384fb3d8eb79b2589a8c4e25fdad6205561a29c07edc16f53d21c126f13fb7506729a7ff6beb0531a5a12d6b0c42e257bdc64a89837cc738d9afb65437120f80d404f80128cec03e81b50e0eb5bb1e38d9e17719ab6a6fe53ee2263924f49c9f6a5eec523d7cf5f199516ecd9fce43f63855cdf56294453b7c9310cc19617b8646b72b51a6e09190104f9240960dde8089dd2f16e64cf90b14fdb54eaa523fa30c0fad9992af9d7bf088878c6e1fcc0ada3b935c2113bfd138451a32e656318550ac9b8ad010d9d0045b31e1dde4806706199d02a4ffff8e8410e27f78a4f263a5b1748a223b100b82df8939d0890b259f4d6eaa3116f6c8b8bac59c302f03b8baa039780eb8d21468da9affda23fc45b8486baf47ba4f2a2ba2efe223d8ba20689dc839f7203b31aa240cbbf2d18e3e15056f34bd0ca979d9654cb60594df51d0d7336ad9ff5bee70b1222715f09a4ad5a744d776eecf01860c779fe826576af58b63d61bf4fe15c88348a703a0e1c20a45d74a59cc9dbccc7daab2464f79557de71cc8fd74c1f634bfeb382da5142cd9b7951ed97d035ed6a7c5826c6acf2ebb68294b8bd5e60992c8946e560df3ad82637fa244f1a777202b3cbbb926fb72ee5c410c2737f2301f737eedabbd1d09f817a81b00d22123ccbbe168388a15f62b10cd4b67f72ee5350979df05800860137f3da4db4deebd295fe7a129994c71914e0f62df1abc61866958a8e25a1a619b8fd3a40ca40be606a8d39b1709edbbdbb5817af0e24b657f99a1209ee979db278b1c7adbdc6a5de5365500607b29edb3e845fb8fdf7cb9457e247d0668c637f74a0303d80b53b25fff47148f05e18f2e8a834815ccca6591582af61d9dac843c6fa9b44434515b5cb75d37fe40a807ef8be4cf233a075c1f5de735c3a9ef887eb94fb53d66a9873f6a6e7b9895c01b3206f69a78ad5fa186727ca1d1ed31f74b0052261494d4dc2befcdeee86a469fcfc3bd96cf27695f30c01b84973a3197384b9e58f2187cca8086f4f62ba08b41e28f03fbc7ca39d8870f76224e79f9371e84be07da4ebfbfe83808b3680cf12255c19fbea5b6c6ef44e57e77e2365cd6a9a9e6e70195cbc984ce7e6a685acd22d49a1991faa211d1ee95b19efb43a420677bc41c305060271bca589be41753d121de37473601270c4498cce63809b9c02f9b001b65bffda75b36b3419748fe0a4005c0fc9ba246070cd7277fa7f9bbd01d5d79613fb95cc96f79c64135cf405fea16939d7295d0afb589d6778f39b13cdb195391c66f801a1050cf76b77edf438b370c168f4ddb30c441daf4ad328b8e5643e73f1594796d2aa99242375cc0ae4f4060bbff9cbdac75823e963c5eeb62d5ed0a3c1ad44023184f8aa2175d1c328f91f8d4a0a6fc7c1cb2308c3e2cfae8a44d90772f783269ffd5f4ed9d8b4de6f785ae5dfb21366779add8a91d537e07f71519740b39b8d0bedebf17a547ef38dc36c0044afb7b1e7275ac100646a745717a95fe6146b68050e04659123eed1cba633279a05234ba15764d7f898a95f0cbb3973393d11dff0abaced3a2307835d01ca41c79272b21cb8a56f57366a1722c83fbdb6613cc380ae91c1ee92214bbb1ca59e76bddc97f99b1b26eb3236bdf64409999dc609f39e593e22af80d214cc03d864c5cd76e755b083850826056c59b8de1cc9ec205617f85939727d514886d3db58353f8dcebd46a5fb4433c6e11d9b8a2c9d1fc589162b11cf6a77b2c5b3eb897dee42218071fe27875a92404a7019c5f387017a7a27480cc90b329710fb8df7a5ac7d87087f7237bd6e3e22829e766f3ca8fdbef126468c058339e3802631514f952b68d7ecc8d85c84f2c04a0a151e55aea86080a79e19f1add6342b0dbe94dead4b37ae9468f52de928001fe1d9fde7d74d1a34893b2c02aea9f019bc4eb1e139d281f378eaaa09c69ef6ad791becaf699da4a5f352cdd54793e08e6efa963450b731f286d8c491198b4db04dba4d48c99c2868a0f2fdaf3f1becbe09d4f714a1a92b553141dbcdbaff3b6853a6f9ceb49fbcf9bf5e956aaba88e85a5ed4630e4a81b3edb9b8f1502b2499d5f5a87a4d9175c8010f838498a36f0a7953424119843f678a79cad3c698c2366e2da210aa79ed593a52765b59dba34c669ba7712ea038b7ccc3d74dbf76a0d3932310074f0f6c222846954b36a1abcb010f775ab5498c190712aded2d184243036b146c121d0392f54c14cdb2a336c81079df62b54a06ab6fb4837f66abc9675ea4f30e1d5900c4eca8f6e01615d1dc315f3dc83904418f1b8998fb31246aa9f1bee2197580c19680af7c44f4650f8302998dfcd0e3e72008f35a31f3a38b4f1bca5f8732596a5090d9c3429ff276637d8b80026472d83bd029537fb97f69ce1cceff9605ccd3f18db02a4df844af66bcc0d5132b9df910b31716429628fe9d27bb34dc6393f69d9f48f0d7cec69633be77c82902480c0c1ea6e2c2681b4cb3380749cc4aa271c0eccf50d37c1929558d3bc306c08532fdfd9ee1ea61b716f0b33bfda64460a6852114440e06c105fef2a779b05bcefa9f1862f483855fc2441be5ae64545d965e270918383bd85f178622dd42c7b4d02a85555efb1fc8e669d1df8b2adad84639bf9928c46c1b6f11719f3aed3aa8e8e8118c48aa21b8c2dcf5f425f9dc1159d8d088855b67509d764598c3c18a632fe177f02afea2c8402d02a93cf4d550e6244208281e60922ea9d8b8370acb8cf4cc8764a17fb8ddbedb2cfa804a28cff1353d01fcc4eebefbfeceaded6be5e72f3db7844647d915ea3523156d62336eb5aff69bc25f3619b61a62ea2d00dd6f107b7b5a38a6269ea851873af7fce68c2277b1160a7871a69cda92961c1b57e70aab97c0d4a95e0da9a1e6fbfaeb11343262ad0f3402e7635ee4291579edd666718dcd86f3e83e92aadd2365688edbabb9cd0fe3a6568a13e24266339dd795ae6ee259e92f0909bbc65f45baad1a4b14867c5e439adef713baedf4999fd303280a1c2523987e95247c1b5b1cf84a5ff0b49d7e0a42a442ebf437ea15e666a70aeeaffceb2bf13ff986b14c0ff394ad12d1c9f2c918c7f6919269917b76b6edde1303ae3f89d0e9efb8f0d81cfdaeb3dbb327eb316e80fbdb48667fce379f1f05615315a00d0a14961255559d6f40bb2c080be98b46057d9e91dd024735aa928c121f88b502310406875075ec7efa2e7f519963ace75e5457670bf55c15293047f706e598635b56a276d3a4f09f42eb6c08c654b0f4925e492a01d62d8710ff8eea54eb9f18548ea38d8018f8abc12004a8a7ca8aab2d2604597dedbfacf6a28a54fc304739fcec6376f2a0a436183d0438fd2d6475a725c82c691f3e826ca4d9285cf74f5f2693521b9c9215407bf439211a58e21190d6d1cb2cc10ee1ed4383663db2434cfef8bf7fcb945cbfd26565341aa8cfb3bdb6a487af29f8556bd72532c3fea0c2c981c087dc07bc72e3747ca3f9c8dd23b480473c9395cb8cf4e143657c81c3a07982d9cd2865d5cef106c01da52722d0518e69bfcefe0ad006366d00bc72e66c1b3c1897f9328e9ef8a66f8aec560e27005ee61a1a3aaf0c622df00e20232081d64240fa59475a395dbb4c5c1e9205e75bfbba1bd52b8aaa28697b4f778ee44e0bb294d19ee315978a1cc10d1ff160838deaec97dcc5326917a2274f4b751e4aecef2bdae63c3630d064b3c297fdb2519baeef22a6b97e170d7cb386f7b5b8e23c45a9cb729ce51e800ba206071ad16c49b774b98670b3815a65873a701a62143164b16850d1996331ff278804950f9f975db2a8eeff1718a150aa8dc4056d54f782bc6b0b2af5381c85fad2fa5fbf81b0eeed33b81184bea759e85cc931d2825159d6fe0d70d776f65a3802712e12cd343c71c6c1d8d013f020e9f174bc45199ae9cc909414fb006f9902d3dfedf0275760be0ebb4723e5f7fa92ab377d171d9e1118f87e404fc33371c3ea54bf5826bd507e78ee2f6cdc564f7ff929bf7453e821b49e85b49892ee9cca185c004b2f38065cf211123ecfaf45e908b3ee231aaaaca90063ec961557511edb94d1534d0d8101b0fc7a1f0aa0aa036e9437da27015d0089e9f3f3d0b30dd8822c3c555c966139b0ba86704f5394b804d0fac875706303e3ad1b47987f2a4f1c0d0934f5e53cf96a74671f1deaef5e5fc7c3b41580cf68daee0c26836cbd5dcea96147e6a2d8328573a7862b0aff441b16af37ce8da77476eaca2f598431bc2b8c7db45049a83e1541967a4abe8b04540224c86aee031f7c5b66293912a8cc2e33137d2147cff7550d913738131ba152b951665a8ce29fd466e80ced1018342b041fcfe578d2252ea487aca8a59be2e61eb826e9e87f8181a5a038ab89057a274ec8eb2796ba9a3d13eb31cc23bc837e76e32be0c5ba23b91663a12961b76f5bfab5aaebf887ce01c3051f6615de22c61851012f99e55abd694bafdbdc6dcb52726145c22d8d362366d81ad646c0640ac98aa9b4d503252edaf328eee4e61962e16c1362c6b9b3c199c0acca8a2435c3227b3c246f891291984d0e894e195d4f643bfcab3e1ef519348c3ed200b05641da99059eb858d05070623eb4ed6f314f613dff98e65dcc45c89d8a19879e3ba5e174a2c003676bb7d94d3b76a52cb34c8018d6b07eb964978be9d33540bd69d6dc2d84b7db8234d9f45bbebb55986f6457b88716f077e675945c7a20e29050d1030f914b79b11ec895d3353ae1b0b9d785a540b5201973d5d2e5e0613be2ffbbe0e52e44eecd67722e2e4e72ece52b2adaa90fe77eaf91a7a81fd44e442f76888088a1d0c8002e610adf8ef80af949c687bb5fabdb3104c4d94ae2ca8b830bf9745c33054cd777b06a8ab7ceda810ba8b317cce5268544646845c1204ce57c4cb3ebdfa4ab282dbd1e09e028ceda9d325428f2454c088b28509f2d38cab12d523c051889bfa0645cd194e49a80074aa9aef2b5d1b30dfcfb8ca69be900d460515582f3c222cc929d2585b005d107f2f80e9cad6dd87e73e051dfae0012d24023b08a49ed62422d9d8a0fde1636b6bce7a8996162a0f26efc74f1ce23e5dc22e96a7faeb7de79e35e24d52c2ab6dc1f597d7e8b47d61edd8942acaea277b3648e9da326edfda3c2b6ddd09886d8b78dcd8873ceebb68570e301090c6785581c0eeb49d3a4d70e11fcc517f625507ee8f4958b70a392262e471b8ade1e294c21403f1b1a2e87f76be8031d3ab6f51b231a20781d191665512d7c4fe6b97e16fd53ec45408e5a09449d27657b29f1d6ca3a39a9c2b3891effbb9995d16db7d85a4f8daca5ce5460bbba348ed0adce56698013f72fdf0181c6b42d82fc11e8abadb44d6369265b2f795ae7844d0dcfd96cdc96b4ae6def7438d620eff6d978dd278612728b20d2d9795e044b43a735e574c9329d0eea58c134b41d5b425e0e0e65964cab677dc85f9b2042bd847be6f759d0e2b67e441eeb203d89842b7e5452d495a5fea1f2c52cf2b5b074dc05662217daa613794a4c1f80bab52de3a4d6fac28fb53fb49f69bf337a99b3d0a5811605eec02e8972d79ced234431bd654aa305bc4f2b16f1925d4fa2477abe08982f20a7718d3834fcd2872c6eb73493771594a3cc1698d7564b78a2c705eca896357b3f185ba3bb6aff6a43580714f74849dece3239ad7062dd9ea3e017fd4a906c5ee2bf79c5da2bda64e30f77a5be6171afd9c88ff585dae1c3d3d07726406828d286ee4ddb729208019bf3b3e4c4df4d67ff666916be8d1d796b00ea87988b3095c0e3c835405921ba0e4d07643988c4ff6a0b7481e5aac5a8c306da7d0312e4529824bfdf42d51ca247d3de4bc3aeaf927c097a8219d8695c908d28ccf0c4abdf66de1eaf8f1fcd6c200a7d51d98bc5853a4049a92227658b03248a0a1de542a8fd0dd7dee63432cb64fb019291a4399c3391c52feb3415f5aa6d7d18e1f62740e6b16dfb01bbc27d251846a1a9c7e79c344530f9901f9b042d86cb83c9ea4c0ce5586e1d36f1a461b6bd3b8365a6efbb44203467524ec67f937d8024dce98bfb201c9f2b7dcb7d95d19b8246a3967f0ae5c681dcf997276e06229f24a5b893c925147d4285a2d736014a0001fc34a820e999edf72e87b50eab80c9532a9a6ef36ddb9299c0e66e87c2f80bfcaec51574e5f180d4249a4dc7a921abe4dd70f6298911d883377f05733da6c62c690e19d26b5a32fa44d2961fedfd64c11a2b695c5b25c4b23cd929f7c5befd8b3d872b940e5f8a35d855bdb3ff5bf66cdaf8035c2b03c1fc1e9858a2f35dca537474c93d4bff6dd63ee3c9353e2e7a8b482f3d9c6c9dfaaa9a73de123b8d2dfb5f1fcfce9c403d1f4787229c8861924c3d6c61c18d7ddac13cc8ac41061456ae4f1fd3b1952cfa4c69b2e067f2ed6f03b9cfa00e25d9c1cc62af7c47a5399a775b2fe49ef7029d577f5ca18e9e3a1c8d650fad524a6e0e1cf08e253ef4dfb399f482cf1c9c2542933b1ac75dbf0c58077ca396a2d81caa7e1eb741d632fab1e206d3c47b2d56654281b5abc60c930478ec0eb839e214071c957360893a65e807ea353f2731af31605bca86e23e4ff06a06cd2a8ab7095709881ddc17fbab73ede55456d24259302bbf1a7186544e7fdb1db3e5ee0c399f832fd35e2f2c7399ee7db8d427fab2723adef2f4a76f989e90344d841a0b9d53e0bb03e76f3c9502d72e60c599756d5257d463b801598d65f9143f442ca399f5e23fd41a1e8743d830c19df6901bf306e05c069693be9a98ee4dfc9c0ac3d1d9af22f291ab09f189d7d3e27192d5833f00f642896c88b7a96a755bad8349f5e40086f59969a26dfbbf01a97963ca2c80e5a738cc72ba2808d288a37d898e11863a327edb09daa787910d0a2d0b6310b58229053299eedeb6b26fb4ddf06a0bd255269eefb7bd49ce418622240cb0751ff7963fc1d256c762f1eeee529d88a66f335119763c5c71cf8d450e0c8c4eb69531df012fbf7f24f0f5a333a7666c382e49de9620ad3d2f2c5b846bf318ed0ab95c7bf63ba60cdb678cb1bd5fa3e22d3c86bfffb79f7b883d81e97c50eb49e973a8e0f16ff20970f89e883c628058bf809f1d231a65e3b5e5dd8860e41beb0fd21fe1af563d3e686e9bd1091e59915c3764e58e301bf845334561a0e1979e0131faa1cf925d52272727d57670e7815c2fc6e7345132858739f231c974980280576069369b78376146884f02868bd39a4f5c0ec83512eedf8d659edc4a5beb7e6ab014af2e7c36b66351e2334cd16922f71fbb0f4ec986541fed7d61a10d876c3b7a6443a184597ace08e498038beb974d034f6feb4e7d4b637c70359753ff924a818b37947ab7b18eea07851497ed5a9422548ca986de8c885a0a3b0ab4d6e95d040db8368ad3ce06cd32eb62122a038dbdf3f3401288f891c2254f7830233c5afd3f0bfe23f1346357bffd394d525d9819bc195db2b3699ec0ffad9ce3cb57621c14b58704815f2f75895b8d2cadace285f2098dc29c48125a946e65049eee4f8041f825637e8547e6bc05e6dcd33c29a20321fa376fb4c65c1b099d7ddb6072bf45c6e8456687d1dab5ddb9814361e1854bffecf8ce12405bcd57bacb15c9d5610dc882cfff8c798080eacf270fd60313bc13812a80dadd1dc2903aca03e93c2430a7ffeb66b96127e9bddb02ed84814e274bef4e904592d84c62b9dee99d960fde79f96c8df964f78b5e1cff42d3d5f519c8450827c5dd500a32a38caeb782c7fe516d47440403d82c291c065da014f07d1df83480e80318a70c9ddb48f60778aed1e9880c77821c296a47395cdff2062156c05f20297087fc3953ef9779c34b86a2299272a11e6de55e703944939f9ded2e3f999efa4e3aef5f6b560ce1c5e027da3fe413993844530ef267c79024109698cce5f8ff8cbb9c5b2e2b21fedd6824ac07151e5a253031201797e627f3240ff191162d84256dc5c804bec3b968b256e22cca689ef89bef0db8676fbdb861488c853b9b57493c71daf068020d0c7a1eda079ef4dea181c1ca0b026e0c10f97bb74cfe3ee6e4c58bb957c63d062ebfad36a7eb0ef1ee4db16af262d9c3407efa5b2837b7a6b2a1c871eeeaf33f1d38317e50ef1b30aa06bc86dbfc4dd87286036a75541ea8cf4a9f0cdbe9223ed40c70ac59cd664a88496f98137d6c870b8f39587758fcf2f74bdb60796b7a236eae0e19beaec24f951b173715d3b5b6d136f9240eecdf397d5b3f34518fd5f49ed82b263c6e2715fb35c5fbaf9189e3ce140280823c4759b01afdbea5ca6309a2f762ea5758ec30f4028ad9a6f6960c757523909d878b14d0e13ebcf9aba2d17146d086ec3a3628662305a6cac8d055d5565f51f48124eb8eb78066113772d1eab821cbab8595fd76d62454d16ee26557f78fde4bc6f12779255d6e575af34a15423753e9d64f30edd8e8c43a9bc5e7a5b875838d7cb497906e3d37253f3615e8f4b607b6b26d1dcb613762a35a49bdeff8c7d9a0dc2c2820270e4a815e65cd1883a0fff3008b8da0d115b6365cd587d123f2df4383d941f0a2744ae0efc224220ef25ac575591130b92a36ed621a956f26e52bda2bb93342adf9832c91d49631e724fb4ebeade09292c06e4f5fc86c5f8e3d0da552897352d27d5c2b7123b4ba905186a6ecf8588be321124e8ada06df33bc4370665d113831bb34500fd7d4104b4c3c9b6a9ee832bc2c14c8d79afdfa0b98b544f2e4be2d1843afaa7bacfbd51d179006316de1ed54668456cd00c5525a1f4f5cd3741ffd2b73c25fd7427aaaf0b0f94514be59029b607983d921b80fb9de7a994c8d0fa28d8fdec242bbd1340c5bd99c49e6dc9648d96373f821a73409639ad853b2c6f3093f96bd9095dde63238b35c37fcec7ce21581feea11540ffdc46b375d6795b16dd0b4eeebd9433358637bf29b55642a7eda81acd80a971e1cb3e0830abaee118c2ea954ec0a64dd988b21c88a1e492c3b409782995b3811fad55d51fe17a8cb3df248259f6f5d7f44ae05110d437cbb2d10815ef62c67c7f66e1862ec035e427b746cb49652a3edbf1772228319c1ad2f341980edd7cea22ccded35d2e684f1d50f95538d8d94b92cb3d267332da4fee89d6287d9408853cbe7fa2e23a39a60ccbdce2d8c9184ca60845db45d91d26a0c9030ab2b027ded7e61c9da448e95981adfc5399e9f9e3f4eec83ddd5b5301513160fe7f0db97009bf10bc4ae13e0c99cd857f9bc18fe33e36e5acce0b92991128d82f8fccd6653e22e3b5edb4b2e964b0b9a17bb0b964de902f15e89ffcdd8ff84b09ad9958d82f9776f1c4cc3995a54ca703019f2250419ecd54fbf03e33c15a05495a00a22495c64e32a297aa18b0e7d6ca7351698e96647567448bcfa2c56efe27946c7c486ae98a47547aaa370dad3b6d8681233fc9e559c66ba5ee041e29ba52d01504b050e6591b1f2af995cb3abfc172304a527726bc19a1d43395f83ea76082efce627d36c1d4aff46dc330309cf19c6e9ef77754f5fbeba9964886f205ce6e76b72531bff82d2ee87667c5482f406143d8534e1b3d77d2e541f298515758d8a03c55781f97263046feacfd85d52a1733c54e4013d2db69c4bc5fdfcc4fe9d69222c9a43522201736ca7fbb90d7c63172c8bfae41d7e8333f6fe61547cb020a0e9210f43a6b06dc57213b4f94fe1edd39c2c1d8a870165ee8d07bc9a75090ee632585fa4f37435703b4211448ee1dc5dc24af90c5ae7e445d7051d32eb3a570d2041790d87e05b54fa13646844fa1cb4b03028f0e8f37b39b47a85624bfa493f71ce53db1a41e6fe64e18172ef9f778d6e5fc332c2c544b4b136ab8cd4354c4f248597e6095fdd474ee2cbdc32c4cfdb9f9f3018d876b6df81795c43f3b06c1533b81338b57a39dce91a0907a765cbe9aa0bcc7af1189298a2f0da7836e4f02170133f9b44d43894c8479ca142a0646c2749c224b0013b5789309fe339a5f5a88363f837681fed9aab79e60594b6110d1e30512e9ec6eb84fb9db859c296bbea3372ea9a8648de1e7e863159ee12869c54d8ddff12c3fcff78c112eb7a55d886887500af6962a6dd6b4f8e7e7ca68aa75024a40c4f113d6c2f850130445d63b78d4231563ef9b0eb5e5ea86583690001577b2f0790f349630c2a22fc41184f75ebde6f1ac4a0a5596ae20f286d48c22ddb069f19d2c5a316d2e35b9d95f342e3d0b87123564400b4cacf51d71197efeac029687ada8bc814c3e5f052affc75df83c7f8a15a311340748fe798195cb051873265b45049f0e68330b6f15219ec42a8a1f179e7c6f984a6f4fd10ebdf1b3019d64ebc4a6db79b0e0de19f18898c4448415e60dfb37a7e71dfe25bffb579cdd1c15fd6f5db4c3f83dbbf171cb3290ff5b2e8bf7927841a7446ca9eba6719828a5472518bb989f32deea19ae53c4d55974e18d52b6d2a7f080bf0a978bc3763a071f90fb42d6d8c67be1ab9a93f76d85939fe212e1b8e74f09f31729c8bd505a667bc05d963e18783b6a33172d1cfbb9f0634f5d1a79ede7cb143658f15b0e56f7ac4dcda94d4c2b40ad8c0d0031a03c49b651d6bec0e437baaf07ed25b008042ddd64de28496e47f8f9b455595c87c080e1eec880bd11133561e4b7f3b134fdd061086ebdfbc36908ce11033b9c26f29f42d11f079b8aba7573b52ac63f965936f28deb9c42c284ef1067b1f6f81e24e7f084b9d74d5a73c773c09f573d60c93f655f6740cb968569bc028a18e2f5ee1b7ed49d1c58e5916e6771822466e35e883ae336f86a83dd814e5fa16edec16f10dda48fb4a5eef27f5b3e6525754760a7c2335868e244cd15ee13d03cf5d0e41f3783ccf7d7e0c952d8277a95c98dc1a8ae1057720949fc37cff068e1d3ec86a0eaaa0071c61bae37ed64734aaba75c973084f9dc2b4307aecf6b6bfecfef42b132861bcb5479131b3814e285f021b8100927538f91517441f38951789fae065fe608cc6f1d9b09cbb9eeb33ad031d2dba967f46c072e4ce6454007f7f3e37532695a3465293389fdad428882deea6f999e1320869752720d6023e0cc2dd33d93f8181b758fa753b86b19ee12dae27a22b85c721466728cbc2b4eaba38d2b2d9bf63ae78f1cea5845932967f5f2c2b3a40cc4f4342b5095ff6037b21e19eade7b5aae5103d760dbfc47afd988440783dbbbe8b94798edc7aef2e2feec22f8522a66fbee3564bf560bcfcc3a4493c4a2ea5b8150994e931125a6e6838dad39db57e9a81bd26f2a832dab2749ef048c4261f0cac379cce8eeccd0acdf14c566a6a226d34e07545dd00b2976b8605c4d38918578e2ae950fb180262681cab48ac0c08e1d702c76ae8894bd9b605581648755d5704037e9912df1c75b31e7b15516f8ad3f2398f7907b66342a7d6dd14fe380e320399342e2bc24631a0b31ab303e233c2d0d5526de5b8464e8b4d46c06f7f3e863cfe041142961d52708e0cbddf48a6119c09f450c5988e79ade11620a336c07ee71ce96219369ba17055ac2d2e41e152e8ce143a6ab08be4b14ddc28ebcbe905d6f9e65967a70d5fd2383a2182e3caf6b66d4853621542a0672566befd040ac3ff111e074d566168197857bcf3367206fc0106fd3dbfeee22d25b5a8840448db6c94a991ce692f764dd9990043f95d8d9f4bf804c5d446248c6124cfe889a23e2006d782ce7ff722abee9754edc22a9a2b3063a9af21626057e35818c79a23b8e5742209364ba0b81e6833429a735f1a91e8897e3d26614d55803412f98bdb67c848160e497feaf84c00ace5ff52943ee2a64861f67fb1d5b8dae2a41c30d28309d04108e5738aeb3b8881f3fbb376e7a7778d44a5a41fa7100102c13b4806009174129142c021c1302ef690b13e7ecfa2596ca3066d884c8b13fa9fe8b11286588e7ee86046c8deff2357e72d316a5ad4134276aac86d58b7756288573ec1703c979e3dda505640fb44c4f226cef780dc244a7feec648772cdb604d95c12774d4dc1c7b09b351eb7bf638818fb495cd5e22b396d9665b1ab16556ffea7e7f9f5eb0531495b7423a374e7262478a9785b35af8f9f4897be6cb3b5361b578f5c3d2eacfacbb547a28a2a2faaed7df0a36ac6a0c1b65d69de6b3fd46da181eca51d9a42d3b9477d3ea00e75878c9ee723848bf6051a6aa24fa7cea28e962b689073a48cccefb7ae7127eb4057777ea457621e9192cacb1f9717ad93c7faefc6eb0a01444228df3cdee8fa0dfb3f5e68e42c4da56355657b143d944d5b3fb1146fadd80a299cca2c9f763f411a306f4bf1cd8bef3eb412b4b322b15b70bb5e4b9522708e2600319f4f65f3d4d1c0331d731f92fff989f12f85e8320bdcea5443e2699c1904017566311a3fe018b7674b3d4d7ee87da8ebb04b67d271443d6cf7b76af62c15f5d575f61390793400dba0108daa277009164f711f03a14c6831517e5330b701274fd1f04aa0e02bcc62ef0cfa23eb9334b911cd51cf57a9fd8471c46c17bbeceb0d6f5169fd4fd047c8cb9c0f47be526fc2b8f874ad0f4ded8e2ff37c5a25efe7c1ee05268a8d6cfb6d59ccafd98a1c3115c29a6b4782ba908b7180426ad94d4755b9b9197c57576a4c48a9bd7853aa1f8be232bb42990a333845901f3a0626b70209b89d49502592afa3d793ff782aaa4dea73003f0d0670c7d1c6a19d2f578dab22f070acad481a4a3c5acf61d52d4840615d8349041c103a2a3aa8bcd304f19b1a5dd6105664f1a090c1083db1744b2f26a3e578b799665652cbcaf5350c0f91614f07e82dc9d4f4e9bf265b6f54bc11c1093c1642bddae1d8766cad9c8ab56cbea0679b3355fd754569e1f90509f96a87677f09ab029020ea907dc8dfee206bdd3db24288067a270e439c3419f8f1c6192597f8a8be55b3f6f8a35fa167c0cacfcc671390aaca09b1431b3a54b0593c6e904af39578a7d2aa891aaaeed2f144bfa05843aa9354a0b4ef48ac3e528af720ec74c796bc0a2fac4f7ffe9cfbd6093b8feb59674a524e9a620fe324731ea9485949aa599c675f1644460703887f18c18d348d0e8f88c4037b586daadf5fe3031a0ea1c20349c4722b9ccea19f8425dc84eb4b6914f1f5951e5855b5fb5d2fb577db649e23e88610ca1af01f95a69b58c5ef1c3c1c6cc35cf111291c9059b652e1ef4be3fe7268b0105f2104e1d4c79c8c3ae53448294dfcc47c9c1f7cc2cf3042cf2ea1ec126722c0100688ae65cca2d73f7e1371fe19d27e509f67fb4a2e21e9719dcdf0224498789a33dd497efb2415ac802bb6be7c379c8003d1233cbd0c743a04056c7a32024d87382b64fc79ea61b0911fcde3957e078d35f569fe35a6a6625243571685be1247e0787720f1634ce9666185c4db68bee7bbd5fac4c5dc1843eccc2e10c494f8f81b067cb089e19a7d32b9eed8984bc9267bde8d28d3f87c54dc3ca0437296f60387cc25c718651643cd1da3fe56714fc6ae130a63703a0d10bc175c706152b7df49ddfd2f4c26fe114c36a18cdd73edcb62f9a3fa58d3065225698c7119cd48f795360b8acc04310c06dd3dc3d76300ceaeef2deeddf15ad949228c445b13d9794aed94c5923fe4bbca6002bb0763bf48f51bd821455f4123ca7db51707cb8323d4da22d9a7abf93feab2c992e2ba575bf99fcde2336d9449a84ca4c025defbdd6e5c5de6dd61624e697ab4ff134084587cfbc1fd7d9c499aaa906ffe7246e6a110a35bb3239851fdc41dddad25f492cc54c5e4cf248e781a22a63e566002878e9eae09be32679a5b7d3b202ae95958d478fc4d6823976f6ca44429e1f88d851208d63fcd602a6bf00d53e1cbf621736e85673655787182ba737e690d2732c3d63e24c00d465177fd4a85692ae3a503a7baa2a62307e156faa3dee6724d11669d11c7aefe90f299925a30f441185fc456097e1e9df83439ebbd61d3800da2fb2e8c068f0f025915a32d496b6e38ad2ade428955274563e1158739995017b42bb8c0b5ffb978a72bf667c062eef63d64b399f1ccae862cc6230fd76f03ba8e8a6539d34c38c6afd46b79a68b5d821a659becff1577100a69c858e91e2051ae26940af5af2a45eec596106fcb1f61eb86fed897bca8a94d98dcf3fed213248955d14efe203777f33694c842e03a90b9954ea6a3a3dd2389b97840eac5e9a468ae6cc68f40572112f6d7f82b98ba0b998847032b1394c3c1c11331a6d137db623fbee9c6be76531e9c004c25794f9a0d300c393d8498e31cd069f18941c6d9a647dcef8d048569ec50cbd20fd25abdc93c9fd3bb3162abc920e48d580491ad7416e67155a1ce643e7681c1ef7356ecadec85f4a6ed73de5e15849c0196c56f131764f0e9623cccd13335eab58270e3823774215fc1ab6ca22cc20beb74101157eb84db94487d3d3a7d1cdce17f5532f74250bb37b3e11230ebe439c173fa8ea4bfc0d77cdb63c71f3f2d42ea32949ead7feb317c4fef0137b33be4c56716124d50c798c9bfcf62dae24a72ce0e65b3837e4644c792272b252c271e8ab17fc131156c25f30d7beef04cc1cdc3292938968bf79c3ca03b5e4ab673e5a6496fb58469c20ff423e2761c4c8ecef335ec4970bf1a60a6aea598b5e1dc81c9a31ac256e76e27a53464f8d43af1b321fc78c68b9171f3a7cdc6f5ba688735282c0b6b3050a58aeeb682faa4f5ff2ffaedd132ef314903c7ca9822e231fb57b6487fba450bcca159cc0846e0cf5d7051016d5b11dd2e2b247c04effbfe4f9d9416304fcc21798436f39e7fdbaa325c581745d281979bbea2889bc58df4a833693e7aeb1e2916aafe6a83f4404b1f1e59bcf3ff2db947720390b8cb284213ab0c72434bc53a5508754ba48cf4c472e4d88f5bebdf9173de752ef9ec1c293c5d40b6dc6eacd5eb28ba8ba56c43898369fae45f015443b64daca1241fabfd57fca1cdcdc02bb321bae979b2cbfade6a12a3075821fa5a26007b373c1a04ee61425259b5fec0075fdb908983e413de574539cf51660a2594c2e0e90c6b91af016d333539c9a32f7218d821e1b63b9f5912572c3d0eb8b5875d540ff598f27936382600cc13455489d6c59c4002e91aacae009962bc5a7bdecddcb256d76aed526fd93808925b8af1a67704f3c3a1fe3f20dcd73c39fac23ab290703d3eb426071935b71e7cb2070aa10f72390a9c3564e9c16c8e7cffa8e32fa3535c4ccef234991048ae467ac9b9f04d388abfd58e9e6d57e3264c08ce7a89a19a869e0796aabcdcf18451fd62fd236d0bb027bd18fe517f01f2cc77a89db0a4d7ebf79760a5a0afd74d4521d2d6b8531ddea2b444f947e7ebda9e94990b2437061fa63c787dc3427b442ee8fe250dacaf3e81041b71e6e24d1a7f4f6efff5cb3253f54c72c36f5e5c16d503ea0c2300b29365f9e554e6a72d910d11b4a9bdf21d5ed2ced7f039b98125b178d9fe1fa564a5052319f9084c54b56a5fa73553fdc60aff8a7385329f269ede78088f32cec3e87ae6ffc54623969e7255e937a5941a1db82e6cc2e6d449b322c3c928d3c5f0ab325303a01b094cde8cb34a56564d4eba84907235e229b1ab361ac9adaeb465ae872773a3c0fae97c3cd4d4be463162aefc73acfe428119e3321538b47f66d31e358222630f8553799133dca680a247267d03d2ce287db8443259ef2e7a396d0b3040cc3b52f3feb6230b7eed30c32292b13a4a58e3c11a3443172bc68c695aaf9851feb55101491c5bfda19c54aebca8731a35a36db46a6203d79e0cbc9d797100274aa28cce0651f4a4ab0fcb775bd4e7fb9b084840177e7fe41b8b7f8b166c8d6a61f651a170346040466a0a2cd433b743eaa5d2087ce8794f9f37be7b5a34c2edd2908d95c223dcdb9df72590c388c39155c0073153e07bc270c50746c107a1fcda47de669ef9874d3d3d711e852fbdf5cdba5c8330f8c9cee1194f0c6549c21bc3bd4223d185536fba6bf7cc8a57e3c9c5205702118be3aa797ebade81c42b627f04bfec00ebdf9b313710f1c621c8b05e79474cc7faaafbf378415d245a30308bb07b54829440f2ecf7f27994d1a8a997dcdc9f3bcf916c364fa49ee21dc470cabd03718c0e6b781bc08481dc06c9c652bcf3327c496be936534ba5a911e3b4d0d1e492919f5db019b2bd4676d1739cd3b66d0827713408ee89371de9263687ce721927dc47c71a67b9641981e62e9cb5a6cec06678bd4d920b5168bb0a3b2f5ce0fba74f6a03c5bf3dbbede53c677bd59026258071343dca307e5271f82106f40e940df1aefb84129bb4fd92fe4be83c5a1427e00f41bd9f70eb5e113a830dda9d54fc113fb2c9e4cd27928f2d9573adf0b9d04945b3eacfd7a58a8d3a27e2c7cdf7cd656e2446065fa3692e4f25b1edb3e5a4b3ec148289e7fb32674f9ddca8f2bf7157780bb6b69dacedf04f65deade92ce3adb213dc5cb22ad3348e89581f50926b33c1f6cb84603955f180ebd5715095814c9f4c04b7c4ec7c1ff7ec105d376b3e0532dd8ddced8e877b0162ebb6b2518258656925b10ccbb8f6bcf2035a23aaf288f9ad7fbf3f8dd6c8b539364c4b5ea45e58c347cfa7b82ecee9c093d900be06ddb91b14a64fd2abcf9d619b7472045604a96c00bd1a5c71e5e0945af0ddae6925aa87ee036fe00c1b122243ffe2ca3a9a577dbac14dc78796c1d9eab238454985dcb54a20c1d60e90af432b3cd3cb1a1a211867a01ec603e3a8f56ca259be99f0b1ccb258cd227c408c6aaea0d9846d3f8170131f415202fa804d355189af644c96c301e314594f1879d5cb42a77798d5012afd16090c8849850a56f3aaad5e97fae03c9bb47d2afb3bfe1f70f894d4fdbcbf056591dded175afe6e742d44f0d305b86a77a4860905acefdef512c7bb2bb701bad3c2d5323aaf1fdf7c70ec2927778a1d70587cd8150f98f93de7b73624b4ba1f4679202f17b3299dbfdca77365614a0a1194892c7aaeeeaf214179a5d5fd0c6148abc69c6720e104f78c5eae2e15d5114133805cf89ed460b4b6b643814c885dd8cf9c3bdf2e9e10ac935ab4a2ee044ce54fceb401d84b80287306cb72f29c461115f0fe5033a8b34b4af13f878c41677243a202f90b33458a46145642a039574e7125e9475748f76e5f36338d727ba754d1d078d0c360e5b161125638a9f8654fc9ecb34ee7ebdcd0c2b20400bccfd5d1d01361fa9fe9a036999b53f6e8bb6dadff7210836c15cd6c66b7df389b5e329a9489124cba25cee928c475a92a193c745943d463b022ee8688e9ded4af48aa9b80735d2266be66f263e1bb782d8a426047376c38b53d480075dd8ac55cb9331581bd0ec9d94acc96bf09918f55819f47d537cde08b761ab1795d8a364d2e848031a891813d1ff2455e9428d7561b986710676ae20fb2ee002eacf75925086531cd934dd6261cd42d1a2771169b40cdfd1e29a97a3f136d175cc7f05052f21cdbaa6b3d05cb8616f8f2226291356066d819682a4f4d0c71a664853f5af7ce152020261129b754efe8e3ec408ab9e0ba2ba6cfabeda87ea660373e12f81bbba3272da8c8548205af1a386537b44a4f651510b6a9df15c7ea2ad83922e92872adf17c39b812d8f6329bc8822dbf276dc05fa7524051adca661466c6db4a8f66e55774954b0aabe47ab6d2d12dde1a296b6502e22c18ca7690970a7c20e42013df6cf3bfdec112d5cdb62d5e30daaef553c5420e79ef8a3ac5a972326164f7b988a2936a24b00e0651bdf050354b929a156eec7352581e88aa4f3e3153013aab4589b607482f9da158173552db97195e3d23e8cfafd07a891c603154573da6701c481ba4b19c685099647d0e864b8328804fe88582ba297b21a6e60fe630e212edb727f24ae2434f54daca5080677d54fc30ba6a3e100b2d843e26d5fd43f892a5b4d66f49dfcffe2665e63d5449eea4f891c601a07f7e8d5df03cda6d218147612b934826531f8edbdb528566b50725a01b299bd47df2ef3ce4566cc7faba7ad5d73dbb4c433f1ac2f2c93d8f855b336ecc704edb78d0bee533528be9b9e12606749a4cdd5bcb79122aa1726d9e8447cc9fb15a90cfb39f2cdc8944b6c673e8ca3ef96ce5e1d0c8bfd074e328ddaaa2b980b4ad84f63b1f9ac09e7d991e0626379a14ef4dc82d38c6dc71bbb599119d1743ec6ed250c21ba8131d43cc86cf51cbe7bcc6bf3a5bb3cde21ab83275c26cecac4aed9823b9b4a13b74202844b87f0f820aa09d83517cec43436ec96fad63ce8f6aa312f3731ef265abcd4cddb36404cc314cfdfac7ec4d37d1e59f98492181a2a0411c6ab285600d5eee23457f927d1438c95f7ed35f2d5c78abb684626aca8550692a3c216847299c2daa5fb0441143e35a5a4eaf244a0231e9629b9c8873813644d7626977240cf7cb3fd6315319b8886547e29a233a7ec8704764d7c23fd005d4bd13c9b7a5bab0d8a9dd107e53d30148904031de765e2863b4fd6d9087340b9d3b616f8aaf0024589ba9de1c9317afd54b4842c11924dbe09d8797a271358caea1de3ba07c866fc15bb95bc81abf7b2d62a344c967a0f453c54f9e46aac3206680cd7ad430f0e05fae8f3fa65ae184bec03aabab2fcc9ccdb5be6c9719f5b4889958fda2064aaad459fadb9962eafb9277b2b8b98f6e06f1d452f514ad2374c8b83a6994c09daf0b4505ad9e6e0db3bb6ca52b83493c63322918c09d620969aefee9c494926c59fe22e4d9c19ca00e13b17ffcacc3f02b21bd5c40b5721aa59ef288600cf93333b74f496b5804e0d6bc9f47c7f9c859574a30f7e7d44a6e6353bd76ca105c00f617546bea09b314ddd2ab36e95d8973097907e92a44c1521df37f89ed7086dc6389a5d2498030da8db68d99b87802e8604781d6f650fc3cafaff0ee49460c14d0b0ea532ab0263579aa239ee88b95094242c4980847b7cb98eeb33c2a2dfaeda08cec2363ffc4953d33fed1ec13e199489661e908e6949ff0d8a7b3e1df63b53cbeb41cdf2de19adedea9237b3b7d3ad6533d1c59b40579e507e1125e66cd9b6e43241c6a0c14f3eac5eb0dff375f3430e4c39b82ace68e8d40004f0c727f86ee4fdbfc202d23d147834d1f343f6ab63bd82f3ce09362d8df19804697de4668c59206ff228fb70259bd16c337d60349c0d1edd969c11f5c644dc7f00f71b95bc93307cf573875ab42ef158416a9773f3ff73477d2e3a57c7f55329fc9ba105be46d60570bc132b76750a2d30ec80f33624654ec85469c1afd11fdb48e91d791bf4a0bfdf959ccd99cc58c7318529493a48c7471d8cc60a7cb398e9a5237ca14b6442c5704918a003856a92491506fa892c1c3d0d0b0c749e506c654ce64aaa79ffb9a05f1a8aa7b88f429f7003a7908803151d67dbafed57ad30ca9bdc47803d37099793415ed52d2e3cbeb2e4749fa457a67ca637e02132140acc033cc0a36d5bf25e225be056a1d0f9976e369f9d854df16bcee44291887069520c8d05d1f6e88e3c117628ecbf94ff93ff575c626f059669077e0700346e12969fe57ff0628685e02ca142f9d8299e045e4eb8474b8c6218db77a8df36a3f70a78f262e631590397d5d645653c100e6418376039e655964f9ad8cae0ce32453fcf82ebea9538aa4ec407925cb994616caa1e6f1d08a9d2a598e8d49fbc78dd852a0702c8dff2db06fbe2dca7481e3120c6cc82cbee8081ea4f4eb60d4102adb202bf68529cc932c73856df0184319e2a9d7540bbece0348e63a6db6ea51edc2b304233a42b734710d40493004fea97d53bc00874726cb9b18dbc8897956e8d3451e08526d34fb884070607739f172e108a07fc169bbd0494b35f9a041894f545f6ac1336e5365181dcffb1705fcb81638258ffc0cdfbfd253ec518af1ac8e98d8f66ec340c0611a6a9a443a60a419f39481c92cc446bb13508a562a6dbfe00ed7ca16d792ee7d1165122d629d09119c43b59a8733f07a0c272bb2d193a89e479cef0241f531a14a7ccc7006e3e548c639c612d4e87c3ff363011de9cb400457b646977bed7b5c0df711eeb6e03c5ff83d72174fbf2560600fac66512aaff61140987e5476491ceed5916bf79b981047e3994d388e474d1f21b9b4641f66e34726f080916be33ff3c4494b21c5515e609fbe6e0867936f8676cb8a19e88623c40698d9c4ab69f84e782e2feafce84828d52cdf445559d23e8f64115714b6f4aaad712c100658ceac6719c244085cb0f6b404280670120d2331a4a28c59ef48636855eea27e41b7075c37581b3073889e511744e534537dbef9f48bcd8c8b1651611ea42d0c32f6ebbb38331fdaa0889685a610549610e9f09c465f90d86a66bccf481911cf48de12df0cdf66ad07a9585cc5de972f50dafab86b57ec5795a302e1b2d758abf62d0043520213b6c8f762269d7d33a0cb4b110a9fb5f884df2b2e7602351fd73872ee2e34ed2579dd1e68f5f4eb5b6e4fe8956966208f8cbdd97e98597be417a98fbe00817dc999107fb2e58746ac956717813ffa23258f2065c8af992140cc3f49d95c727116b2995d7c27fea64b6e88ae46d15b411d48750b8939e19c5b617933bb7cdfb61f7704482152055b17aaba03a7fd385d54cf2acb9efbbd263f8ee8bee5945b9b8324d7f50de4029f25cfcc1e34e66f9738f229421ffe50ca69d8f9f6bc6e2e8d3e58776e9804c6e354eba626a04dbda8cb0c691a5b1e11b8105f52753e8325e83d512ac5023f7c3ab17ba840e31caccee7b9d8083e0107a175931872e4a52dd983903c15abef0ba923cfdaf8e12db1f020956bea7f7e9ba88ee9fda590ad3f8d50ffa004e216903a8faeb666bb602fa5e0e6ea0873a62300983df1d15b11c4fdd2bfc10744d8599bb35b4d0161a0187d6bd6ca6753c1bf7c8e321d9fe2a824e98a165b566cc554fb7743065cb0a9754f47a6a5efc97989126f25372ae9342dc468934723afea87fa5c6c5c9606d6132842bb9fe327652df70974939dbc0fda3d2d4c6a01dbdcda10d34833c2e6cb0ed0bf22b61e292b625c504b5f18f11a7a30dcf68a0c7304dabbcea6ac34ff561cf9d16f217701d3cd14639d7189f0704c74716348c0912fada9927e975acefbdb5c0e194bc0969fe0c87dda23710b1127ceff3bf54db6276c28294ea67b3bafb3c660a8b3dfae65a9371555a6a8e78387cc398cbedb716de0ee83fd91d9b559f00946cfae772287df1795a05544b186e810457f67366f53584f49fa9d40533b33a01193995d27bf69fd40d6e1b2cb78bb27355a7c0ecc81656ff716bde9e75c78b772e9be48b25d8f9fe8ed035ac38da5309ac7571de177b08944b2c0d90e50894f6f31ce9cf1c2151199c0f900511a001abe9282ffc4212a862d1bffdf8ae75869a533c1a03c9900453f6fcdb78e3f8ee3ac41bef9f4f5e393b2b323a1e05a329a2a9fd7df20d7df8ff2c3188987fb404f949f49b9a4c4eecf6b39b972b562cc4a778ea0d2629f66b5ebc4d75b2006a617dd56b6ebb73e1388dfa90f9a015518887c2bc1d2af38a4ef5f40a858a77d1d2833ff223b7c75431b20f7a4ace1d247c1031f8ec83b08d4456580e6e30d8a55c321aee045600c54ca7ec45d34ef83d047c19a97b9f66d41d5f15d7d1c647865be4c31d3bd2d4a4b1e2f8569a4e62583062db8abae84b3676ca578693b7b24d6d649af3cfe891da87de92c27494fb55a321fa724b742747760f19fca1c02ed5a63b45396f9996361bbf666c1940b8765bdfaff778574a0c97b3e71c2f8d6db276bee7f7da7f3ee06718f95e84f7193437afa48289d878d1c6bca68054b5a2048c01792702ef0ba07428c7b2dc6fbb7e7c924e913cb04fc78a1f5cecd91678e108fb6d4c12f3f8f302b8e02a900d7f5c51911f36698e2c9f1a157ec635e4f08b573ee48b36e575bab86c807fc33f79b205183667b38760fac2909719bb89be1b7e3dee38432a133dd64c580e76b64008af51fa17b6a8d2059b045467091d6cb40e61f101ca83bf2cf9db24eba574488e94fd1c048620dd0df7cf92d20fde243540acfd04151336269da80e278071fcb1e8ff05f3c13db8265063f484d9e4a4e42a5d86b75aee8b6b523fade7d468a8c1337c2aba032145b087eecf36dab8a54a23d297e6bd84a8f462423df693d4308160d6b8aca0b0c7e927fa491a7e21e8e70d89d7b255721e88ab0e439e9a3f3d3fc0ff8908181b53fea2c3dc3b54445988963545691424858317a11ed462a5af6b854183fc9eefc1d45f63d1c19b57398cc89340bfafeec8f2e9d5eaa7cd6bfdd4f0726b0055fad8b65bed7a8393b807b43dc169cc6fd7bfd6f96c5ab96c7142ca3bab00da29efa6ab532d335bc69380dde6b2ab4944b089d4739bc99c7980945f50f815e1114e7be64c6b283a48a85cee90260311898580e9f3ed126521320fbcff0ffd7676f3966424904cfcb21343cae028960d6aca7d300d927b39c0eab8d3e3100eb1347eba84964c899f9c850be29fa081bda81022caba7e45266aac6d984605e3d197979f14650496c782cbbedc399049c7c518a3ae65219b52c31ec2c76b8f831921a57ef728ee64c1afce78c0c3bc52d52c799124c36b92e5e224c194506fe3ae2daf8fb6c0b22c07fa97f3c9d7789738cb9b21c68b0e1730b19e058c6cabe0e1d0528c039c4dcaca5bb078d11939d209a63d35730474eb7e30e2ffa2c6373c4cd21efe08f6b0acf3b02bb0022d37dd162312da0aef3027af5cd843b94e573bd76bb3b22e6c24e0114b75c01eece9b60f028166333f20df1656d3bd911f5c39c11283988c3ad7bb283b9ed8727d094ddf4f013f22da650fd34485912387cbc594d18ef57cf4f9a409fcdea935f3b5baa5a8888cacf79402032cf04513fda16dfc3a5497e0ab011900d89ec81c76912560453e92aa202516eca45802dadc36560f7607f2ef8e1c8eb77589941428d979005e8379bd1fa622909ba13f77c59032089c4269760bffa4c3ac66ef135677cbfd497c64ca261087e7e3d1afdaf665076b20b48e702b7892f84f2615a9960ba17ffc5ad4fe86a7aa3f522768c1d1ce31884494e6bf0fcbe6df8c9b994280afb1874118d368090b869f4a3efcc5e453f667473554453f0afa52f112d4ad237294ee0854c0cce11ea4771a11eab322b688692aa1c727e01f69cc3670c1587758fbb2f33803b597fb9a3ceeba107b3ec2d2032b989c557605321ad31ec6f77b19ff3110043db446bd0b36610bc9eb82e2c37e2113bcbdcdefe5b2d5f0ac0dacea3e7159a2aa4d0a7c34c55c1bc4f3171f0b3f3abd1cb56342dbe8b54be1861baac3943d3f921ec27724ba86f4b4884fd90f3246494190e429cad0efc4b568acc077e7a3564a3876ce534359be6664cb4779b4d4ddaffabc1f635252cf800421f7e9bad7b09cfd5e8f938caf5ba10a7aec41780c77c83a8083ee960d4c07f1e7380fb4d198bef62af1ec3c17dfc45bb17ffd2a63d1a64701f027a6090a07480ad3a19b905b680730574d7c76329d6365d5bc17d21f348d999c2612eea025a8e43d319bf9877e98c2e546187071d51df6e6e23f56484084f596057ee76387e6e32e473f729fb976d3be0d4209086beab2d5b7e03fe9cdca090e5fb83e644190a8659825d99a50c3b261fb3f670cfafcbc2ae6e96c9edb29b3172ab6ef6d90baf7335f1ad737d0620cca8e0f3b31934ebd0017cf1c6e4461007fc283ab3e886c93ac47ce1e3b5e159c7ee4bbc906ed8dd741a51c46a3edd8d198577cb6d8d349b34d02b183c174a3623d3e984e28dd143f5d1f30cfa8b71629467d21adc3f0a764340a82e26056b05bb724514aecf19eae587d52fd4d32c4207fe385a1082cfc754aa9df35046f3d72c5411a0d603aa6ffe9d987afa323894c2e4f3d91a93bd776708b5b86d6d813a6307d305a7757277784c14124c62161d82f43b20557437110f9485e9b6b604279648aeb4b95d96b727af56e970692cfa80a4a39e647778be2a4496fe4c24b4204374c25f9ff72bc977d7f1eed5570cf71a03070f58c64aaf2c287b8d6e34267f9a29171d24a4bec7e48f2ae10cafa4486a9065899bc1dbdad7eb8528d292c15520af583023cf396cb6d5f3052e5197213841791498ff442d039369a817edbd5f7876d423e2375330c6b8c2669d84431220c29b5eced96c0d6a9942e24b23a1c3e2993edb3eb4354f2c4524199f06c5e8f0af0f60f48e7b78f8d7377a91431bf9f4cd1cd8679ffdf2865dca4aa15f5b38b69a3d889a8076f504ebdcd61af448d45dfbafbc7250e9cc8a8217403b93961f2852b6ceb664c97d12d3225d8b02870bb41bc3f169f058713a1465a60f51e1ff94ca70d9501299e2a1551db6804b0cbaf0e70bed313e34e712db545c604a18623dc28069e011a43ec93c8f15dab2c2ad62cd779529720fe55d309b7374d7f7e3c28ceda3ba05411fc0eb774f0fa960b68de74db0c4154d11f2ee10ab25f3f03690ac9e4848d46ed87ff978ac0346f516dc3782fa6a5740a6d508acedeb37e84ac33c5d38ee8fd18154c87b23b5112a741f6f2fbad848d2600c8528e4a3b8de89dbb68fb194e748ca4687f254cf431726913cbc96431967ae9ccef8ca1729effa881918a685368ec5010375cea79d53c3986844ccdbcd39f439ecd1ed738bf0fe780b19e836abb3b54588544daa0a32c81856fc8fccc48b2cb5e369a0bbfd07984452e6337c8519d59c296f2e18eb4c4fdcbb126d33637484ca39831713de1e8ec779aedfc4a5437ef84ce124d1ee7594873ffdd9ec004d3848677492d8323a7f340745335b5c4368c124468926b328da96fc5d5db4b475be21bd84a4153bc608a9c4c11451a7a8242b74582e1b19222d77f1af86c53ad1eb633c477284931943105cfc512b5748cbf6e77be05ce05d5f7c63657fe8469dd7e6fc5b588f1c40426d969466f89202085861cc4a340252fa830c30fefdd5ac406a7ec3856c53b357be52b86afd47dc1400f1b86f8b27058321325b0ea843ffc5bd3889974654c5bf7db00ed0652db29498640101dd66c3d7128edf129a91c9c3e58ca287a9c76e0ded95efd9416209ce591ba50add664460300f6e3411e5117fcfe04590cff578f634d44e79dd047680384eced910fdc70c7e22e7aab6e1de808e6438a655d7e204c6915bc1759bac155d39e11ebcaa9bab580bf6ef02760f9cc1a1e53f5b93c09c498fc3ce2203ab2062d565eaf932a54e56a8a1b1afe6e3761f89852cd0741351698a4d4255e7b2ef851b392766f30da6d60c271e69e1bc56f0f7d141f4814de2083bdf33a19356b27308cbcc25825460b99ad626030e90ff0db93133334917492e1a99b5fe8053c27ddcf9ef93055030ce5cf5914c68ab8fe0a1d11c2b17fe74290c07f5bd6be8e58259d8f0c295433be8a015f1989c1b08789e7c5c51128b6b7541e5362b861980fd9c8b3eca1cd5e4d9714aa1f47e3efd44bab91d549b9599bb7bafc8dbf8515ebf003d60f3fb75c22313de6414adfc5844930c7444f83afb4d8bfbe3d75e5cd4aeac578380469be2fa1d53a06a1991489730e5aa66f52c421ee146648c6f104e42cc7c0a5f003c4a152b4ebd40b926250021bba6ed0af8367278e355d237474e995021461ea8f0df4b7f3f3b03877251a3d7b1d32c31ff693bdb82984ff294d333c906c8b040ba1e5990d2276a99358e2429940dc45fd25829f157d7704d6e855641b6c03d3d69ef3d062797514fe33ee851b0fd73a10145da9d66db6d52799fb5265f7445aaeedc0828c39059bf1cf7916e2a4411e7c0afe7f7c0d433a4a98cd098578bd084ce771c0dc919d6ac33599f8bb4eedbe8a6afaba0ada835357c87efae47303de4b1ff1391f5db3e520516707921d4c15a8c76175b71094f639ea2b062624aabe645e4138757f31b080209c60a29cd150e5568cc0247dc6a4e8fd9e23e2d6a356c3fa1b8f908c02ce03880f63e59593c8a4d3b7e1ae2d061e12da765d5bf5917a49cbbc72fa0a83a2570c540b225987c2c9a640d7dafc5656fda803d4026c8e879b1067518cdf74dade6f6a1fdcb531e27698b98be2a15031c158d899094450e5b5315a630d7ee2b07bdc5e801bd854f906823a92f911b3723c37f0701d8b10fd769bec4c661c1869178e6cbc97f419da8681ac9bea6d0222fddaae33b510c31f3d53af93d4f1da127e0a215ca1e57e6aed906bb49bb5d65304b7c09e0986ff70b619984d48747efc4b75c8af57f73b8fce81db66a305c7f2918140a6a8c3369f3304ba4d63c21ae5d57995cf2791be0eabd425e2f8135d59cc31e68a6f692f8a33bebff757ff6ae175998867a3715ddb0a5cd09db984d8de86e7af531e492317068d6645d0bc850d430b76b4b94b98d9bab24ff5aa416b00307b64497f63323130047a079d9cf13abe9af3dca179d7940e12c4a1f5978d317ffa6d72102a951b2c5a27299097863c02cc6e2ea6cd505e5fd5b9eb8619215a3362dd9bf7818f557159a0b863fb7fc806606d4b12a453bb3f4c1e07e0002e45203726468ab4478040b6f42375d873b13e9a77b38c50f6aad80cc434e6689e93de29d20548c84b1b48fd6b941358d92ff9a94efbe3d0220061e08b1c7dd55e0f5d70d10007d68a87909293e3a31fb0cc5ea30897b791c6c3dfb977d1aec580f9901c4b18e73cdee11bb9ffd565b2f09d52847693392f12338e1f5d4ba18ef3c7e660e00725e9ef5cbf8353a9f138d3117253e893eb4013850e79d3eab415ad1e2facd0eaae375afb7c6c834a99fa8e4c559a77231f76dc6c29b2beda522a9bd90458cbe1de8ce55bd8660cf8fdb51841899443f6115e9f8915adbb88e489fdd0b671d084e6305ae13a2997553000eb9b41e1e45bfb2197a0c56dd83cc43c93f3c7c985e2ba8b5085cc3a9a6aacd2b0b34186ba10ad6a344fc3aeeacb8dce67edd40d748f92e79bfa0ef779b77bea8e88bfa69e15f89b5e2f4c10d1ac987771329520ee0de898068c738ac597901b70c6f2afb761728e0b388741f22686053c628d401677b1928f8c37a137c747e16946f37064853b0f6e849accc198891f5a79902b2d674d2dfb3a0419200a752231e391e58f64f58c9a68b1004b96c537a87329f3a4366caa998771ef569316c0efdfef1d171b422a234db0eae98ad52445f77525f27cf4268cc5d8f15cb5eb8af1616e250f7545d63bddb9dce4a367400cb573f73b06b9c99b375b8292f08b5e487d95b6396c908555dfc829ff230dd0aaf2be60d9f4f10ed5dc7da2be1227ab39aeba40fc5fd4e9261cb9b6ad8cc7090aaf124f4aa668038f510d52b4f7aec2cf9d9c0f725541ea2ef8481c4a52f3362f93e9bc575cdb830c6c21d93b66fb9cd58214022c04f19e639f0c129ec81eb6b5af5e3ee49f5023e8cb25e592e42c4bf8380041b5e509664e79277a4ad7edb0ebb60e4d81290d9088780b2301f44913fbab0dc4ca7c9bc167a5f11a39204e333107ab66e0bd3c6723b012afcc5627d0445aabba8b5a3e6fd79a247179f210ebe9d947bc6b88f87476c57f2acfef3918c882eb9a9f4a51d9d2247bb821a56c28ef9192498de14ca7e947d5834dde6838265a39b8a8955b3a82ec2a04b507f3a1e8d86b68cea907ebe238c30dd561c7f0a8e34c696ee79efee11da169510d56ad6a082e1c932e45795017484b9e5a42629223960de6a7c77ee81d9fd9b2d8613fdceefe844c618d7946c59816ccc5d1cd7b211ca4762fd72377ab9b83bb1b84061d1965294da8ffda331c2d05d2bee12523753151ed578f5ebbf9de47f61f5dad937f772458a971fccc08ab4c9cf9dd8c07f0ecbb33acf5c8b64078af91e42a90e7501e073fe325cf19f01ab32bda1648b9bf2a9a7ba25747cd4ee26dd062ed1619b149a88e44ecac1b15066c1399ef6f5a1e5b1b7ac5da0f62863336b219fe05916d12356f4811f8bdbcbc7e555268f37912859d53b690d278c68b971866cd47e51d590dc4c970c3a38769f04fa2cf4ba45851c362d284ea9933a6c236affd8f6c7e0f6415a9b25163c5ae18bd2615e17311317536d2d4632ed83905448208c09756f45d09e314be4b8383758bdd49531ea72a5dfe33977db545f74075435a1da527f1cd1d6f523c6cd30e84d38ac36e2ad32488e48280d7211fb3d4d9b56dbcbe8ba45c3eb7f5e1657101b5df43e3d3652657ba2a8d15ebdccc66cfd7e637f368d7b65563b1850716f51f9b2ebd450df7fd02512eb4a38141eca6fdf3ae122bd9704672426f6bd268cb3400fdaf85dd64de5123a44621a48b26f92171b11042bf1a0be1e2903f3811b0f322eae89d010e57ac82ca851f2ad0e4b65f4b7cf6022bc79fe37f527912268b959618e8271ad2dd44ae576fbd9f993d8dd7f009e5ab75426327ed439f51dcc9aa9bf05bb9a661fe97e4e32db22627f638796c0a312f822404d22f20c1b520ee30c23422ecb68c2787f1fa62f210444e828681ae0033257cfb81663ba740ef9c41b7217574acf588bb053bc1d1dfd59841bdf0bafe57300f49d138018cb10918476c9b3458215893daaf9eba61c03e06487e54856a4a991bf9b735541ae610f1ef972b069fb82b5b7bce33ab9ac6e138163b03df5f2c73bcfba76f0358bebe096c48c58f2a415481552d2f21f06a7c8c0828c2c831715a8aca2d9e510ec04a9b750734dbd675aeacf11e17f6289ef40087f46f41b9ba048edd08fab6b6169ec802acdfe41d937972b09688babce2dfcd45c256ed1c0c9b4a93d4d7e5946fd75593b7d85d534d9be5fcef7d89d5d90a96b1e8a23ac919e04d9d29124fd2dcef9510d29a718d9a949a6fc51175811f36c7cf13f4c4ffe72921b33633f8ce6dfe86804bc41d5f6aa3a779648f9d00398fc6f94350ff253b85a9f71444db58140e665d959f524b7660f31d0f971bc2b3e70ae98ff45bb36cf8732ea6f06513821ccf3fee1dfd9fcee67c915cae2bfbe614aabcb035354874752854e0c9c797ed0ce23192d7bb557ce207052b6be3115aa1875c97a733875623d3e5f6d5f3ba994696f87de1863fd6349c98f05fcc9c8fc5bf25f5296ee9c1c8dc64669705c7a8ffa3a27d8fed42ccf92512e7af52cb1c88f285b874b346149b36532dfa3884dbaf2dea2c2d12445dd9e5612eb9b312b872c175e0c8240b2dd1188f2abf6c121e1af2fc84309c2a57d6b4d4aeea49fd6bab0a48eef49582dccdd02d2bc850fbd0f9ddb5a50e02fad31b8a436894dd78c3e0d48deaba0e0e25c54053cc118d964e03956c8298b195cdfabb7da570a3866d1bc1fa46771338a325641c9f2c225c010d636fc07a87fc1bb1c4a318ab8db3d27f197b1c6cc90caf98afa73ad29d4449ca83eed42a453300ede6b0d9e656afd1cd2a1ff021eb73bb2223cc560231e73c8b6cc68657d9561bbcd836192a1bb9c89c46a56a6c9131f7c17e55d8e3a0aa8794c245e8fbd4c980028ef5ae46d49d93a4eeea862170250f144a2889d4f56e9ef8571e084b6f4c4e710c2932db75bbbed66d0820dc6184976f01ca2171c3d121456dc113ce7dddcb62749a0f2db76001ecffb3010b150d3da69d56a6852744f7c178352579586c163904633ff8774d961bc343cac182793ccf5a00f25a06e417a9af983fae5252bb2030dcd34667e63ecd9f49b3558f18738a5341162fde5378799742e54947cde99c00828e1aba4a16f9bc1503cc740f6dacc56b78ac4a32bea41db24511a50a226104303ecf2f24cf5b08559743567bbc8c396ff65db9fd49b482d0b85b095ad151ffa2ed7b9786e5e0ad5856869b0b74db68a0a9a78348e77918b51c047944e96597a0be94894af3b2d4fe1ba4016e3772dcf65e0a72868671a88431f2ff89b1aee9fe3317109ea63ba1d063ca38720ddab0cc987249d38298d67110d1a6b9864d49d2d86937f33a6afc02487485bbb55f60502688eb3b9dfb1eccc1c3d759983016471ce5ce5d533f04a25a7c9c458ba1fb67d0945f58b20f3902c4d8892cfc0b19593e284731da5556d928c11e9658baa4ca3755fdf560b589b47f8de67616fa3a6a49205f826b3ac745958e99958fc644b2b2d38a91827ef7c2bbe3c10fc3e7001e9f7427d1b0ee6f7df45683301ea239839fc5b784dee9229905cb45b24d66f2f12a26aad0bc48416b73ffb0c326fcda853ed883d29ca7ced3ae747d372df1ffa06f8c690deacf27514ade7bf773638b9a8cf89124e1cb3a3f564d2e8104616f884e39e8e8d1de05e858bf95924198a4bd771053e5380708b3b5cab58b1fc22d8f4cda09d7434c295ec6ab9fa4f95d39f3775271cd86452aeaf7e250cf9787470c6e6c061c7105dd84156ec0cb1c4a17b58630df71dd6b035cb10ad64d6b9d7a01f9b6a1bb4228177e4cb8ed0011aca56dc71828ff30c6a1c1d9bbf808cbc53f05e25e6194d38c8af36e8d7859ec8eaaab290713ed7ef085086537c23a53a841ad55828ff7d9506623cd606d2541c0c1b4092bca7d639a8e03d5283a90130dd37eb950893fd7c182f8a8a1630b31475eaa0706da19384012c9112ffa3600df04fc2bab18df07b5554e5e1cc6d8478d61a4382545f921d1605753dfb485d11f1d2cf8c4fdf8c144c35312cec161aeb7304f2a71ec02e708babed8fc1bef041c157d7409ff763446ae12b4fb088d0237c1477cc356a6f59a1412eeef1070fb3a7e8ebb8e777f76e5b4c035078b64ce7de58e980a4a94cbec8ab6fbb48298ebab9f98f5cce4603d4dd5e0a60f31886a412983057b2b5780e854fb742dbf18afc1681b48eb40be5b32762836e211b197e211864f47bde2cf4c333c2c58e0f5363bbb1beb6724e20878a26fdb0fecb6c90e8a7d02757902aed0dc7a1028d40dd70e7ee090647c4b24713d94b617045a55c27b3f5e5b6cfaaaec2cb3663d620530c5313203fe289a7b7551f79eaf5c2a15f0ad680d5bb54427dfc210c1127d511d47260316b532e5123069181e7aa2fd806d66c19ae403ad42dc614867916ea08450b6c4e42660a79f0b3bd0f17f09a3b6a22ffba8671a549a5e86863e1df719bacbc772e73276e7ecbe1c980c6e662edb8ef30629eb919d0ac1b6c67583105c40718bff0018f7c8531dbb2552e5a48058a0ad43444921ca71c9e3ed5bc29455cacb60b1e00742886e1a7fd174f9848d33d8d88f4bcf4077c0e00e1c4054decc0df9abeeb816d6326efad89b01f757775b5377a549b302f10c92a1088b2cac6f833159366200e325c5e6211216ac7e5991e096baceac75a0ab4ad18d2b936564d21c38a6c3560000378939b690bc461b726d3bcbad91c778bfad42362958fd27c8aafa764fde6956ffad92cfd2d19c586b487e3e3e94eb08df4cf6bf3a1291ad92c0025bb40d02bc60fcb966644434710c61e824bc96820bc064972ffc8eeef6c687b538c505caf99cb00c05eacecf18363f9ccd7831c0000ac2702335cc36728cfcf43791e5e8e8c8a3922c92db3eb204b7c6b1569da82dd2bc573b3e0321c70e17411adb0091b1e21c752f3e555eab4ee98866706eb7a7691b0c19e4e45c704248e547d54850ae43713ecf7747d3d1f7ec6515196360331a1995911417a7a92aecd4ae406f519717c22e7070fd453d548251da9535fedcb90b27ef359844f64cac25c23154457a4620bc5058b6bb99b538ac69070fda107306a6a65a91b97f9cdfa3047f2bd5e66a847a59ff0324b2082536fb241cf8c28fa1862274ba0dd7781728bf5b0925f107fc4d55a8ac6253602d88463ca2c3227067d549261cd2980f15b3e314b59ac70b9d6a92490dd54035b67e24dd89cd98b4cda7904989da22b12762b17e7fe6c55b5636b92a2f82b1c9dadf65bf7e0b9afd047788a92d6cf6a0cb5e3a2e84cc1136d32afba8b9b31eb9a2469fbdb9a8bc6da8c6f02411aef0e05c7d4a560821dff02a8ea572bf245065c20d062d2ff5e89d8ad95a7daf60fd974419da93baa0deb9e9bd02ad1fbd63b1c67e3aa5772d3b6eba47fa914fe6c120ecd63f6639484798a89baf29585f17877bf8de52011ad433104094e64d6da68c198297fb1a78a8e94aed26ed941adfb0bea47b354a0844dcb7fb040d6e411e3053713f4d8c3e3408a814b08d545898fb620b62bf92a10ac6d84620f5408895cb793af57c5472c00b9604208035c23bf1dfb08f7d5d84f6543fd782b7c364284ac4dc0d1beac21eab6925439f617ae4d4d24f9912ae2e6742be8433f36bf5a0d44bc85298e226cac91093b0e7d4a040a0e6ef2d6974679cde72752516cec4157193a08141f4eb60b0490c56d0e7807e8b8b0914e1e6b06f7006283591c092caeb84c61bcb847d6f9f22da6c1b502f85c9b30acf53b0f5bfcef542ec33909f2ea00e05f0eaca8a5b355e71f10160d45281eb3b15d12f30413beb6c7bfe404f326184352abaf1e0a14e30cbaf667fa8f453c5341f9aac22fff19c01fd58241730a1ba9fbf5ce4f0c7710e91f01b25a7855ba980c9ec4a4b260e82ea926161b1a6ac7beb93b8a2b737f854e248833c4cada986cca209331c2da3316fafd35c0e90b7263f9a60c6f773ee53c1809965ad8f7d80bfad63c92483073b953db55acb09ba8b88ff07465d642d7ae8060fc13435197617a4a534e61559c6873ed578ad4ab741e51e102ca426b08d7e7bcb44517a7df09a61088e0188ce0846dd76f41a338067038ddd01508cddada05611d20322a9e72fbda5b1f80bcb654fc56fb0669e1d59e1a9b712cbfbb3a8e09f5a27746cac27f99726dc578c42ec566cae562a82a96cb9f69cf8ba46ddf2fb63235ce75320d118ede0f6ad3be89f8e2861e9e1f8f773f49ea51a518f9f49091ab186654429d6b80de878292ed99701d3e080a1538ad07a3cc49367ccbccfff0d59adb4880b2aa34d504792ae7694807f0222bea1bfc5f56b8cd4281068ce649d5f8b8a51d668f12216bb65ed395f495e9367188391f6d860f50e25826a704d721a5325c779d54621595f69229f46ebc8fc7b1c4a52667fa269545250e9416c83bf768eed637697d907299cdaf3a3e8b05a03226bca684b41e5f411bea0e2e843a916dc748bfbeb0af81c710f480293c34adfc9eaf433a9328eb62ac4ed14299f8b0ce084ae0d4b413d2a36cf9efc7aa0932e5da704c54173a26759e7fc31461880072f95abb7b307e12077a6c507cbe4967da65df63db740b3d0761368500fae86dfd841f6470ef86f67104380a0f7699ddf1c892c0abc04e1ad85136aee20691d891ea15fe5dfc30198f12b336137151984d8cc68cf3c2b280010a26859583392e549cf047f94d378f58f3fb60b40cf62c6f5cc3570f061799d82404f75f293168c5a0fd8b5f6ac9acd96a6ad514fbfc6b09642b8299cacf079c0b3a6f20b49f2475ab44e7f81aa66ca857de57ee1d6d575e519345b6d98359eec1e353adc941f4c55651c6969ad73f759bddf17d316921837f9065c533cc30c6ff40f5b2011db3167d06f917d76b5b37658c6d8bcd083c98730df624d963464425dc56335693cb0df13fac1ea242292d921e0abcbfd85ce58f82adc33af6807fe0f3b2392cc780a61d085bac2e0c4acfcc2db30b547232e097cb1a5036f57403649b5628dd5aca7e855e3a3e72ec943de98dd64661c39fb563ea8cbd1cd5ce2a47c6057bd1afe6da6458b7c139f1ea547bbfd5bc0aa52a701349163d96a386bd4bcd5ae179e22feb1554a394979c3b9ef20923c90aad2f69bc7f62e43373db5826df5e68ce34ae7a2045ed0639d4c426feae6827f14789377aaf84c86cf206f92682c5ec37b26b1b9b990d7617f5474c5e979cc2e7fe6f3e138156ebb62b67e00a96a41387a418066d3913f53c0853ebbedb5d4d05183e64ad8f30bc525a0010110380fbe7f2c1fc8a09886d3d9615a51908369ee88e6a78b0493bd3bbb82b45215a9c6f9c5b3a15a58ac06421d78514dc2c5ba7f65effdbd8a01f387fa83073c5d6c3ef3012594d548644c734592477bba905e1991553574b89975fc0afad82121d16ffacc17041c7ad6ba705726333b61e6dc30588c2d1ec23ebb43f0220b0b7ef7ac8953fbe896757a79afd61a00c1cc070d5a05ab75e5d7819f4b1d27670cd88ad3462e9e79f6a80ee38d5cdd51574fcc89544d3ffc303d10de075618b5613bebce276637e56a84e836881291a2db50f92bfefc442db00e64476d13a93f56424d01486d73cff9267a</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>加密</tag>
      </tags>
  </entry>
  <entry>
    <title>yolox训练自定义数据集</title>
    <url>/article/yolox%E8%AE%AD%E7%BB%83%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E9%9B%86/</url>
    <content><![CDATA[<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置<a href="#环境配置" class="header-anchor">#</a></h1><p> 第一步：安装YOLOX</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:Megvii-BaseDetection/YOLOX.git</span><br><span class="line">cd YOLOX</span><br><span class="line">pip3 install -U pip &amp;&amp; pip3 install -r requirements.txt</span><br><span class="line">pip3 install -v -e .  # or  python3 setup.py develop</span><br></pre></td></tr></table></figure>



<p>第二步：安装apex</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 如果不想训练模型，可跳过这步。</span><br><span class="line">git clone https://github.com/NVIDIA/apex</span><br><span class="line">cd apex</span><br><span class="line">pip3 install -v --disable-pip-version-check --no-cache-dir --global-option=&quot;--cpp_ext&quot; --global-option=&quot;--cuda_ext&quot; ./</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>此处需要torch的cuda版本和外部环境的cuda版本一致，比如我们的服务器是10.2，那么torch的也要是10.2</p>
<p>可通过<code>torch.version.cuda</code>确认，最好是选择docker来配置。Windows也不推荐，即使是wsl。</p>
<p>第三步： 安装 <a href="https://github.com/cocodataset/cocoapi">pycocotools</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip3 install cython; pip3 install &#x27;git+https://github.com/cocodataset/cocoapi.git#subdirectory=PythonAPI&#x27;</span><br></pre></td></tr></table></figure>



<h1 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置<a href="#修改配置" class="header-anchor">#</a></h1><p>修改<code>exps/example/yolox_voc/yolox_voc_s.py</code>, 主要涉及类别和文件路径</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/fb863c7fbfa25392b426aa319026887b.png" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/b52f331bb2f1f35a057136c8e5b77656.png" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/febec4ac7bf5e614f383ea5932007ffe.png" alt="在这里插入图片描述"></p>
<p>修改<code>yolox/data/datasets/__init__.py</code></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/e4575a30f261ae0371fd460684d41763.png" alt="img"></p>
<p>修改<code>yolox/data/datasets/voc_classes.py</code></p>
<p><img src="yolox%E8%AE%AD%E7%BB%83%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E9%9B%86/image-20210830143808609.png" alt="image-20210830143808609"></p>
<h1 id="开始训练"><a href="#开始训练" class="headerlink" title="开始训练"></a>开始训练<a href="#开始训练" class="header-anchor">#</a></h1><p><code>python tools/train.py -f exps/example/yolox_voc/yolox_voc_s.py -d 1 -b 16 --fp16 -o -c yolox_s.pth</code></p>
<ul>
<li>-d 使用多少张显卡训练</li>
<li>-b 批次大小</li>
<li>–fp16 是否开启半精度训练</li>
</ul>
<h1 id="批量推理"><a href="#批量推理" class="headerlink" title="批量推理"></a>批量推理<a href="#批量推理" class="header-anchor">#</a></h1><p>非官方实现，其实也就是for循环实现的。</p>
<p><code>tools/test_imgs.py</code>:</p>
<p><img src="yolox%E8%AE%AD%E7%BB%83%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E9%9B%86/image-20210830144401995.png" alt="image-20210830144401995"></p>
<p><img src="yolox%E8%AE%AD%E7%BB%83%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E9%9B%86/image-20210830144449907.png" alt="image-20210830144449907"></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料<a href="#参考资料" class="header-anchor">#</a></h1><p><a href="https://zhuanlan.zhihu.com/p/397499216">深入浅出Yolox之自有数据集训练超详细教程 </a></p>
<p><a href="https://blog.csdn.net/qq_39056987/article/details/119002910">YOLOX自定义数据集训练</a></p>
<p><a href="https://github.com/DataXujing/YOLOX-">DataXujing/YOLOX-: YOLOX 训练自己的数据集 TensorRT加速 详细教程</a></p>
]]></content>
  </entry>
  <entry>
    <title>python_进阶</title>
    <url>/article/python-%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<h1 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数<a href="#偏函数" class="header-anchor">#</a></h1><p>定义：偏函数的第二个部分(可变参数)，按原有函数的参数顺序进行补充，参数将作用在原函数上，最后偏函数返回一个新函数（类似于，装饰器decorator，对于函数进行二次包装，产生特殊效果；但又不同于装饰器，偏函数产生了一个新函数，而装饰器，可改变被装饰函数的函数入口地址也可以不影响原函数）</p>
<p>例一：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from functools import partial</span><br><span class="line"> </span><br><span class="line">def mod( n, m ):</span><br><span class="line">  return n % m</span><br><span class="line"> </span><br><span class="line">mod_by_100 = partial( mod, 100 )</span><br><span class="line"> </span><br><span class="line">print mod( 100, 7 )  # 2</span><br><span class="line">print mod_by_100( 7 )  # 2</span><br></pre></td></tr></table></figure>

<p>例二：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from functools import partial</span><br><span class="line"> </span><br><span class="line">bin2dec = partial( int, base=2 )</span><br><span class="line">print bin2dec( &#x27;0b10001&#x27; )  # 17</span><br><span class="line">print bin2dec( &#x27;10001&#x27; )  # 17</span><br><span class="line"> </span><br><span class="line">hex2dec = partial( int, base=16 )</span><br><span class="line">print hex2dec( &#x27;0x67&#x27; )  # 103</span><br><span class="line">print hex2dec( &#x27;67&#x27; )  # 103</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="同步异步阻塞非阻塞"><a href="#同步，异步，阻塞，非阻塞" class="headerlink" title="同步，异步，阻塞，非阻塞"></a>同步，异步，阻塞，非阻塞<a href="#同步异步阻塞非阻塞" class="header-anchor">#</a></h1><p>二者其实是不同维度的东西，但是的确容易搞混。</p>
<p>做法A(同步，阻塞) :开单独线程（进程）处理，线程内一般是循环接收消息。<br>做法B(同步，非阻塞) :主线程循环处理,但一般搭配sleep函数(释放时间片,自身状态运行转就绪再等待时间片)，避免完全的cpu空转<br>做法C(异步，非阻塞):函数参数包含函数(回调函数)，或url地址，类似的东西，对方有消息就推送给你，所以还需要新开一个接口(or功能)用来接受信息。</p>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">例子:老张水壶</span><br><span class="line">老张爱喝茶，废话不说，煮开水。</span><br><span class="line">出场人物：老张，水壶两把（普通水壶，简称水壶；会响的水壶，简称响水壶）。</span><br><span class="line">1 老张把水壶放到火上，立等水开。（同步阻塞）</span><br><span class="line">2 老张把水壶放到火上，去客厅看电视，时不时去厨房看看水开没有。（同步非阻塞）</span><br><span class="line">老张还是觉得自己有点傻，于是变高端了，买了把会响笛的那种水壶。水开之后，能大声发出嘀~的噪音。</span><br><span class="line">3 老张把响水壶放到火上，立等水开。（异步阻塞）</span><br><span class="line">4 老张把响水壶放到火上，去客厅看电视，水壶响之前不再去看它了，响了再去拿壶。（异步非阻塞）</span><br><span class="line">所谓同步异步，只是对于水壶而言。</span><br><span class="line">普通水壶，同步；响水壶，异步。虽然都能干活，但响水壶可以在自己完工之后，提示老张水开了。这是普通水壶所不能及的。同步只能让调用者去轮询自己（情况2中），造成老张效率的低下。</span><br><span class="line">所谓阻塞非阻塞，仅仅对于老张而言。</span><br><span class="line">立等的老张，阻塞；看电视的老张，非阻塞。情况1和情况3中老张就是阻塞的，媳妇喊他都不知道。虽然3中响水壶是异步的，可对于立等的老张没有太大的意义。所以一般异步是配合非阻塞使用的，这样才能发挥异步的效用。</span><br></pre></td></tr></table></figure>



<h1 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发<a href="#并发" class="header-anchor">#</a></h1><h2 id="进程状态和调度"><a href="#进程状态和调度" class="headerlink" title="进程状态和调度"></a>进程状态和调度<a href="#进程状态和调度" class="header-anchor">#</a></h2><p><img src="python-%E8%BF%9B%E9%98%B6/image-20210824144323526.png" alt="image-20210824144323526"></p>
<p><img src="python-%E8%BF%9B%E9%98%B6/image-20210824144415139.png" alt="image-20210824144415139"></p>
<h2 id="进程线程协程"><a href="#进程-线程-协程" class="headerlink" title="进程,线程,协程"></a>进程,线程,协程<a href="#进程线程协程" class="header-anchor">#</a></h2><p>1、进程<br>进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动,进程是系统进行<strong>资源</strong>分配和调度的一个独立单位。每个进程都有自己的独立内存空间，不同进程通过进程间通信来通信。由于进程比较重量，占据独立的内存，所以上下文进程间的切换开销（栈、寄存器、虚拟内存、文件句柄等）比较大，但相对比较稳定安全。<br>2、线程<br>线程是进程的一个实体,是<strong>CPU调度</strong>和分派的基本单位,它是比进程更小的能独立运行的基本单位.线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。线程间通信主要通过共享内存，上下文切换很快，资源开销较少，但相比进程不够稳定容易丢失数据。<br>3、协程<br>协程是一种<strong>用户态的轻量级线程</strong>，协程的调度完全由用户控制。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则基本没有内核切换的开销，<strong>可以不加锁的访问全局变量</strong>，所以上下文的切换非常快。</p>
<h2 id="多进程和多线程"><a href="#多进程和多线程" class="headerlink" title="多进程和多线程"></a>多进程和多线程<a href="#多进程和多线程" class="header-anchor">#</a></h2><p>在数据共享、同步方面，多进程是数据共享复杂，需要用IPC，数据是分开的，同步简单。多线程因为共享进程数据，数据共享简单，但同步复杂；<br>在内存、CPU方面，多进程占用内存多，切换复杂，CPU利用率低。<br>多线程占用内存少，切换简单，CPU利用率高；<br>在创建销毁、切换方面，多进程创建销毁、切换复杂，速度慢。多线程创建销毁、切换简单，速度很快；<br>在编程、调试方面，<strong>多进程编程和调试都简单。多线程编程和调试都复杂</strong>；<br><strong>可靠性方面，多进程间不会互相影响。多线程中的一个线程挂掉将导致整个进程挂掉；</strong><br>在分布式方面，多进程适应于多核、多机分布式。多线程适应于多核分布式。</p>
<p><strong>多进程模式最大的优点就是稳定性高</strong>，因为一个子进程崩溃了，不会影响主进程和其他子进程。（当然主进程挂了所有进程就全挂了，但是Master进程只负责分配任务，挂掉的概率低）著名的Apache最早就是采用多进程模式。<br><strong>多进程模式的缺点是创建进程的代价大</strong>，在Unix/Linux系统下，用fork调用还行，在Windows下创建进程开销巨大。另外，操作系统能同时运行的进程数也是有限的，在内存和CPU的限制下，如果有几千个进程同时运行，操作系统连调度都会成问题。<br>多线程模式通常比多进程快一点，但是也快不到哪去，而且，<strong>多线程模式致命的缺点</strong>就是任何一个线程挂掉都可能直接造成<strong>整个进程崩溃</strong>，因为所有线程共享进程的内存。在Windows上，如果一个线程执行的代码出了问题，你经常可以看到这样的提示：“该程序执行了非法操作，即将关闭”，其实往往是某个线程出了问题，但是操作系统会强制结束整个进程。<br><strong>在Windows下，多线程的效率比多进程要高</strong>，所以微软的IIS服务器默认采用多线程模式。由于多线程存在稳定性的问题，IIS的稳定性就不如Apache。为了缓解这个问题，IIS和Apache现在又有多进程+多线程的混合模式，真是把问题越搞越复杂。</p>
<p><img src="python-%E8%BF%9B%E9%98%B6/image-20210824145859135.png" alt="image-20210824145859135"></p>
<h2 id="线程和协程"><a href="#线程和协程" class="headerlink" title="线程和协程"></a>线程和协程<a href="#线程和协程" class="header-anchor">#</a></h2><p>协程:又被称为用户级线程或绿色线程。</p>
<ol>
<li>一个线程可以多个协程，一个进程也可以单独拥有多个协程，这样python中则能使用多核CPU。</li>
<li> 线程进程都是同步机制，而协程则是异步</li>
<li>协程能保留上一次调用时的状态，每次过程重入时，就相当于进入上一次调用的状态</li>
</ol>
<h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程<a href="#协程" class="header-anchor">#</a></h2><p>协程 :<br>能够在一个线程中实现并发效果的效果,提高cpu的利用率<br>无需原子操作锁定及同步的开销<br>能够规避一些任务中的IO操作<br>方便切换控制流，简化编程模型<br>协程相比于多线程的优势 切换的效率更快了</p>
<p>缺点：<br>无法利用多核资源：协程的本质是个单线程,它不能同时将 单个CPU 的多个核用上,协程需要和进程配合才能运行在多CPU上.当然我们日常所编写的绝大部分应用都没有这个必要，除非是cpu密集型应用。</p>
<p>线程和进程的操作是由程序触发系统接口，最后的执行者是系统，它本质上是操作系统提供的功能。而协程的操作则是程序员指定的，在python中通过yield，人为的实现并发处理。<br>协程存在的意义：对于多线程应用，CPU通过切片的方式来切换线程间的执行，线程切换时需要耗时。协程，则只使用一个线程，分解一个线程成为多个“微线程”，在一个线程中规定某个代码块的执行顺序。<br>协程的适用场景：当程序中存在大量不需要CPU的操作时（IO）。<br>常用第三方模块gevent和greenlet。（本质上，gevent是对greenlet的高级封装，因此一般用它就行，这是一个相当高效的模块。）</p>
<h1 id="何时使用多进程or多线程"><a href="#何时使用多进程or多线程" class="headerlink" title="何时使用多进程or多线程"></a>何时使用多进程or多线程<a href="#何时使用多进程or多线程" class="header-anchor">#</a></h1><p>使用多进程or线程,对于python，考虑到GIL锁，基本上<strong>默认使用多进程</strong>就对了。<br>除此之外，线程<strong>共享全局变量</strong>，进程<strong>全局变量则是隔离的</strong>，实际进程大多数情况需要通信的，所以也需要考虑共享数据读写问题处理。 决定因素稳定性和数据共享要求上（操作系统差异性，win偏好线程，linux偏好进程）<br>性能上虽然线程较好，但实际除了大型互联网公司和部分专业性质软件，大多数中小型公司的并发量，并不会带来很大影响，况且目前服务器领域，基本上LInux和Unix占比较高，线程相比进程在性能上优势并不十分突出。所以这方面考量不会太大的。</p>
<h2 id="线程是并发还是并行进程是并发还是并行"><a href="#线程是并发还是并行，进程是并发还是并行？" class="headerlink" title="线程是并发还是并行，进程是并发还是并行？"></a>线程是并发还是并行，进程是并发还是并行？<a href="#线程是并发还是并行进程是并发还是并行" class="header-anchor">#</a></h2><p><strong>线程是并发</strong>，<strong>进程是并行</strong>；<br>现代os都将<strong>线程作为最小调度单位</strong>，进程作为<strong>资源分配的最小单位</strong>。</p>
<h2 id="父子进程如何区分"><a href="#父子进程如何区分" class="headerlink" title="父子进程如何区分?"></a>父子进程如何区分?<a href="#父子进程如何区分" class="header-anchor">#</a></h2><p> 子进程是父进程通过fork()产生出来的，pid = os.fork()<br>​ 通过<strong>返回值pid是否为0</strong>，判断是否为子进程，如果是0，则表示是子进程<br>​ 由于 fork() 是 Linux 上的概念，所以如果要跨平台，最好还是使用 subprocess 模块来创建子进程。</p>
<h2 id="子进程如何回收"><a href="#子进程如何回收？" class="headerlink" title="子进程如何回收？"></a>子进程如何回收？<a href="#子进程如何回收" class="header-anchor">#</a></h2><p>python中采用os.wait()方法用来回收子进程占用的资源<br>pid, result = os.wait() # 回收子进程资源　阻塞，等待子进程执行完成回收<br>如果有子进程没有被回收的，但是父进程已经死掉了，这个子进程就是僵尸进程。孤儿进程,父类进程over.,子进程未结束</p>
<table>
<thead>
<tr>
<th align="left"></th>
<th align="left">Multi-args</th>
<th align="left">Concurrence</th>
<th align="left">Blocking</th>
<th>Ordered-results</th>
</tr>
</thead>
<tbody><tr>
<td align="left">map</td>
<td align="left">no</td>
<td align="left">yes</td>
<td align="left">yes</td>
<td>yes</td>
</tr>
<tr>
<td align="left">apply</td>
<td align="left">yes</td>
<td align="left">no</td>
<td align="left">yes</td>
<td>no</td>
</tr>
<tr>
<td align="left">map_async</td>
<td align="left">no</td>
<td align="left">yes</td>
<td align="left">no</td>
<td>yes</td>
</tr>
<tr>
<td align="left">apply_async</td>
<td align="left">yes</td>
<td align="left">yes</td>
<td align="left">no</td>
<td>no</td>
</tr>
</tbody></table>
<p>需要注意：map 和 map_async 入参为迭代器类型，可以批量调用。而apply和apply_async只能一个个调用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># map</span><br><span class="line">results = pool.map(worker, [1, 2, 3])</span><br><span class="line"></span><br><span class="line"># apply</span><br><span class="line">for x, y in [[1, 1], [2, 2]]:</span><br><span class="line">    results.append(pool.apply(worker, (x, y)))</span><br><span class="line"></span><br><span class="line">def collect_result(result):</span><br><span class="line">    results.append(result)</span><br><span class="line"></span><br><span class="line"># map_async</span><br><span class="line">pool.map_async(worker, jobs, callback=collect_result)</span><br><span class="line"></span><br><span class="line"># apply_async</span><br><span class="line">for x, y in [[1, 1], [2, 2]]:</span><br><span class="line">    pool.apply_async(worker, (x, y), callback=collect_result)</span><br></pre></td></tr></table></figure>



<h1 id="生产者消费者模式"><a href="#生产者消费者模式" class="headerlink" title="生产者消费者模式"></a>生产者消费者模式<a href="#生产者消费者模式" class="header-anchor">#</a></h1><p>这也是实际项目中使用较多的一种并发模式，用Queue(JoinableQueue)实现，是Python中最常用的方式(这里的queue特指multiprocess包下的queue，非queue.Queue)。</p>
<h2 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue<a href="#queue" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># encoding:utf-8</span><br><span class="line">__author__ = &#x27;Fioman&#x27;</span><br><span class="line">__time__ = &#x27;2019/3/7 14:06&#x27;</span><br><span class="line">from multiprocessing import Process,Queue</span><br><span class="line">import time,random</span><br><span class="line"></span><br><span class="line">def consumer(q,name):</span><br><span class="line">    while True:</span><br><span class="line">        food = q.get()</span><br><span class="line">        if food is None:</span><br><span class="line">            print(&#x27;接收到了一个空,生产者已经完事了&#x27;)</span><br><span class="line">            break</span><br><span class="line"></span><br><span class="line">        print(&#x27;\033[31m&#123;&#125;消费了&#123;&#125;\033[0m&#x27;.format(name,food))</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"></span><br><span class="line">def producer(name,food,q):</span><br><span class="line">    for i in range(10):</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line">        f = &#x27;&#123;&#125;生产了&#123;&#125;&#123;&#125;&#x27;.format(name,food,i)</span><br><span class="line">        print(f)</span><br><span class="line">        q.put(f)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    q = Queue(20)</span><br><span class="line">    p1 = Process(target=producer,args=(&#x27;fioman&#x27;,&#x27;包子&#x27;,q))</span><br><span class="line">    p2 = Process(target=producer,args=(&#x27;jingjing&#x27;,&#x27;馒头&#x27;,q))</span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line"></span><br><span class="line">    c1 = Process(target=consumer,args=(q,&#x27;mengmeng&#x27;))</span><br><span class="line">    c2 = Process(target=consumer,args=(q,&#x27;xiaoxiao&#x27;))</span><br><span class="line">    c1.start()</span><br><span class="line">    c2.start()</span><br><span class="line"></span><br><span class="line">    # 让主程序可以等待子进程的结束.</span><br><span class="line">    p1.join()</span><br><span class="line">    p2.join()</span><br><span class="line">    # 生产者的进程结束,这里需要放置两个空值,供消费者获取,用来判断已经没有存货了</span><br><span class="line">    q.put(None)</span><br><span class="line">    q.put(None)</span><br><span class="line"></span><br><span class="line">    print(&#x27;主程序结束..........&#x27;)</span><br></pre></td></tr></table></figure>

<h2 id="joinablequeue"><a href="#JoinableQueue" class="headerlink" title="JoinableQueue"></a>JoinableQueue<a href="#joinablequeue" class="header-anchor">#</a></h2><p>创建可连接的共享进程队列,它们也是队列,但是这些队列比较特殊.它们可以允许消费者通知生产者项目已经被成功处理.注意,这里必须是生产者生产完了,生产者的进程被挂起,等到消费者完全消费的时候,生产者进程就结束,然后主程序结束.将消费者进程设置为守护进程,这样的话,主进程结束的时候,消费进程也就结束了.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">q.task_done() </span><br><span class="line">使用者使用此方法发出信号，表示q.get()返回的项目已经被处理。如果调用此方法的次数大于从队列中删除的项目数量，将引发ValueError异常。</span><br><span class="line"></span><br><span class="line">q.join() </span><br><span class="line">生产者将使用此方法进行阻塞，直到队列中所有项目均被处理。阻塞将持续到为队列中的每个项目均调用q.task_done()方法为止。 </span><br><span class="line"># encoding:utf-8</span><br><span class="line">__author__ = &#x27;Fioman&#x27;</span><br><span class="line">__time__ = &#x27;2019/3/7 14:06&#x27;</span><br><span class="line">from multiprocessing import Process,JoinableQueue</span><br><span class="line">import time,random</span><br><span class="line"></span><br><span class="line">def consumer(q,name):</span><br><span class="line">    while True:</span><br><span class="line">        food = q.get()</span><br><span class="line">        if food is None:</span><br><span class="line">            print(&#x27;接收到了一个空,生产者已经完事了&#x27;)</span><br><span class="line">            break</span><br><span class="line"></span><br><span class="line">        print(&#x27;\033[31m&#123;&#125;消费了&#123;&#125;\033[0m&#x27;.format(name,food))</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line">        q.task_done()  # 向生产者发送信号,表示消费了一个</span><br><span class="line"></span><br><span class="line">def producer(name,food,q):</span><br><span class="line">    for i in range(10):</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line">        f = &#x27;&#123;&#125;生产了&#123;&#125;&#123;&#125;&#x27;.format(name,food,i)</span><br><span class="line">        print(f)</span><br><span class="line">        q.put(f)</span><br><span class="line">    q.join() # 当生产者生产完毕之后,会在这里阻塞.等待消费者的消费.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    q = JoinableQueue(20)</span><br><span class="line">    p1 = Process(target=producer,args=(&#x27;fioman&#x27;,&#x27;包子&#x27;,q))</span><br><span class="line">    p2 = Process(target=producer,args=(&#x27;jingjing&#x27;,&#x27;馒头&#x27;,q))</span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line"></span><br><span class="line">    c1 = Process(target=consumer,args=(q,&#x27;mengmeng&#x27;))</span><br><span class="line">    c2 = Process(target=consumer,args=(q,&#x27;xiaoxiao&#x27;))</span><br><span class="line">    c1.daemon = True # 将消费者设置为守护进程</span><br><span class="line">    c2.daemon = True # 将消费者设置为守护进程</span><br><span class="line">    c1.start()</span><br><span class="line">    c2.start()</span><br><span class="line"></span><br><span class="line">    # 让主程序可以等待生产子进程的结束.</span><br><span class="line">    p1.join()</span><br><span class="line">    p2.join()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    print(&#x27;主程序结束..........&#x27;)</span><br></pre></td></tr></table></figure>

<p>在消费者调用q.task_done()时，会触发一次q.join()的检查(q.join()是用来阻塞进程的，最后一个任务完成后，q.task_done()＝》q.join()＝》阻塞解除)，之后生产者进程退出。而消费者呢？业务逻辑层面上是没有退出的（本例）。比如，本例中通过<strong>设置为守护进程的方式进行退出</strong>。但如果后续主进程还有其他任务，而没有退出呢？那么这些子进程则沦为僵尸进程，虽然对系统资源消耗很少(消费者的queue.get()也是阻塞的，所以不会执行循环，仅仅会“卡”在那里，但也不会自动消亡)，但感觉非常别扭的。所以个人还是倾向于用”生产者queue.put(None) ,消费者见到None则break(退出循环)”的传统方式 进行消费者进程触发退出。如果采用这种方式那么JoinableQueue相比Queue就没有优势了。</p>
<p>假如有一种队列，内置了**状态信息(存活生产者个数)**，设置目前存活的生产者个数<br>StatusableQueue(product_n=2,size=20)　#product_n=2含义：存活的生产者个数,size=20,队列长度<br>生产者：生产结束，q.product_n - 1(存活生产者个数-1)<br>消费者：存活生产者个数=0(生产者均已经完成生成) 且 队列长度=0(队列也已经消费结束) 则退出消费者进程.<br>这种情况下，只需要　消费者.join()　就可以保证整个生产消费进程的执行结束(这一点和JoinableQueue很像，不过JoinableQueue是 生产者.join())<br>一共只改动3处，就可以完成生产者消费者的并行化控制。 而且更符合逻辑，因为生产者是明确知道自己的退出条件的，而消费者依赖生产者，所以只需要观察消费者就可以知道（生成者是否结束）整个－生成消费链是否完成。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">def consumer(q,name):</span><br><span class="line">    while not (q.product_n==0 and q.size==0):# 存活生产者=0，意味着全部结束生产，队列不会新增数据,queue.size=0说明消费完毕</span><br><span class="line">        food = q.get()</span><br><span class="line">        print(&#x27;\033[31m&#123;&#125;消费了&#123;&#125;\033[0m&#x27;.format(name,food))</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"></span><br><span class="line">def producer(name,food,q):</span><br><span class="line">    for i in range(10):</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line">        f = &#x27;&#123;&#125;生产了&#123;&#125;&#123;&#125;&#x27;.format(name,food,i)</span><br><span class="line">        print(f)</span><br><span class="line">        q.put(f)</span><br><span class="line">    q.product_n -= 1 # 当生产者生产完毕之后,q.product_n - 1(存活生产者个数-1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    q = StatusableQueue(product_n=2,size=20)#默认状态=正常,n=2含义：生产者个数,size=20,对列长度</span><br><span class="line">    p1 = Process(target=producer,args=(&#x27;fioman&#x27;,&#x27;包子&#x27;,q))</span><br><span class="line">    p2 = Process(target=producer,args=(&#x27;jingjing&#x27;,&#x27;馒头&#x27;,q))</span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line"></span><br><span class="line">    c1 = Process(target=consumer,args=(q,&#x27;mengmeng&#x27;))</span><br><span class="line">    c2 = Process(target=consumer,args=(q,&#x27;xiaoxiao&#x27;))</span><br><span class="line">    c1.start()</span><br><span class="line">    c2.start()</span><br><span class="line"></span><br><span class="line">    # 消费者消费结束（说明生产也一定结束了），则说明整个生产－消费逻辑完成</span><br><span class="line">    c1.join()</span><br><span class="line">    c2.join()</span><br></pre></td></tr></table></figure>

<p>缺点：<strong>必须知道生产者个数</strong>，这个数据应该不难获取，毕竟后面在创建生产者时也需要使用这个变量控制。</p>
<h1 id="并行化改造"><a href="#并行化改造" class="headerlink" title="并行化改造"></a>并行化改造<a href="#并行化改造" class="header-anchor">#</a></h1><p>图示变量含义说明:<br>1个大step中包含3个小step,大step内部的第一步，二步，三步存在依赖关系（就是内部保持顺序执行）<br>a1,b1,c1,表示子任务a的第一步，b的第一步，c的第一步.同理a2,表示子任务a的第二步。</p>
<h2 id="无并行"><a href="#无并行" class="headerlink" title="无并行"></a>无并行<a href="#无并行" class="header-anchor">#</a></h2><p><img src="python-%E8%BF%9B%E9%98%B6/image-20210824162124766.png" alt="image-20210824162124766"></p>
<h2 id="水平并行"><a href="#水平并行" class="headerlink" title="水平并行"></a>水平并行<a href="#水平并行" class="header-anchor">#</a></h2><p>优点：修改简单，容易排错<br>缺点：使用场景有限，适合批量数据，不适合流式数据<br>实现：pool().map(step1);pool().map(step2);pool().map(step3)</p>
<p><img src="python-%E8%BF%9B%E9%98%B6/image-20210824162204387.png" alt="image-20210824162204387"></p>
<h2 id="垂直并行"><a href="#垂直并行" class="headerlink" title="垂直并行"></a>垂直并行<a href="#垂直并行" class="header-anchor">#</a></h2><p>优点：修改简单，容易排错<br>缺点：如果中间步骤耗时过多，上游依然处于限制状态<br>实现：pool().apply_sync(func(step1,step2,step3))</p>
<p><img src="python-%E8%BF%9B%E9%98%B6/image-20210824162246391.png" alt="image-20210824162246391"></p>
<h2 id="生产者消费者"><a href="#生产者消费者" class="headerlink" title="生产者消费者"></a>生产者消费者<a href="#生产者消费者" class="header-anchor">#</a></h2><p>优点：上下游耦合小，任务粒度更细<br>缺点：改造稍微复杂，需考虑生产者生成结束等特殊情况的兼容，并且调试也较麻烦<br>实现：Queue(多进程multiprocessing,Queue,多线程queue.Queue,python大多多进程)</p>
<p><img src="python-%E8%BF%9B%E9%98%B6/image-20210824162411720.png" alt="image-20210824162411720"></p>
<h2 id="协程"><a href="#协程-1" class="headerlink" title="协程"></a>协程<a href="#协程" class="header-anchor">#</a></h2><p>协成可看做特殊单线程（意味着本质是单线程，多线程是表象），任务角度多个线程同时执行，实时角度看只有一个线程真正执行，好处是无需处理线程共享数据的加锁等情况（因为只有一个线程会执行，不存在同时修改的情况）。还有就是其<strong>进程内部不需要操作系统调度</strong>（进程整体肯定是操作系统调度，否则就凌驾与操作系统了），<strong>会自行调度</strong>，释放时间片给其他内部线程。<br>常规的线程一旦得到cpu时间片，会毫不犹豫执行，哪怕处于sleep状态也会占用资源。而协程则不会，其会把cpu主动出让(给自己其他线程)，等到别人”呼唤”自己时才会真正执行（比如next（自己）,gevent.sleep时间到了也算唤醒）。</p>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件<a href="#事件" class="header-anchor">#</a></h2><p>优点：如果可以不同事件自动并行化(不确定python是否已实现)，基本上生产者消费者所有优点都具备，并且，额外还有容易追溯，调试的好处.<br>缺点：程序架构需调整。改动最大.<br>实现：signal(python,django)<br>这个严格来说，并不属于并行范畴，但是将其放到这里，因为其和生产者消费者有共通之处，而且协程的实现底层也是基于事件模型。<br>生产者消费者存在很大问题，就是难以调试以及流程难以控制，由于切分粒度很细，并且不同步骤之间几乎独立，虽然可以保证整体的顺序执行以及最终任务可完成，但其上下游关系难以追溯，一旦出错也难以复现。所以个人很排斥生产者消费者这种方式。<br>而事件则不同，生产完成后将信息注册到事件链中，不但可以保存任务结束的result,还可以传递任务本身初始参数信息。每个事件都可以看做独立函数，即使某一个出错，也可以将事件参数作为debug锚点进行追踪。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def thread_multi():</span><br><span class="line">    threads = list()</span><br><span class="line">    for url in urls:</span><br><span class="line">        threads.append(threading.Thread(target=process, args=(url,)))</span><br><span class="line">    [t.start() for t in threads]</span><br><span class="line">    [t.join() for t in threads]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def thread_map():</span><br><span class="line">    pool = ThreadPool(max(1, cpu_count() - 1))</span><br><span class="line">    results = pool.map(process, urls)</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    print(results)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def thread_async():</span><br><span class="line">    pool = ThreadPool(max(1, cpu_count() - 1))</span><br><span class="line">    results = list()</span><br><span class="line">    for url in urls:</span><br><span class="line">        results.append(pool.apply_async(process, args=(url,)))</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    print([result.get() for result in results])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def process_multi():</span><br><span class="line">    processes = list()</span><br><span class="line">    for url in urls:</span><br><span class="line">        processes.append(Process(target=process, args=(url,)))</span><br><span class="line">    [t.start() for t in processes]</span><br><span class="line">    [t.join() for t in processes]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def process_map():</span><br><span class="line">    pool = Pool(processes=max(1, cpu_count() - 1))</span><br><span class="line">    results = pool.map(process, urls)</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    print(results)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def process_async():</span><br><span class="line">    pool = Pool(processes=max(1, cpu_count() - 1))</span><br><span class="line">    results = list()</span><br><span class="line">    for url in urls:</span><br><span class="line">        results.append(pool.apply_async(process, (url,)))</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    print([result.get() for result in results])</span><br></pre></td></tr></table></figure>



<h1 id="多线程与数据同步"><a href="#多线程与数据同步" class="headerlink" title="多线程与数据同步"></a>多线程与数据同步<a href="#多线程与数据同步" class="header-anchor">#</a></h1><p>python并发<strong>首选进程</strong>，但偶尔有场景进程无法搞定，比如有些<strong>变量是无法序列化的</strong>，就无法使用工具包<strong>manager()的工具类进行共享</strong>。如果自己实现新的共享方法，可能开发量较大，且质量难以保证。此时可考虑用线程处理，规避进程的变量共享难题，而且实际场景中,<strong>IO大概率都是瓶颈</strong>，所以使用线程其实也的确有些优势。个人而言，选择进程和线程较为重视的<strong>安全性</strong>，进程数据隔离较好，互不干扰。其次就是<strong>公用数据占比</strong>，如果大多数数据都需公用，那么线程也会比进程更佳，避免了进程较多的数据共享问题。</p>
<h3 id="线程本身就有局部变量为何还需要threadlocal"><a href="#线程本身就有局部变量，为何还需要ThreadLocal" class="headerlink" title="线程本身就有局部变量，为何还需要ThreadLocal"></a>线程本身就有局部变量，为何还需要ThreadLocal<a href="#线程本身就有局部变量为何还需要threadlocal" class="header-anchor">#</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line"> </span><br><span class="line"># 创建全局ThreadLocal对象:</span><br><span class="line">local_school = threading.local()</span><br><span class="line"> </span><br><span class="line">def process_student():</span><br><span class="line">  print &#x27;Hello, %s (in %s)&#x27; % (local_school.student, threading.current_thread().name)</span><br><span class="line"> </span><br><span class="line">def process_thread(name):</span><br><span class="line">  # 绑定ThreadLocal的student:</span><br><span class="line">  local_school.student = name</span><br><span class="line">  process_student()</span><br><span class="line"> </span><br><span class="line">t1 = threading.Thread(target= process_thread, args=(&#x27;Alice&#x27;,), name=&#x27;Thread-A&#x27;)</span><br><span class="line">t2 = threading.Thread(target= process_thread, args=(&#x27;Bob&#x27;,), name=&#x27;Thread-B&#x27;)</span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line">t1.join()</span><br><span class="line">t2.join()</span><br></pre></td></tr></table></figure>





<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料<a href="#参考资料" class="header-anchor">#</a></h1><p><a href="https://hexo.yuanjh.cn/hexo/16e1d5a">偏函数</a></p>
<p><a href="https://hexo.yuanjh.cn/hexo/549f56e4">并发</a></p>
<p><a href="https://hexo.yuanjh.cn/page/5/">闻鸡起舞 </a></p>
<p><a href="http://luly.lamost.org/blog/python_multiprocessing.html">python多进程pickle</a></p>
<p><a href="https://www.jianshu.com/p/2d3e6a21f6fe">Python生产者消费者模型 </a></p>
]]></content>
  </entry>
  <entry>
    <title>threading</title>
    <url>/article/threading/</url>
    <content><![CDATA[<h1 id="python-多线程实现"><a href="#python-多线程实现" class="headerlink" title="python 多线程实现"></a>python 多线程实现<a href="#python-多线程实现" class="header-anchor">#</a></h1><p>首先，python的多线程是假的。</p>
<p>看一个例子来看看python多线程的实现。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def say(name):</span><br><span class="line">        print(&#x27;你好%s at %s&#x27; %(name,time.ctime()))</span><br><span class="line">        time.sleep(2)</span><br><span class="line">        print(&quot;结束%s at %s&quot; %(name,time.ctime()))</span><br><span class="line"></span><br><span class="line">def listen(name):</span><br><span class="line">    print(&#x27;你好%s at %s&#x27; % (name,time.ctime()))</span><br><span class="line">    time.sleep(4)</span><br><span class="line">    print(&quot;结束%s at %s&quot; % (name,time.ctime()))</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    t1 = threading.Thread(target=say,args=(&#x27;tony&#x27;,))  #创建线程对象，Thread是一个类，实例化产生t1对象，这里就是创建了一个线程对象t1</span><br><span class="line">    t1.start() #启动线程，线程执行</span><br><span class="line">    t2 = threading.Thread(target=listen, args=(&#x27;simon&#x27;,)) #这里就是创建了一个线程对象t2</span><br><span class="line">    t2.start()</span><br><span class="line"></span><br><span class="line">    print(&quot;程序结束=====================&quot;)</span><br><span class="line"># 输出结果为</span><br><span class="line">你好tony at Fri Aug 20 15:42:07 2021 --t1线程执行</span><br><span class="line">你好simon at Fri Aug 20 15:42:07 2021 --t2线程执行</span><br><span class="line">程序结束===================== --主线程执行</span><br><span class="line">结束tony at Fri Aug 20 15:42:09 2021 --sleep之后，t1线程执行</span><br><span class="line">结束simon at Fri Aug 20 15:42:11 2021 --sleep之后，t2线程执行</span><br></pre></td></tr></table></figure>

<p>我们可以看到主线程的print并不是等t1,t2线程都执行完毕之后才打印的，这是因为主线程和t1,t2 线程是同时跑的。但是主进程要等非守护子线程结束之后，主线程才会退出。</p>
<span id="more"></span>

<p>上面其实就是python多线程的最简单用法，但是，一般开发中，我们需要主线程的print打印是在最后面的，表明所有流程都结束了，也就是主线程结束了。这里就引入了一个join的概念。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def say(name):</span><br><span class="line">        print(&#x27;你好%s at %s&#x27; %(name,time.ctime()))</span><br><span class="line">        time.sleep(2)</span><br><span class="line">        print(&quot;结束%s at %s&quot; %(name,time.ctime()))</span><br><span class="line"></span><br><span class="line">def listen(name):</span><br><span class="line">    print(&#x27;你好%s at %s&#x27; % (name,time.ctime()))</span><br><span class="line">    time.sleep(4)</span><br><span class="line">    print(&quot;结束%s at %s&quot; % (name,time.ctime()))</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    t1 = threading.Thread(target=say,args=(&#x27;tony&#x27;,))  #Thread是一个类，实例化产生t1对象，这里就是创建了一个线程对象t1</span><br><span class="line">    t1.start() #线程执行</span><br><span class="line">    t2 = threading.Thread(target=listen, args=(&#x27;simon&#x27;,)) #这里就是创建了一个线程对象t2</span><br><span class="line">    t2.start()</span><br><span class="line"></span><br><span class="line">    t1.join() #join等t1子线程结束，主线程打印并且结束</span><br><span class="line">    t2.join() #join等t2子线程结束，主线程打印并且结束</span><br><span class="line">    print(&quot;程序结束=====================&quot;)</span><br><span class="line">#输出</span><br><span class="line">你好tony at Fri Aug 20 15:49:01 2021</span><br><span class="line">你好simon at Fri Aug 20 15:49:01 2021</span><br><span class="line">结束tony at Fri Aug 20 15:49:03 2021</span><br><span class="line">结束simon at Fri Aug 20 15:49:05 2021</span><br><span class="line">程序结束=====================</span><br></pre></td></tr></table></figure>

<p>上面代码中加入join方法后实现了，我们上面所想要的结果，主线程print最后执行，并且主线程退出，注意主线程执行了打印操作和主线程结束不是一个概念，如果子线程不加join，则主线程也会执行打印，但是主线程不会结束，还是需要待非守护子线程结束之后，主线程才结束。</p>
<p>上面的情况，主进程都需要等待非守护子线程结束之后，主线程才结束。那我们是不是注意到一点，我说的是“非守护子线程”，那什么是非守护子线程？默认的子线程都是主线程的非守护子线程，但是有时候我们有需求，当主进程结束，不管子线程有没有结束，子线程都要跟随主线程一起退出，这时候我们引入一个“守护线程”的概念。</p>
<p>如果某个子线程设置为守护线程，主线程其实就不用管这个子线程了，当所有其他非守护线程结束，主线程就会退出，而守护线程将和主线程一起退出，守护主线程，这就是守护线程的意思</p>
<ol>
<li><p>设置t1线程为守护线程，看看执行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def say(name):</span><br><span class="line">        print(&#x27;你好%s at %s&#x27; %(name,time.ctime()))</span><br><span class="line">        time.sleep(2)</span><br><span class="line">        print(&quot;结束%s at %s&quot; %(name,time.ctime()))</span><br><span class="line"></span><br><span class="line">def listen(name):</span><br><span class="line">    print(&#x27;你好%s at %s&#x27; % (name,time.ctime()))</span><br><span class="line">    time.sleep(4)</span><br><span class="line">    print(&quot;结束%s at %s&quot; % (name,time.ctime()))</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    t1 = threading.Thread(target=say,args=(&#x27;tony&#x27;,))  #Thread是一个类，实例化产生t1对象，这里就是创建了一个线程对象t1</span><br><span class="line">    t1.setDaemon(True)</span><br><span class="line">    t1.start() #线程执行</span><br><span class="line">    t2 = threading.Thread(target=listen, args=(&#x27;simon&#x27;,)) #这里就是创建了一个线程对象t2</span><br><span class="line">    t2.start()</span><br><span class="line"></span><br><span class="line">    print(&quot;程序结束=====================&quot;)</span><br><span class="line">#输出</span><br><span class="line">你好tony at Fri Aug 20 15:59:52 2021</span><br><span class="line">你好simon at Fri Aug 20 15:59:52 2021程序结束=====================</span><br><span class="line"></span><br><span class="line">结束tony at Fri Aug 20 15:59:54 2021</span><br><span class="line">结束simon at Fri Aug 20 15:59:56 2021</span><br></pre></td></tr></table></figure></li>
<li><p>设置t2线程为守护线程，看看执行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def say(name):</span><br><span class="line">        print(&#x27;你好%s at %s&#x27; %(name,time.ctime()))</span><br><span class="line">        time.sleep(2)</span><br><span class="line">        print(&quot;结束%s at %s&quot; %(name,time.ctime()))</span><br><span class="line"></span><br><span class="line">def listen(name):</span><br><span class="line">    print(&#x27;你好%s at %s&#x27; % (name,time.ctime()))</span><br><span class="line">    time.sleep(4)</span><br><span class="line">    print(&quot;结束%s at %s&quot; % (name,time.ctime()))</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    t1 = threading.Thread(target=say,args=(&#x27;tony&#x27;,))  #Thread是一个类，实例化产生t1对象，这里就是创建了一个线程对象t1</span><br><span class="line">    </span><br><span class="line">    t1.start() #线程执行</span><br><span class="line">    t2 = threading.Thread(target=listen, args=(&#x27;simon&#x27;,)) #这里就是创建了一个线程对象t2</span><br><span class="line">    t2.setDaemon(True)</span><br><span class="line">    t2.start()</span><br><span class="line"></span><br><span class="line">    print(&quot;程序结束=====================&quot;)</span><br><span class="line">#输出</span><br><span class="line">你好tony at Fri Aug 20 16:02:19 2021</span><br><span class="line">你好simon at Fri Aug 20 16:02:19 2021程序结束=====================</span><br><span class="line"></span><br><span class="line">结束tony at Fri Aug 20 16:02:21 2021</span><br></pre></td></tr></table></figure></li>
</ol>
<p>不知道大家有没有弄清楚上面python多线程的实现方式以及join,守护线程的用法。</p>
<p>多线程的实现方法：</p>
<ol>
<li><p>直接创建子进程</p>
<p>首先可以使用 Thread 类来创建一个线程，创建时需要指定 target 参数为运行的方法名称，如果被调用的方法需要传入额外的参数，则可以通过 Thread 的 args 参数来指定。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line">def target(second):</span><br><span class="line">    print(f&#x27;Threading &#123;threading.current_thread().name&#125; is running&#x27;)</span><br><span class="line">    print(f&#x27;Threading &#123;threading.current_thread().name&#125; sleep &#123;second&#125;s&#x27;)</span><br><span class="line">    time.sleep(second)</span><br><span class="line">    print(f&#x27;Threading &#123;threading.current_thread().name&#125; is ended&#x27;)</span><br><span class="line">print(f&#x27;Threading &#123;threading.current_thread().name&#125; is running&#x27;)</span><br><span class="line">for i in [1, 5]:</span><br><span class="line">    thread = threading.Thread(target=target, args=[i])</span><br><span class="line">    thread.start()</span><br></pre></td></tr></table></figure></li>
<li><p>继承Thread类创建子进程</p>
<p>通过继承 Thread 类的方式创建一个线程，该线程需要执行的方法写在类的 run 方法里面即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line">class MyThread(threading.Thread):</span><br><span class="line">    def __init__(self, second):</span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.second = second</span><br><span class="line">    </span><br><span class="line">    def run(self):</span><br><span class="line">        print(f&#x27;Threading &#123;threading.current_thread().name&#125; is running&#x27;)</span><br><span class="line">        print(f&#x27;Threading &#123;threading.current_thread().name&#125; sleep &#123;self.second&#125;s&#x27;)</span><br><span class="line">        time.sleep(self.second)</span><br><span class="line">        print(f&#x27;Threading &#123;threading.current_thread().name&#125; is ended&#x27;)</span><br><span class="line">print(f&#x27;Threading &#123;threading.current_thread().name&#125; is running&#x27;)</span><br><span class="line">threads = []</span><br><span class="line">for i in [1, 5]:</span><br><span class="line">    thread = MyThread(i)</span><br><span class="line">    threads.append(thread)</span><br><span class="line">    thread.start()</span><br></pre></td></tr></table></figure></li>
</ol>
<p>主要方法：</p>
<p>join()：在子线程完成运行之前，这个子线程的父线程将一直被阻塞。</p>
<p>setDaemon(True)：</p>
<p>将线程声明为守护线程，必须在start() 方法调用之前设置， 如果不设置为守护线程程序会被无限挂起。这个方法基本和join是相反的。</p>
<p>当我们在程序运行中，执行一个主线程，如果主线程又创建一个子线程，主线程和子线程 就分兵两路，分别运行，那么当主线程完成</p>
<p>想退出时，会检验子线程是否完成。如 果子线程未完成，则主线程会等待子线程完成后再退出。但是有时候我们需要的是 只要主线程完成了，不管子线程是否完成，都要和主线程一起退出，这时就可以 用setDaemon方法啦。</p>
<p>其他方法：</p>
<p>run(): 线程被cpu调度后自动执行线程对象的run方法<br>start():启动线程活动。<br>isAlive(): 返回线程是否活动的。<br>getName(): 返回线程名。<br>setName(): 设置线程名。</p>
<p>threading模块提供的一些方法：<br>threading.currentThread(): 返回当前的线程变量。<br>threading.enumerate(): 返回一个包含正在运行的线程的list。正在运行指线程启动后、结束前，不包括启动前和终止后的线程。<br>threading.activeCount():返回正在运行的线程数量，与len(threading.enumerate())有相同的结果。</p>
<p>上面的例子中我们注意到两如果个任务如果顺序执行要6s结束，如果是多线程执行4S结束，性能是有所提升的，但是我们要知道这里的性能提升实际上是由于cpu并发实现性能提升，也就是cpu线程切换（多道技术）带来的，而并不是真正的多cpu并行执行。</p>
<p>上面提到了并行和并发，那这两者有什么区别呢？</p>
<p>并发：是指一个系统具有处理多个任务的能力（cpu切换，多道技术）<br>并行：是指一个系统具有同时处理多个任务的能力（cpu同时处理多个任务）<br>并行是并发的一种情况，子集</p>
<h1 id="python同步锁"><a href="#python同步锁" class="headerlink" title="python同步锁"></a>python同步锁<a href="#python同步锁" class="header-anchor">#</a></h1><p>锁通常被用来实现对共享资源的同步访问。为每一个共享资源创建一个Lock对象，当你需要访问该资源时，调用acquire方法来获取锁对象（如果其它线程已经获得了该锁，则当前线程需等待其被释放），待资源访问完后，再调用release方法释放锁。</p>
<p> 当没有同步锁时：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">num = 100</span><br><span class="line"></span><br><span class="line">def fun_sub():</span><br><span class="line">    global num</span><br><span class="line">    # num -= 1</span><br><span class="line">    num2 = num</span><br><span class="line">    time.sleep(0.001)</span><br><span class="line">    num = num2-1</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    print(&#x27;开始测试同步锁 at %s&#x27; % time.ctime())</span><br><span class="line"></span><br><span class="line">    thread_list = []</span><br><span class="line">    for thread in range(100):</span><br><span class="line">        t = threading.Thread(target=fun_sub)</span><br><span class="line">        t.start()</span><br><span class="line">        thread_list.append(t)</span><br><span class="line"></span><br><span class="line">    for t in thread_list:</span><br><span class="line">        t.join()</span><br><span class="line">    print(&#x27;num is %d&#x27; % num)</span><br><span class="line">    print(&#x27;结束测试同步锁 at %s&#x27; % time.ctime())</span><br><span class="line"># 输出</span><br><span class="line">开始测试同步锁 at Fri Aug 20 17:45:40 2021</span><br><span class="line">num is 98</span><br><span class="line">结束测试同步锁 at Fri Aug 20 17:45:40 2021</span><br></pre></td></tr></table></figure>

<p>上面的例子其实很简单就是创建100的线程，然后每个线程去从公共资源num变量去执行减1操作，按照正常情况下面，等到代码执行结束，打印num变量，应该得到的是0，因为100个线程都去执行了一次减1的操作。但我们会发现，每次执行的结果num值都不是一样的。</p>
<p>我们来看看上面代码的执行流程。<br>1.因为GIL，只有一个线程（假设线程1）拿到了num这个资源，然后把变量赋值给num2,sleep 0.001秒，这时候num=100<br>2.当第一个线程sleep 0.001秒这个期间，这个线程会做yield操作，就是把cpu切换给别的线程执行（假设线程2拿到个GIL，获得cpu使用权），线程2也和线程1一样也拿到num,返回赋值给num2，然sleep,这时候，其实num还是=100.<br>3.线程2 sleep时候，又要yield操作，假设线程3拿到num,执行上面的操作，其实num有可能还是100<br>4.等到后面cpu重新切换给线程1，线程2，线程3上执行的时候，他们执行减1操作后，其实等到的num其实都是99，而不是顺序递减的。<br>5.其他剩余的线程操作如上</p>
<p>加上锁后：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">num = 100</span><br><span class="line"></span><br><span class="line">def fun_sub():</span><br><span class="line">    global num</span><br><span class="line">    lock.acquire()</span><br><span class="line">    print(&#x27;----加锁----&#x27;)</span><br><span class="line">    print(&#x27;现在操作共享资源的线程名字是:&#x27;,t.name)</span><br><span class="line">    num2 = num</span><br><span class="line">    time.sleep(0.001)</span><br><span class="line">    num = num2-1</span><br><span class="line">    lock.release()</span><br><span class="line">    print(&#x27;----释放锁----&#x27;)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    print(&#x27;开始测试同步锁 at %s&#x27; % time.ctime())</span><br><span class="line"></span><br><span class="line">    lock = threading.Lock() #创建一把同步锁</span><br><span class="line"></span><br><span class="line">    thread_list = []</span><br><span class="line">    for thread in range(100):</span><br><span class="line">        t = threading.Thread(target=fun_sub)</span><br><span class="line">        t.start()</span><br><span class="line">        thread_list.append(t)</span><br><span class="line"></span><br><span class="line">    for t in thread_list:</span><br><span class="line">        t.join()</span><br><span class="line">    print(&#x27;num is %d&#x27; % num)</span><br><span class="line">    print(&#x27;结束测试同步锁 at %s&#x27; % time.ctime())</span><br></pre></td></tr></table></figure>



<h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁<a href="#死锁" class="header-anchor">#</a></h2><p>死锁的这个概念在很多地方都存在，比较在数据中，大概介绍下私有是怎么产生的</p>
<ol>
<li>A拿了一个苹果</li>
<li>B拿了一个香蕉</li>
<li>A现在想再拿个香蕉，就在等待B释放这个香蕉</li>
<li>B同时想要再拿个苹果，这时候就等待A释放苹果</li>
<li>这样就是陷入了僵局，这就是生活中的死锁</li>
</ol>
<p>python中在线程间共享多个资源的时候，如果两个线程分别占有一部分资源并且同时等待对方的资源，就会造成死锁，因为系统判断这部分资源都正在使用，所有这两个线程在无外力作用下将一直等待下去。下面是一个死锁的例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">lock_apple = threading.Lock()</span><br><span class="line">lock_banana = threading.Lock()</span><br><span class="line"></span><br><span class="line">class MyThread(threading.Thread):</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        self.fun1()</span><br><span class="line">        self.fun2()</span><br><span class="line"></span><br><span class="line">    def fun1(self):</span><br><span class="line"></span><br><span class="line">        lock_apple.acquire()  # 如果锁被占用,则阻塞在这里,等待锁的释放</span><br><span class="line"></span><br><span class="line">        print (&quot;线程 %s , 想拿: %s--%s&quot; %(self.name, &quot;苹果&quot;,time.ctime()))</span><br><span class="line"></span><br><span class="line">        lock_banana.acquire()</span><br><span class="line">        print (&quot;线程 %s , 想拿: %s--%s&quot; %(self.name, &quot;香蕉&quot;,time.ctime()))</span><br><span class="line">        lock_banana.release()</span><br><span class="line">        lock_apple.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def fun2(self):</span><br><span class="line"></span><br><span class="line">        lock_banana.acquire()</span><br><span class="line">        print (&quot;线程 %s , 想拿: %s--%s&quot; %(self.name, &quot;香蕉&quot;,time.ctime()))</span><br><span class="line">        time.sleep(0.1)</span><br><span class="line"></span><br><span class="line">        lock_apple.acquire()</span><br><span class="line">        print (&quot;线程 %s , 想拿: %s--%s&quot; %(self.name, &quot;苹果&quot;,time.ctime()))</span><br><span class="line">        lock_apple.release()</span><br><span class="line"></span><br><span class="line">        lock_banana.release()</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    for i in range(0, 10):  #建立10个线程</span><br><span class="line">        my_thread = MyThread()  #类继承法是python多线程的另外一种实现方式</span><br><span class="line">        my_thread.start()</span><br></pre></td></tr></table></figure>

<p>上面的代码其实就是描述了苹果和香蕉的故事。大家可以仔细看看过程。下面我们看看执行流程</p>
<p>1.fun1中，线程1先拿了苹果，然后拿了香蕉，然后释放香蕉和苹果，然后再在fun2中又拿了香蕉，sleep 0.1秒。<br>2.在线程1的执行过程中，线程2进入了，因为苹果被线程1释放了，线程2这时候获得了苹果，然后想拿香蕉<br>3.这时候就出现问题了，线程一拿完香蕉之后想拿苹果，返现苹果被线程2拿到了，线程2拿到苹果执行，想拿香蕉，发现香蕉被线程1持有了<br>4.双向等待，出现死锁，代码执行不下去了</p>
<h2 id="python递归锁rlock"><a href="#Python递归锁RLock" class="headerlink" title="Python递归锁RLock"></a>Python递归锁RLock<a href="#python递归锁rlock" class="header-anchor">#</a></h2><p>为了支持在同一线程中多次请求同一资源，python提供了”递归锁”：threading.RLock。RLock内部维护着一个Lock和一个counter变量，counter记录了acquire的次数，从而使得资源可以被多次acquire。直到一个线程所有的acquire都被release，其他的线程才能获得资源。</p>
<p>下面我们用递归锁RLock解决上面的死锁问题:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">lock = threading.RLock()  #递归锁</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class MyThread(threading.Thread):</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        self.fun1()</span><br><span class="line">        self.fun2()</span><br><span class="line"></span><br><span class="line">    def fun1(self):</span><br><span class="line"></span><br><span class="line">        lock.acquire()  # 如果锁被占用,则阻塞在这里,等待锁的释放</span><br><span class="line"></span><br><span class="line">        print (&quot;线程 %s , 想拿: %s--%s&quot; %(self.name, &quot;苹果&quot;,time.ctime()))</span><br><span class="line"></span><br><span class="line">        lock.acquire()</span><br><span class="line">        print (&quot;线程 %s , 想拿: %s--%s&quot; %(self.name, &quot;香蕉&quot;,time.ctime()))</span><br><span class="line">        lock.release()</span><br><span class="line">        lock.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def fun2(self):</span><br><span class="line"></span><br><span class="line">        lock.acquire()</span><br><span class="line">        print (&quot;线程 %s , 想拿: %s--%s&quot; %(self.name, &quot;香蕉&quot;,time.ctime()))</span><br><span class="line">        time.sleep(0.1)</span><br><span class="line"></span><br><span class="line">        lock.acquire()</span><br><span class="line">        print (&quot;线程 %s , 想拿: %s--%s&quot; %(self.name, &quot;苹果&quot;,time.ctime()))</span><br><span class="line">        lock.release()</span><br><span class="line"></span><br><span class="line">        lock.release()</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    for i in range(0, 10):  #建立10个线程</span><br><span class="line">        my_thread = MyThread()  #类继承法是python多线程的另外一种实现方式</span><br><span class="line">        my_thread.start()</span><br></pre></td></tr></table></figure>

<p>上面我们用一把递归锁，就解决了多个同步锁导致的死锁问题。大家可以把RLock理解为大锁中还有小锁，只有等到内部所有的小锁，都没有了，其他的线程才能进入这个公共资源。</p>
<p>另外一点前面没有就算用类继承的方法实现python多线程，这个大家可以查下，就算继承Thread类，然后重新run方法来实现。</p>
<h1 id="同步条件"><a href="#同步条件" class="headerlink" title="同步条件"></a>同步条件<a href="#同步条件" class="header-anchor">#</a></h1><p>先说说为什么我们需要这个同步条件，我们的python多线程在执行task过程中，是相互竞争的，大家都可以先获取cpu的执行权限，这就是问题所在的地方，每个线程都是独立运行且状态不可预测，但是我们想想如果我们的业务中需要根据情况来决定线程的执行顺序，也就是程序中的其他线程需要通过判断某个线程的状态来确定自己下一步的操作，这时候我们就需要使用threading库中的Event对象。 对象包含一个可由线程设置的信号标志,它允许线程等待某些事件的发生。</p>
<p>在 初始情况下,Event对象中的信号标志被设置为假，如果有线程等待一个Event对象, ,那么这个线程将会被一直阻塞直至该标志为真。</p>
<p>一个线程如果将一个Event对象的信号标志设置为真,它将唤醒所有等待这个Event对象的线程继续执行。</p>
<p>Event的方法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">event.isSet()：返回event的状态值</span><br><span class="line">event.wait()：如果 event.isSet()==False，将阻塞线程触发event.wait()</span><br><span class="line">event.set()： 设置event的状态值为True，所有阻塞池的线程激活进入就绪状态， 等待执行</span><br><span class="line">event.clear()：恢复event的状态值为False</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">class Teacher(threading.Thread):</span><br><span class="line">    def run(self):</span><br><span class="line">        print(&quot;大家现在要考试&quot;)</span><br><span class="line">        print(event.isSet())</span><br><span class="line">        event.set()</span><br><span class="line">        time.sleep(3)</span><br><span class="line">        print(&quot;考试结束&quot;)</span><br><span class="line">        print(event.isSet())</span><br><span class="line">        event.set()</span><br><span class="line">class Student(threading.Thread):</span><br><span class="line">    def run(self):</span><br><span class="line">        event.wait()</span><br><span class="line">        print(&quot;啊啊啊啊啊啊&quot;)</span><br><span class="line">        time.sleep(1)</span><br><span class="line">        event.clear()</span><br><span class="line">        event.wait()</span><br><span class="line">        print(&quot;下课回家&quot;)</span><br><span class="line"></span><br><span class="line">if __name__==&quot;__main__&quot;:</span><br><span class="line">    event=threading.Event()</span><br><span class="line">    threads=[]</span><br><span class="line">    for i in range(10):</span><br><span class="line">        threads.append(Student())</span><br><span class="line">    threads.append(Teacher())</span><br><span class="line">    for t in threads:</span><br><span class="line">        t.start()</span><br><span class="line">    for t in threads:</span><br><span class="line">        t.join()</span><br></pre></td></tr></table></figure>



<p>上述代码流程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.模拟1个老师和10个学生，进行考试，我们需要的目的是学生线程要等待老师线程说完“大家现在考试”，然后学生线程去考试，之后老师线程说“考试结束”，学生线程放学回家，学生线程的执行与否取决于老师线程，所以这里用的Event</span><br><span class="line">2.学生线程开始event.wait()，这个说明如果event如果一直不设置的话，学生线程就一直等待，等待一个event.set()操作</span><br><span class="line">3.老师线程说完&quot;大家现在要考试&quot;，然后event.set()，执行event,设置完执行，学生线程就能够被唤醒继续执行下面的操作发出&quot;啊啊啊啊啊啊&quot;的叫苦连天</span><br><span class="line">4.学生线程进行考试，并且执行event.clear()，清除event，因为他们在等老师说“考试结束”，之后他们在等老师线程的event.set()</span><br><span class="line">5.老师线程执行event.set()，唤醒学生线程，然后下课回家.</span><br></pre></td></tr></table></figure>



<h2 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量<a href="#信号量" class="header-anchor">#</a></h2><p>信号量用来控制线程并发数的，Semaphore管理一个内置的计数 器，每当调用acquire()时-1，调用release()时+1。计数器不能小于0，当计数器为 0时，acquire()将阻塞线程至同步锁定状态，直到其他线程调用release()。其实就是控制最多几个线程可以操作同享资源。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">semaphore = threading.Semaphore(5)</span><br><span class="line"></span><br><span class="line">def func():</span><br><span class="line">    if semaphore.acquire():</span><br><span class="line">        print (threading.currentThread().getName() + &#x27;获取共享资源&#x27;)</span><br><span class="line">        time.sleep(2)</span><br><span class="line">        semaphore.release()</span><br><span class="line"></span><br><span class="line">for i in range(10)</span><br><span class="line">  t1 = threading.Thread(target=func)</span><br><span class="line">  t1.start()</span><br></pre></td></tr></table></figure>

<p>上面一个简单的例子就是创建10个线程，让每次只让5个线程去执行func函数。</p>
<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列<a href="#队列" class="header-anchor">#</a></h2><p>Queue是python标准库中的线程安全的队列实现,提供了一个适用于多线程编程的先进先出的数据结构，即队列，用来在生产者和消费者线程之间的信息传递</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading,time</span><br><span class="line"></span><br><span class="line">m=[1,2,3,4,5]</span><br><span class="line">print(m[-1])</span><br><span class="line"></span><br><span class="line">def remove_last():</span><br><span class="line">    a=m[-1]</span><br><span class="line">    time.sleep(1)</span><br><span class="line">    m.remove(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t1=threading.Thread(target=remove_last)</span><br><span class="line">t1.start()</span><br><span class="line"></span><br><span class="line">t2=threading.Thread(target=remove_last)</span><br><span class="line">t2.start()</span><br><span class="line">## list 不是线程安全会报错</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">创建一个“队列”对象</span><br><span class="line">import Queue</span><br><span class="line">q = Queue.Queue(maxsize = 10)</span><br><span class="line">Queue.Queue类即是一个队列的同步实现。队列长度可为无限或者有限。可通过Queue的构造函数的可选参数maxsize来设定队列长度。如果maxsize小于1就表示队列长度无限。</span><br><span class="line"></span><br><span class="line">将一个值放入队列中</span><br><span class="line">q.put(10)</span><br><span class="line">调用队列对象的put()方法在队尾插入一个项目。put()有两个参数，第一个item为必需的，为插入项目的值；第二个block为可选参数，默认为</span><br><span class="line">1。如果队列当前为空且block为1，put()方法就使调用线程暂停,直到空出一个数据单元。如果block为0，put方法将引发Full异常。</span><br><span class="line"></span><br><span class="line">将一个值从队列中取出</span><br><span class="line">q.get()</span><br><span class="line">调用队列对象的get()方法从队头删除并返回一个项目。可选参数为block，默认为True。如果队列为空且block为True，</span><br><span class="line">get()就使调用线程暂停，直至有项目可用。如果队列为空且block为False，队列将引发Empty异常。</span><br><span class="line"></span><br><span class="line">Python Queue模块有三种队列及构造函数:</span><br><span class="line">1、Python Queue模块的FIFO队列先进先出。   class queue.Queue(maxsize)</span><br><span class="line">2、LIFO类似于堆，即先进后出。               class queue.LifoQueue(maxsize)</span><br><span class="line">3、还有一种是优先级队列级别越低越先出来。        class queue.PriorityQueue(maxsize)</span><br><span class="line"></span><br><span class="line">此包中的常用方法(q = Queue.Queue()):</span><br><span class="line">q.qsize() 返回队列的大小</span><br><span class="line">q.empty() 如果队列为空，返回True,反之False</span><br><span class="line">q.full() 如果队列满了，返回True,反之False</span><br><span class="line">q.full 与 maxsize 大小对应</span><br><span class="line">q.get([block[, timeout]]) 获取队列，timeout等待时间</span><br><span class="line">q.get_nowait() 相当q.get(False)</span><br><span class="line">非阻塞 q.put(item) 写入队列，timeout等待时间</span><br><span class="line">q.put_nowait(item) 相当q.put(item, False)</span><br><span class="line">q.task_done() 在完成一项工作之后，q.task_done() 函数向任务已经完成的队列发送一个信号</span><br><span class="line">q.join() 实际上意味着等到队列为空，再执行别的操作</span><br></pre></td></tr></table></figure>

<p>队列(queue)一般会被用在生产者和消费者模型上。</p>
<p>生产者消费者模型：</p>
<p>为什么要使用生产者和消费者模式</p>
<p>在python线程中，生产者就是生产数据的线程，消费者就是消费数据的线程。在多线程开发当中，如果生产者处理速度很快，而消费者处理速度很慢，那么生产者就必须等待消费者处理完，才能继续生产数据。同样的道理，如果消费者的处理能力大于生产者，那么消费者就必须等待生产者。为了解决这个问题于是引入了生产者和消费者模式。</p>
<p>什么是生产者消费者模式</p>
<p>生产者消费者模式是通过一个容器来解决生产者和消费者的强耦合问题。生产者和消费者彼此之间不直接通讯，而通过阻塞队列来进行通讯，所以生产者生产完数据之后不用等待消费者处理，直接扔给阻塞队列，消费者不找生产者要数据，而是直接从阻塞队列里取，阻塞队列就相当于一个缓冲区，平衡了生产者和消费者的处理能力。</p>
<p>下面我们看看生产者消费者的代码，就拿大家常说的吃包子为例子吧</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import time,random</span><br><span class="line">import queue,threading</span><br><span class="line"></span><br><span class="line">q = queue.Queue()</span><br><span class="line"></span><br><span class="line">def Producer(name):</span><br><span class="line">  count = 0</span><br><span class="line">  while count &lt;10:</span><br><span class="line">    print(&quot;制造包子ing&quot;)</span><br><span class="line">    time.sleep(random.randrange(3))</span><br><span class="line">    q.put(count)</span><br><span class="line">    print(&#x27;生产者 %s 生产了 %s 包子..&#x27; %(name, count))</span><br><span class="line">    count +=1</span><br><span class="line">    #q.task_done()</span><br><span class="line">    #q.join()</span><br><span class="line"></span><br><span class="line">def Consumer(name):</span><br><span class="line">  count = 0</span><br><span class="line">  while count &lt;10:</span><br><span class="line">    time.sleep(random.randrange(4))</span><br><span class="line">    if not q.empty():</span><br><span class="line">        data = q.get()</span><br><span class="line">        #q.task_done()</span><br><span class="line">        #q.join()</span><br><span class="line">        print(data)</span><br><span class="line">        print(&#x27;消费者 %s 消费了 %s 包子...&#x27; %(name, data))</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;包子吃完了&quot;)</span><br><span class="line">    count +=1</span><br><span class="line"></span><br><span class="line">c1 = threading.Thread(target=Producer, args=(&#x27;小明&#x27;,))</span><br><span class="line">c2 = threading.Thread(target=Consumer, args=(&#x27;小花&#x27;,))</span><br><span class="line">c3 = threading.Thread(target=Consumer, args=(&#x27;小灰&#x27;,))</span><br><span class="line">c1.start()</span><br><span class="line">c2.start()</span><br><span class="line">c3.start()</span><br><span class="line"></span><br><span class="line">c1.join()</span><br><span class="line">c2.join()</span><br><span class="line">c3.join()</span><br><span class="line"></span><br><span class="line">print(&#x27;结束&#x27;)</span><br></pre></td></tr></table></figure>

<p>另一种实现方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># q.task_done() 在完成一项工作之后，q.task_done() 函数向任务已经完成的队列发送一个信号</span><br><span class="line"># q.join() 实际上意味着等到队列为空，再执行别的操作</span><br><span class="line">import time,random</span><br><span class="line">import queue,threading</span><br><span class="line"></span><br><span class="line">q = queue.Queue()</span><br><span class="line"></span><br><span class="line">def Producer(name):</span><br><span class="line">  count = 0</span><br><span class="line">  while count &lt;10:</span><br><span class="line">    print(&quot;制造包子ing&quot;)</span><br><span class="line">    time.sleep(random.randrange(3))</span><br><span class="line">    q.put(count)</span><br><span class="line">    print(&#x27;生产者 %s 生产了 %s 包子..&#x27; %(name, count))</span><br><span class="line">    count +=1</span><br><span class="line">    q.task_done()</span><br><span class="line">    #q.join()</span><br><span class="line"></span><br><span class="line">def Consumer(name):</span><br><span class="line">  count = 0</span><br><span class="line">  while count &lt;10:</span><br><span class="line">    time.sleep(random.randrange(4))</span><br><span class="line">    data = q.get()</span><br><span class="line">    #q.task_done()</span><br><span class="line">    print(&#x27;等待中&#x27;)</span><br><span class="line">    q.join()</span><br><span class="line">    print(&#x27;消费者 %s 消费了 %s 包子...&#x27; %(name, data))</span><br><span class="line">    count +=1</span><br><span class="line"></span><br><span class="line">c1 = threading.Thread(target=Producer, args=(&#x27;小明&#x27;,))</span><br><span class="line">c2 = threading.Thread(target=Consumer, args=(&#x27;小花&#x27;,))</span><br><span class="line">c3 = threading.Thread(target=Consumer, args=(&#x27;小灰&#x27;,))</span><br><span class="line">c4 = threading.Thread(target=Consumer, args=(&#x27;小天&#x27;,))</span><br><span class="line"></span><br><span class="line">c1.start()</span><br><span class="line">c2.start()</span><br><span class="line">c3.start()</span><br><span class="line">c4.start()</span><br></pre></td></tr></table></figure>



<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料<a href="#参考资料" class="header-anchor">#</a></h1><p><a href="https://mp.weixin.qq.com/s/Hgp-x-T3ss4IiVk2_4VUrA">一篇文章搞懂Python多线程简单实现和GIL</a></p>
<p><a href="https://mp.weixin.qq.com/s/RZSBe2MG9tsbUVZLHxK9NA">一篇文章理清Python多线程同步锁，死锁和递归锁</a></p>
<p><a href="https://mp.weixin.qq.com/s/vKsNbDZnvg6LHWVA-AOIMA">同步条件</a></p>
]]></content>
  </entry>
  <entry>
    <title>hadoop_spark_hbase_hive</title>
    <url>/article/hadoop-spark-hbase-hive/</url>
    <content><![CDATA[<p>hdfs-site.xml</p>
<span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line">  you may not use this file except in compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to in writing, software</span><br><span class="line">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License for the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Put site-specific property overrides in this file. --&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                        &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">                                        &lt;value&gt;2&lt;/value&gt;</span><br><span class="line">                                                        &lt;final&gt;true&lt;/final&gt;</span><br><span class="line">                                                &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                        &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;</span><br><span class="line">                                        &lt;value&gt;/usr/local/hadoop/namenode&lt;/value&gt;</span><br><span class="line">                                                        &lt;final&gt;true&lt;/final&gt;</span><br><span class="line">                                                &lt;/property&gt;</span><br><span class="line">                                                &lt;property&gt;</span><br><span class="line">                                                                &lt;name&gt;dfs.datanode.name.dir&lt;/name&gt;</span><br><span class="line">                                                                                &lt;value&gt;/usr/local/hadoop/datanode&lt;/value&gt;</span><br><span class="line">                                                                                                &lt;final&gt;true&lt;/final&gt;</span><br><span class="line">                                                                                        &lt;/property&gt;</span><br><span class="line">                                                                                        &lt;property&gt;</span><br><span class="line">                                                                                                        &lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt;</span><br><span class="line"></span><br><span class="line">&lt;value&gt;master:50090&lt;/value&gt;</span><br><span class="line"></span><br><span class="line">                &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>



<p>core-site.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line">  you may not use this file except in compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to in writing, software</span><br><span class="line">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License for the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Put site-specific property overrides in this file. --&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                        &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">                                        &lt;value&gt;file:/usr/local/hadoop/tmp&lt;/value&gt;</span><br><span class="line">                                                        &lt;description&gt;Abase for other temporary directories.&lt;/description&gt;</span><br><span class="line">                                                &lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">           &lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">                      &lt;value&gt;hdfs://master:9000&lt;/value&gt;</span><br><span class="line">                               &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">                               &lt;property&gt;</span><br><span class="line">                                                       &lt;name&gt;ha.zookeeper.quorum&lt;/name&gt;</span><br><span class="line">                                                                               &lt;value&gt;master:2181,slave1:2181,slave2:2181&lt;/value&gt;</span><br><span class="line">                                                                                               &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line">~                                    </span><br></pre></td></tr></table></figure>



<p>hadoop-env.sh</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_291</span><br><span class="line">export HDFS_NAMENODE_USER=root</span><br><span class="line">export HDFS_DATANODE_USER=root</span><br><span class="line">export HDFS_SECONDARYNAMENODE_USER=root</span><br><span class="line">export YARN_RESOURCEMANAGER_USER=root</span><br><span class="line">export YARN_NODEMANAGER_USER=root</span><br></pre></td></tr></table></figure>



<p>mapred-site.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line">  you may not use this file except in compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to in writing, software</span><br><span class="line">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License for the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Put site-specific property overrides in this file. --&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                        &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">                                        &lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">                                                    &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                        &lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt;</span><br><span class="line">                                        &lt;value&gt;master:10020&lt;/value&gt;</span><br><span class="line">                                &lt;/property&gt;</span><br><span class="line">                                &lt;property&gt;</span><br><span class="line">                                                &lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt;</span><br><span class="line">                                                                &lt;value&gt;master:19888&lt;/value&gt;</span><br><span class="line">                                                        &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line">~                                                                                                                       ~                                                                                                                       ~   </span><br></pre></td></tr></table></figure>



<p>yarn-site.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line">  you may not use this file except in compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to in writing, software</span><br><span class="line">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License for the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Site specific YARN configuration properties --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                  &lt;name&gt;yarn.resourcemanager.webapp.address&lt;/name&gt;</span><br><span class="line">                            &lt;value&gt;master:8088&lt;/value&gt;</span><br><span class="line">                    &lt;/property&gt;</span><br><span class="line">                    &lt;property&gt;</span><br><span class="line">                              &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;</span><br><span class="line">                                        &lt;value&gt;master&lt;/value&gt;</span><br><span class="line">                                &lt;/property&gt;</span><br><span class="line">                                &lt;property&gt;</span><br><span class="line">                                          &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">                                                    &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">                                            &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line">~                                                                                                                       ~                                                                                                                       ~                                                                                                                       ~                                                                                                                       ~                                                                                                                       ~        </span><br></pre></td></tr></table></figure>



<p>workers</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">master</span><br><span class="line">slave1</span><br><span class="line">slave2</span><br><span class="line">~                                                                                                                       ~                                                                                                                       ~                                                                                                                       ~                                                                                                                       ~         </span><br></pre></td></tr></table></figure>

<p>在$HADOOP_HOME目录下创建datanode,namenode,tmp文件夹</p>
<p>HBASE</p>
<p>hbase-env.sh</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export HBASE_DISABLE_HADOOP_CLASSPATH_LOOKUP=&quot;true&quot;</span><br><span class="line"></span><br><span class="line"># Override text processing tools for use by these launch scripts.</span><br><span class="line"># export GREP=&quot;$&#123;GREP-grep&#125;&quot;</span><br><span class="line"># export SED=&quot;$&#123;SED-sed&#125;&quot;</span><br><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_291</span><br><span class="line">export HBASE_MANAGES_ZK=false</span><br></pre></td></tr></table></figure>



<p>hbase-site.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* Unless required by applicable law or agreed to in writing, software</span><br><span class="line"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line"> * See the License for the specific language governing permissions and</span><br><span class="line"> * limitations under the License.</span><br><span class="line"> */</span><br><span class="line">--&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">  &lt;!--</span><br><span class="line">    The following properties are set for running HBase as a single process on a</span><br><span class="line">    developer workstation. With this configuration, HBase is running in</span><br><span class="line">    &quot;stand-alone&quot; mode and without a distributed file system. In this mode, and</span><br><span class="line">    without further configuration, HBase and ZooKeeper data are stored on the</span><br><span class="line">    local filesystem, in a path under the value configured for `hbase.tmp.dir`.</span><br><span class="line">    This value is overridden from its default value of `/tmp` because many</span><br><span class="line">    systems clean `/tmp` on a regular basis. Instead, it points to a path within</span><br><span class="line">    this HBase installation directory.</span><br><span class="line"></span><br><span class="line">    Running against the `LocalFileSystem`, as opposed to a distributed</span><br><span class="line">    filesystem, runs the risk of data integrity issues and data loss. Normally</span><br><span class="line">    HBase will refuse to run in such an environment. Setting</span><br><span class="line">    `hbase.unsafe.stream.capability.enforce` to `false` overrides this behavior,</span><br><span class="line">    permitting operation. This configuration is for the developer workstation</span><br><span class="line">    only and __should not be used in production!__</span><br><span class="line"></span><br><span class="line">    See also https://hbase.apache.org/book.html#standalone_dist</span><br><span class="line">  --&gt;</span><br><span class="line">         &lt;property&gt;</span><br><span class="line">                         &lt;name&gt;hbase.rootdir&lt;/name&gt;</span><br><span class="line">                                         &lt;value&gt;hdfs://master:9000/hbase&lt;/value&gt;</span><br><span class="line">                                         &lt;description&gt;nothing&lt;/description&gt;                              &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;hbase.cluster.distributed&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;true&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">                  &lt;name&gt;hbase.zookeeper.quorum&lt;/name&gt;</span><br><span class="line">                                  &lt;value&gt;master:2181,slave1:2181,slave2:2181&lt;/value&gt;</span><br><span class="line">                                                          &lt;description&gt;nothing&lt;/description&gt;</span><br><span class="line">                                                                      &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;hbase.tmp.dir&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;./tmp&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;hbase.unsafe.stream.capability.enforce&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;false&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>



<p>regionservers</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">master</span><br><span class="line">slave1</span><br><span class="line">slave2</span><br><span class="line">~                                                                                                                       ~         :q</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>HIVE</p>
<p>hive-site.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;</span><br><span class="line">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">	&lt;property&gt;   </span><br><span class="line">    	&lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt;                                 &lt;value&gt;jdbc:mysql://master:3306/hive?createDatabaseIfNotExist=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;useSSL=false&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;                                                                 &lt;property&gt;</span><br><span class="line">		&lt;name&gt;javax.jdo.option.ConnectionDriverName&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;com.mysql.jdbc.Driver&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;javax.jdo.option.ConnectionUserName&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;root&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;javax.jdo.option.ConnectionPassword&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;asdfqwer&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;datanucleus.readOnlyDatastore&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;false&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;                                                                 &lt;property&gt;</span><br><span class="line">		&lt;name&gt;datanucleus.fixedDatastore&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;false&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">		&lt;name&gt;datanucleus.autoCreateSchema&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;datanucleus.schema.autoCreateAll&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;datanucleus.autoCreateTables&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;datanucleus.autoCreateColumns&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;hive.metastore.local&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;hive.cli.print.header&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;hive.cli.print.current.db&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;true&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;                                                             &lt;/configuration&gt;                                                                                  </span><br></pre></td></tr></table></figure>



<p>创建warehouse文件夹，将template去掉，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql-connector-java-5.1.49-bin.jar ##来自下载</span><br><span class="line">guava-27.0-jre.jar##来自hadoop</span><br></pre></td></tr></table></figure>



<p>SPARK</p>
<p>spark-env.sh</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_291</span><br><span class="line">export SCALA_HOME=/usr/share/scala</span><br><span class="line">export HADOOP_HOME=/usr/local/hadoop</span><br><span class="line">export HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop</span><br><span class="line">export SPARK_MASTER_HOST=master</span><br><span class="line">export SPARK_LOCAL_DIRS=/usr/local/spark</span><br></pre></td></tr></table></figure>

<p>workers</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">master</span><br><span class="line">slave1</span><br><span class="line">slave2</span><br><span class="line">~            </span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start-spark-all.sh</span><br><span class="line">stop-spark-all.sh</span><br><span class="line">### 防止与Hadoop start-all.sh 冲突，改名</span><br></pre></td></tr></table></figure>



<p>ZOOKEEPER</p>
<p>zoo.cfg</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># The number of milliseconds of each tick</span><br><span class="line">tickTime=2000</span><br><span class="line"># The number of ticks that the initial</span><br><span class="line"># synchronization phase can take</span><br><span class="line">initLimit=10</span><br><span class="line"># The number of ticks that can pass between</span><br><span class="line"># sending a request and getting an acknowledgement</span><br><span class="line">syncLimit=5</span><br><span class="line"># the directory where the snapshot is stored.</span><br><span class="line"># do not use /tmp for storage, /tmp here is just</span><br><span class="line"># example sakes.</span><br><span class="line">dataDir=/usr/local/zookeeper/data</span><br><span class="line"># the port at which the clients will connect</span><br><span class="line">clientPort=2181</span><br><span class="line">server.1=172.17.0.2:2888:3888</span><br><span class="line">server.2=172.17.0.3:2888:3888</span><br><span class="line">server.3=172.17.0.4:2888:3888</span><br></pre></td></tr></table></figure>







<p>~/.bashrc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_291</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line">export HADOOP_HOME=/usr/local/hadoop</span><br><span class="line">export HADOOP_CONFIG_HOME=$HADOOP_HOME/etc/hadoop</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/bin</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/sbin</span><br><span class="line">export ZOOKEEPER_HOME=/usr/local/zookeeper</span><br><span class="line">export PATH=$PATH:$ZOOKEEPER_HOME/bin</span><br><span class="line">export SCALA_HOME=/usr/local/scala</span><br><span class="line">export PATH=$PATH:$SCALA_HOME/bin</span><br><span class="line">export SPARK_HOME=/usr/local/spark</span><br><span class="line">export PATH=$PATH:$SPARK_HOME/bin:$SPARK_HOME/sbin</span><br><span class="line">export HBASE_HOME=/usr/local/hbase</span><br><span class="line">export PATH=$PATH:$HBASE_HOME/bin</span><br><span class="line">export HIVE_HOME=/usr/local/hive</span><br><span class="line">export PATH=$PATH:$HIVE_HOME/bin</span><br></pre></td></tr></table></figure>



<h1 id="hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop<a href="#hadoop" class="header-anchor">#</a></h1><h2 id="step-1-拉取ubuntu镜像"><a href="#step-1-拉取Ubuntu镜像" class="headerlink" title="step 1 拉取Ubuntu镜像"></a>step 1 拉取Ubuntu镜像<a href="#step-1-拉取ubuntu镜像" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull ubuntu:latest</span><br></pre></td></tr></table></figure>

<h2 id="step-2-使用dockerfile构建包含jdk的ubuntu镜像"><a href="#step-2-使用Dockerfile构建包含jdk的ubuntu镜像" class="headerlink" title="step 2 使用Dockerfile构建包含jdk的ubuntu镜像"></a>step 2 使用Dockerfile构建包含jdk的ubuntu镜像<a href="#step-2-使用dockerfile构建包含jdk的ubuntu镜像" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">去jdk官网下载jdk包，此处下载的为jdk1.8 ** jdk-8u291-linux-x64.tar.gz**, 将下载好的jdk文件移至wsl2环境下，在此目录下新建Dockerfile文件，并进入编辑状态</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim Dockerfile</span><br></pre></td></tr></table></figure>

<p>在Dockfile中输入以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM ubuntu:latest</span><br><span class="line">MAINTAINER duanmu</span><br><span class="line">ADD jdk-8u291-linux-x64.tar.gz /usr/local/</span><br><span class="line">ENV JAVA_HOME /usr/local/jdk1.8.0_291</span><br><span class="line">ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">ENV PATH $PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure>

<p>编辑后保存，开始build镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t jdk-20210127 .</span><br></pre></td></tr></table></figure>

<h2 id="step-3-进入镜像"><a href="#step-3-进入镜像" class="headerlink" title="step 3 进入镜像"></a>step 3 进入镜像<a href="#step-3-进入镜像" class="header-anchor">#</a></h2><p>​        新建一个以jdk-20210127为基础镜像的容器命名为ubuntu_hadoop并指定容器的hostname为charlie,并进入容器。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it --name=ubuntu_hadoop -h charlie jdk-20210127</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="step-4-升级apt-get"><a href="#step-4-升级apt-get" class="headerlink" title="step 4 升级apt-get"></a>step 4 升级apt-get<a href="#step-4-升级apt-get" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure>



<h2 id="step-5-安装vim"><a href="#step-5-安装vim" class="headerlink" title="step 5 安装vim"></a>step 5 安装vim<a href="#step-5-安装vim" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install vim</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="step-6-更新apt-get镜像源"><a href="#step-6-更新apt-get镜像源" class="headerlink" title="step 6 更新apt-get镜像源"></a>step 6 更新apt-get镜像源<a href="#step-6-更新apt-get镜像源" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure>

<p>将其中内容全部替换为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deb-src http://archive.ubuntu.com/ubuntu focal main restricted #Added by software-properties</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal main restricted</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted multiverse universe #Added by software-properties</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted multiverse universe #Added by software-properties</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-updates universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-updates multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse #Added by software-properties</span><br><span class="line">deb http://archive.canonical.com/ubuntu focal partner</span><br><span class="line">deb-src http://archive.canonical.com/ubuntu focal partner</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted multiverse universe #Added by software-properties</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-security universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-security multiverse</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="step-7-重新升级apt-get"><a href="#step-7-重新升级apt-get" class="headerlink" title="step 7 重新升级apt-get"></a>step 7 重新升级apt-get<a href="#step-7-重新升级apt-get" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure>

<h2 id="step-8-安装wget"><a href="#step-8-安装wget" class="headerlink" title="step 8 安装wget"></a>step 8 安装wget<a href="#step-8-安装wget" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure>

<h2 id="step-9-通过wget下载hadoop安装包"><a href="#step-9-通过wget下载Hadoop安装包" class="headerlink" title="step 9 通过wget下载Hadoop安装包"></a>step 9 通过wget下载Hadoop安装包<a href="#step-9-通过wget下载hadoop安装包" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://mirrors.cnnic.cn/apache/hadoop/common/hadoop-3.2.2/hadoop-3.2.2.tar.gz</span><br><span class="line"></span><br><span class="line">#wget https://mirrors.tuna.tsinghua.edu.cn/apache/hive/hive-3.1.2/apache-hive-3.1.2-bin.tar.gz</span><br><span class="line"></span><br><span class="line">#wget https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/zookeeper-3.6.3/apache-zookeeper-3.6.3-bin.tar.gz </span><br><span class="line"></span><br><span class="line">#wget https://mirrors.tuna.tsinghua.edu.cn/apache/hbase/stable/hbase-2.3.5-bin.tar.gz </span><br><span class="line"></span><br><span class="line">#wget https://mirrors.tuna.tsinghua.edu.cn/apache/spark/spark-3.1.2/spark-3.1.2-bin-hadoop3.2.tgz</span><br><span class="line"></span><br><span class="line">#wget https://downloads.lightbend.com/scala/2.13.6/scala-2.13.6.tgz</span><br><span class="line"></span><br><span class="line">#wget http://mirrors.ustc.edu.cn/mysql-ftp/Downloads/MySQL-5.7/mysql-server_5.7.31-1ubuntu18.04_amd64.deb-bundle.tar</span><br><span class="line"></span><br><span class="line">#wget https://cdn.mysql.com/archives/mysql-connector-java-5.1/mysql-connector-java-5.1.49.tar.gz</span><br></pre></td></tr></table></figure>

<h3 id="step-10-解压hadoop"><a href="#step-10-解压hadoop" class="headerlink" title="step 10 解压hadoop"></a>step 10 解压hadoop<a href="#step-10-解压hadoop" class="header-anchor">#</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -xvzf hadoop-3.2.2.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure>



<h3 id="step-11-配置环境变量并重启配置文件"><a href="#step-11-配置环境变量并重启配置文件" class="headerlink" title="step 11 配置环境变量并重启配置文件"></a>step 11 配置环境变量并重启配置文件<a href="#step-11-配置环境变量并重启配置文件" class="header-anchor">#</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure>

<p>新增以下环境变量：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_291</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line">export HADOOP_HOME=/usr/local/hadoop</span><br><span class="line">export HADOOP_CONFIG_HOME=$HADOOP_HOME/etc/hadoop</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/bin</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/sbin</span><br></pre></td></tr></table></figure>

<p>并重启配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure>

<h3 id="step-12-创建文件夹并修改配置文件"><a href="#step-12-创建文件夹并修改配置文件" class="headerlink" title="step 12 创建文件夹并修改配置文件"></a>step 12 创建文件夹并修改配置文件<a href="#step-12-创建文件夹并修改配置文件" class="header-anchor">#</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd $HADOOP_HOME</span><br><span class="line">mkdir tmp</span><br><span class="line">mkdir namenode</span><br><span class="line">mkdir datanode</span><br></pre></td></tr></table></figure>

<p>修改配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd $HADOOP_CONFIG_HOME</span><br><span class="line">vim core-site.xml</span><br></pre></td></tr></table></figure>

<p>将下面内容替换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line">  you may not use this file except in compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to in writing, software</span><br><span class="line">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License for the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Put site-specific property overrides in this file. --&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;file:/usr/local/hadoop/tmp&lt;/value&gt;</span><br><span class="line">		&lt;description&gt;Abase for other temporary directories.&lt;/description&gt;  		&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;hdfs://hdcluster&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;ha.zookeeper.quorum&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;master:2181,slave1:2181,slave2:2181&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>

<p>修改hdfs-site.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim hdfs-site.xml</span><br></pre></td></tr></table></figure>

<p>用下面配置替换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line">  you may not use this file except in compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to in writing, software</span><br><span class="line">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License for the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Put site-specific property overrides in this file. --&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;2&lt;/value&gt;</span><br><span class="line">        &lt;final&gt;true&lt;/final&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;/usr/local/hadoop/namenode&lt;/value&gt;</span><br><span class="line">        &lt;final&gt;true&lt;/final&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.datanode.name.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;/usr/local/hadoop/datanode&lt;/value&gt;</span><br><span class="line">        &lt;final&gt;true&lt;/final&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;master:50090&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>



<p>接下来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim mapred-site.xml</span><br></pre></td></tr></table></figure>

<p>使用下面内容替换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line">  you may not use this file except in compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to in writing, software</span><br><span class="line">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License for the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Put site-specific property overrides in this file. --&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">		&lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;master:10020&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;master:19888&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>

<p>再是yarn-site.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim yarn-site.xml</span><br></pre></td></tr></table></figure>

<p>使用下面的内容替换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line">  you may not use this file except in compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to in writing, software</span><br><span class="line">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License for the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Site specific YARN configuration properties --&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;yarn.resourcemanager.webapp.address&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;master:8088&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;master&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>

<p>修改hadoop环境变量，在hadoop安装目录下，找到hadoop-env.sh文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim hadoop-env.sh</span><br></pre></td></tr></table></figure>

<p>在最后添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_291</span><br><span class="line">export HDFS_NAMENODE_USER=root</span><br><span class="line">export HDFS_DATANODE_USER=root</span><br><span class="line">export HDFS_SECONDARYNAMENODE_USER=root</span><br><span class="line">export YARN_RESOURCEMANAGER_USER=root</span><br><span class="line">export YARN_NODEMANAGER_USER=root</span><br></pre></td></tr></table></figure>

<p>编辑安装目录下的workers文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim workers</span><br></pre></td></tr></table></figure>

<p>内容改为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">master</span><br><span class="line">slave1</span><br><span class="line">slave2</span><br></pre></td></tr></table></figure>

<h3 id="刷新及hdfs初始化"><a href="#刷新及hdfs初始化" class="headerlink" title="刷新及hdfs初始化"></a>刷新及hdfs初始化<a href="#刷新及hdfs初始化" class="header-anchor">#</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">chown -R root:root /usr/local/hadoop/</span><br></pre></td></tr></table></figure>

<h2 id="安装ssh"><a href="#安装SSH" class="headerlink" title="安装SSH"></a>安装SSH<a href="#安装ssh" class="header-anchor">#</a></h2><p>hadoop的环境必须满足ssh免密登陆，先安装ssh</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install net-tools</span><br><span class="line">apt-get install ssh</span><br></pre></td></tr></table></figure>

<p>创建sshd目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p ~/var/run/sshd</span><br></pre></td></tr></table></figure>

<p>生成访问密钥</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~/</span><br><span class="line">ssh-keygen -t rsa -P &#x27;&#x27; -f ~/.ssh/id_rsa</span><br><span class="line">cd .ssh</span><br><span class="line">cat id_rsa.pub &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure>

<p>这一步骤提示安装路径与设置密码时全布直接按回车即可设置成免密。</p>
<h2 id="修改ssh配置"><a href="#修改SSH配置" class="headerlink" title="修改SSH配置"></a>修改SSH配置<a href="#修改ssh配置" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/ssh/ssh_config</span><br></pre></td></tr></table></figure>

<p>添加,将下面这句话直接添加即可，也可以在文件中找到被注释的这句话去修改。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">StrictHostKeyChecking no #将ask改为no</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>

<p>在末尾添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#禁用密码验证</span><br><span class="line">PasswordAuthentication no</span><br><span class="line">#启用密钥验证</span><br><span class="line">RSAAuthentication yes</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line">AuthorizedKeysFile .ssh/authorized_keys</span><br></pre></td></tr></table></figure>

<p>最后使用下面语句测试是否免密登陆，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh localhost</span><br></pre></td></tr></table></figure>

<p>当出现报错时，考虑输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/init.d/ssh restart</span><br></pre></td></tr></table></figure>

<p>用户组问题，chown -R  root:root .ssh</p>
<p>权限问题 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod g-w /home/your_user # 或　chmod 0755 /home/your_user</span><br><span class="line"> </span><br><span class="line">chmod 700 /home/your_user/.ssh</span><br><span class="line"> </span><br><span class="line">chmod 600 /home/your_user/.ssh/authorized_keys</span><br><span class="line">chmod 600 .ssh/ida_*</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>将hadoop文件夹利用scp传输</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scp -r /usr/local/hadoop/ slave1:/usr/local/</span><br><span class="line">scp -r /usr/local/hadoop/ slave2:/usr/local/</span><br></pre></td></tr></table></figure>



<p>在master机器上初始化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hdfs namenode -format #否则web端看不到</span><br></pre></td></tr></table></figure>

<h1 id="zookeeper安装配置"><a href="#Zookeeper安装配置" class="headerlink" title="Zookeeper安装配置"></a>Zookeeper安装配置<a href="#zookeeper安装配置" class="header-anchor">#</a></h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/zookeeper-3.6.3/apache-zookeeper-3.6.3-bin.tar.gz</span><br><span class="line">#下载完成后解压至/usr/local目录下</span><br><span class="line">tar -zxvf apache-zookeeper-3.6.1-bin.tar.gz -C /usr/local/</span><br><span class="line">cd /usr/local</span><br><span class="line"># 重命名zookeeper</span><br><span class="line">mv apache-zookeeper-3.6.1-bin zookeeper</span><br></pre></td></tr></table></figure>

<p>设置环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure>

<p>添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export ZOOKEEPER_HOME=/usr/local/zookeeper</span><br><span class="line">export PATH=$PATH:$ZOOKEEPER_HOME/bin</span><br></pre></td></tr></table></figure>

<p>分发至其他机器并执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure>

<p>配置zookeeper</p>
<p>进入conf目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local/zookeeper/conf</span><br></pre></td></tr></table></figure>

<p>将zoo_sample.cfg复制一份并命名为zoo.cfg</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure>

<p>对zoo.cfg做如下修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dataDir=/usr/local/zookeeper/data</span><br><span class="line">server.1=master:2888:3888</span><br><span class="line">server.2=slave1:2888:3888</span><br><span class="line">server.3=slave2:2888:3888</span><br></pre></td></tr></table></figure>



<p>分发至其他机器</p>
<p>创建data目录并新建一个myid 的文件，在每个机器中，文件内容对应server.后面的数字，master机器即为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /usr/local/zookeeper/data/myid</span><br><span class="line"></span><br><span class="line">插入1</span><br></pre></td></tr></table></figure>

<p>至此还只是集群搭建，但不是高可用！</p>
<h1 id="spark-安装配置"><a href="#Spark-安装配置" class="headerlink" title="Spark 安装配置"></a>Spark 安装配置<a href="#spark-安装配置" class="header-anchor">#</a></h1><h2 id="spark"><a href="#spark" class="headerlink" title="spark"></a>spark<a href="#spark" class="header-anchor">#</a></h2><p>解压spark文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -xvf spark-3.1.2-bin-hadoop3.2.tgz -C /usr/local</span><br><span class="line"># 然后重命名</span><br><span class="line">cd /usr/local</span><br><span class="line">mv spark-3.1.2-bin-hadoop3.2 spark</span><br></pre></td></tr></table></figure>

<p>环境配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure>

<p>更改配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local/spark/conf</span><br><span class="line">vi spark-env.sh</span><br></pre></td></tr></table></figure>

<p>写入以下文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_291</span><br><span class="line">export SCALA_HOME=/usr/share/scala</span><br><span class="line">export HADOOP_HOME=/usr/local/hadoop</span><br><span class="line">export HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop</span><br><span class="line">export SPARK_MASTER_HOST=master</span><br><span class="line">export SPARK_LOCAL_DIRS=/usr/local/spark</span><br></pre></td></tr></table></figure>

<p>再同一目录下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim workers</span><br></pre></td></tr></table></figure>

<p>写入以下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">master</span><br><span class="line">slave1</span><br><span class="line">slave2</span><br></pre></td></tr></table></figure>

<p>将/usr/local/spark/sbin目录下start-all.sh 重命名为start-spark-all.sh, stop-all.sh 重命名为stop-spark-all.sh</p>
<h2 id="scala-安装配置"><a href="#scala-安装配置" class="headerlink" title="scala 安装配置"></a>scala 安装配置<a href="#scala-安装配置" class="header-anchor">#</a></h2><p>只需在~/.bashrc</p>
<p>添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export SCALA_HOME=/usr/local/scala</span><br><span class="line">export PATH=$PATH:$SCALA_HOME/bin</span><br></pre></td></tr></table></figure>

<h1 id="hbase-安装配置"><a href="#Hbase-安装配置" class="headerlink" title="Hbase 安装配置"></a>Hbase 安装配置<a href="#hbase-安装配置" class="header-anchor">#</a></h1><p>解压下载文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -xvf hbase-2.3.5-bin.tar.gz -C /usr/local/</span><br><span class="line">#重命名</span><br><span class="line">cd /usr/local</span><br><span class="line"> mv hbase-2.3.5/ hbase</span><br><span class="line">export HBASE_DISABLE_HADOOP_CLASSPATH_LOOKUP=&quot;true&quot;</span><br><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_291</span><br><span class="line">export HBASE_MANAGES_ZK=false</span><br></pre></td></tr></table></figure>

<p>修改~/.bashrc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export HBASE_HOME=/usr/local/hbase</span><br><span class="line">export PATH=$PATH:$HBASE_HOME/bin</span><br></pre></td></tr></table></figure>

<p>修改配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local/hbase/conf</span><br><span class="line">vi hbase-env.sh</span><br></pre></td></tr></table></figure>

<p>添加以下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export HBASE_DISABLE_HADOOP_CLASSPATH_LOOKUP=&quot;true&quot;</span><br><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_291</span><br><span class="line">export HBASE_MANAGES_ZK=false</span><br></pre></td></tr></table></figure>

<p>修改hbase-site.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">                       &lt;name&gt;hbase.rootdir&lt;/name&gt;</span><br><span class="line">                                       &lt;value&gt;hdfs://master:9000/hbase&lt;/value&gt;</span><br><span class="line">                                       &lt;description&gt;nothing&lt;/description&gt;                              &lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;hbase.cluster.distributed&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;true&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">                &lt;name&gt;hbase.zookeeper.quorum&lt;/name&gt;</span><br><span class="line">                                &lt;value&gt;master:2181,slave1:2181,slave2:2181&lt;/value&gt;</span><br><span class="line">                                                        &lt;description&gt;nothing&lt;/description&gt;</span><br><span class="line">                                                                    &lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;hbase.tmp.dir&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;./tmp&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;hbase.unsafe.stream.capability.enforce&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;false&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>



<p>修改regionservers</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">master</span><br><span class="line">slave1</span><br><span class="line">slave2</span><br></pre></td></tr></table></figure>

<h1 id="hive安装配置"><a href="#Hive安装配置" class="headerlink" title="Hive安装配置"></a>Hive安装配置<a href="#hive安装配置" class="header-anchor">#</a></h1><h2 id="mysql安装"><a href="#mysql安装" class="headerlink" title="mysql安装"></a>mysql安装<a href="#mysql安装" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -xvf mysql-server_5.7.31-1ubuntu18.04_amd64.deb-bundle.tar</span><br><span class="line">apt-get install ./libmysql*</span><br><span class="line">apt-get install libtinfo5</span><br><span class="line">apt-get install ./mysql-community-client_5.7.31-1ubuntu18.04_amd64.deb</span><br><span class="line">apt-get install ./mysql-client_5.7.31-1ubuntu18.04_amd64.deb</span><br><span class="line">apt-get install ./mysql-community-server_5.7.31-1ubuntu18.04_amd64.deb</span><br><span class="line">###第6行步骤会有两次让输入密码</span><br><span class="line">apt-get install ./mysql-server_5.7.31-1ubuntu18.04_amd64.deb</span><br><span class="line">###安装结束后，修改权限</span><br><span class="line">cd /var/run</span><br><span class="line">chmod -R 777 mysqld</span><br><span class="line">cd /var/lib</span><br><span class="line">chmod -R 777 mysql</span><br><span class="line">service mysql start</span><br><span class="line">mysql -uroot -p #输入密码</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">use mysql;</span><br><span class="line">grant all privileges on *.* to &#x27;hive&#x27;@&#x27;%&#x27; identified BY &#x27;yourpassword&#x27; with grant option;</span><br><span class="line">flush privileges;</span><br><span class="line">exit;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">service mysql restart</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="hive-安装"><a href="#hive-安装" class="headerlink" title="hive 安装"></a>hive 安装<a href="#hive-安装" class="header-anchor">#</a></h2><p>解压</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -xzvf apache-hive-3.1.2-bin.tar.gz -C /usr/local/</span><br><span class="line">#重命名</span><br><span class="line">cd /usr/local</span><br><span class="line">mv apache-hive-3.1.2-bin hive</span><br></pre></td></tr></table></figure>

<p>修改环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br><span class="line">#添加以下内容</span><br><span class="line">export HIVE_HOME=/usr/local/hive</span><br><span class="line">export PATH=$PATH:$HIVE_HOME/bin</span><br></pre></td></tr></table></figure>

<p>创建warehouse 文件夹</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local/hive</span><br><span class="line">mkdir warehouse</span><br></pre></td></tr></table></figure>

<p>配置文件修改</p>
<p>hive-env.sh</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HADOOP_HOME=/usr/local/hadoop</span><br><span class="line">export HIVE_CONF_DIR=/usr/local/hive/conf</span><br><span class="line">export HIVE_AUX_JARS_PATH=/usr/local/hive/lib</span><br></pre></td></tr></table></figure>

<p>hive-site.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;</span><br><span class="line">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">		&lt;property&gt;</span><br><span class="line">					&lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt;</span><br><span class="line">	 &lt;value&gt;jdbc:mysql://master:3306/hive?createDatabaseIfNotExist=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;useSSL=false&lt;/value&gt;</span><br><span class="line">		 	&lt;/property&gt;</span><br><span class="line">					&lt;property&gt;</span><br><span class="line">	&lt;name&gt;javax.jdo.option.ConnectionDriverName&lt;/name&gt;</span><br><span class="line">				&lt;value&gt;com.mysql.jdbc.Driver&lt;/value&gt;</span><br><span class="line">						&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">				&lt;name&gt;javax.jdo.option.ConnectionUserName&lt;/name&gt;</span><br><span class="line">&lt;value&gt;root&lt;/value&gt;</span><br><span class="line">		&lt;/property&gt;</span><br><span class="line">				&lt;property&gt;</span><br><span class="line">&lt;name&gt;javax.jdo.option.ConnectionPassword&lt;/name&gt;</span><br><span class="line">&lt;value&gt;asdfqwer&lt;/value&gt;</span><br><span class="line">				&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">			&lt;name&gt;datanucleus.readOnlyDatastore&lt;/name&gt;</span><br><span class="line">						&lt;value&gt;false&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">			&lt;property&gt;</span><br><span class="line">						&lt;name&gt;datanucleus.fixedDatastore&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;false&lt;/value&gt;</span><br><span class="line">				&lt;/property&gt;</span><br><span class="line">						&lt;property&gt;</span><br><span class="line">		&lt;name&gt;datanucleus.autoCreateSchema&lt;/name&gt;</span><br><span class="line">					&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">		&lt;property&gt;</span><br><span class="line">					&lt;name&gt;datanucleus.schema.autoCreateAll&lt;/name&gt;</span><br><span class="line">	&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">			&lt;/property&gt;</span><br><span class="line">					&lt;property&gt;</span><br><span class="line">	&lt;name&gt;datanucleus.autoCreateTables&lt;/name&gt;</span><br><span class="line">				&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">						&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">				&lt;name&gt;datanucleus.autoCreateColumns&lt;/name&gt;</span><br><span class="line">&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">		&lt;/property&gt;</span><br><span class="line">				&lt;property&gt;</span><br><span class="line">&lt;name&gt;hive.metastore.local&lt;/name&gt;</span><br><span class="line">			&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">					&lt;/property&gt;</span><br><span class="line">&lt;!-- 显示表的列名 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">			&lt;name&gt;hive.cli.print.header&lt;/name&gt;</span><br><span class="line">						&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">			&lt;!-- 显示数据库名称 --&gt;</span><br><span class="line">			&lt;property&gt;</span><br><span class="line">						&lt;name&gt;hive.cli.print.current.db&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">				&lt;/property&gt;</span><br><span class="line">			&lt;/configuration&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>客户端hive-site.xml<a href="#refer-anchor-1"><sup>1</sup></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                  &lt;name&gt;hive.metastore.warehouse.dir&lt;/name&gt;</span><br><span class="line">                  &lt;value&gt;/usr/local/hive/warehouse&lt;/value&gt;</span><br><span class="line">                    &lt;/property&gt;</span><br><span class="line">                    &lt;property&gt;</span><br><span class="line">                              &lt;name&gt;hive.metastore.local&lt;/name&gt;</span><br><span class="line">                                        &lt;value&gt;false&lt;/value&gt;</span><br><span class="line">                                &lt;/property&gt;</span><br><span class="line">                                &lt;property&gt;</span><br><span class="line">                                          &lt;name&gt;hive.metastore.uris&lt;/name&gt;</span><br><span class="line">                                                    &lt;value&gt;thrift://master:9083&lt;/value&gt;</span><br><span class="line">                                            &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line">~           </span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#服务器端</span><br><span class="line">schematool -dbType mysql -initSchema</span><br><span class="line">hive --service metastore</span><br><span class="line">客户端</span><br><span class="line">hive</span><br><span class="line">show databases;</span><br></pre></td></tr></table></figure>



<p>第一次运行报错：</p>
<p><img src="image-20210719140401396.png" alt="image-20210719140401396"></p>
<h1 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用<a href="#高可用" class="header-anchor">#</a></h1><p>core-site.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;file:/usr/local/hadoop/tmp&lt;/value&gt;</span><br><span class="line">		&lt;description&gt;Abase for other temporary directories.&lt;/description&gt;  		&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;hdfs://hdcluster&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;ha.zookeeper.quorum&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;master:2181,slave1:2181,slave2:2181&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>





<p>hdfs-site.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line">  you may not use this file except in compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to in writing, software</span><br><span class="line">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License for the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Put site-specific property overrides in this file. --&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.nameservices&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;hdcluster&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;!-- myNameService1下面有两个NameNode，分别是nn1，nn2 --&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.ha.namenodes.hdcluster&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;nn1,nn2&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;!-- nn1的RPC通信地址 --&gt;</span><br><span class="line">	 &lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.namenode.rpc-address.hdcluster.nn1&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;master:9000&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;!-- nn1的http通信地址 --&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.namenode.http-address.hdcluster.nn1&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;master:50070&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;!-- nn2的RPC通信地址 --&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.namenode.rpc-address.hdcluster.nn2&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;slave1:9000&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;!-- nn2的http通信地址 --&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.namenode.http-address.hdcluster.nn2&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;slave1:50070&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;!-- 指定NameNode的元数据在JournalNode上的存放位置 --&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.namenode.shared.edits.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;qjournal://master:8485;slave1:8485;slave2:8485/hdcluster&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;!-- 指定JournalNode在本地磁盘存放数据的位置 --&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.journalnode.edits.dir&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;/usr/local/hadoop/journalData&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;!-- 开启NameNode失败自动切换 --&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.ha.automatic-failover.enabled&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;!-- 配置失败自动切换实现方式 --&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.client.failover.proxy.provider.hdcluster&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;!-- 配置隔离机制方法，Failover后防止停掉的Namenode启动，造成两个服务,多个机制用换行分割，即每个机制暂用一行--&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.ha.fencing.methods&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;sshfence</span><br><span class="line">				shell(/bin/true)</span><br><span class="line">		&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;!-- 使用sshfence隔离机制时需要ssh免登陆，注意换成自己的用户名 --&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.ha.fencing.ssh.private-key-files&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;/root/.ssh/id_rsa&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.ha.fencing.ssh.connect-timeout&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;30000&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.permissions&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;false&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;2&lt;/value&gt;</span><br><span class="line">		&lt;final&gt;true&lt;/final&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;/usr/local/hadoop/namenode&lt;/value&gt;</span><br><span class="line">		&lt;final&gt;true&lt;/final&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.datanode.name.dir&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;/usr/local/hadoop/datanode&lt;/value&gt;</span><br><span class="line">		&lt;final&gt;true&lt;/final&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;master:50090&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>hadoop-env.sh</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_291</span><br><span class="line">export HDFS_NAMENODE_USER=root</span><br><span class="line">export HDFS_DATANODE_USER=root</span><br><span class="line">export HDFS_SECONDARYNAMENODE_USER=root</span><br><span class="line">export YARN_RESOURCEMANAGER_USER=root</span><br><span class="line">export YARN_NODEMANAGER_USER=root</span><br><span class="line">export HDFS_JOURNALNODE_USER=root</span><br><span class="line">export HDFS_ZKFC_USER=root</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>mapred-site.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;master:10020&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;master:19888&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>yarn-site.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;yarn.resourcemanager.ha.enabled&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;yarn.resourcemanager.cluster-id&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;yrc&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;yarn.resourcemanager.ha.rm-ids&lt;/name&gt;</span><br><span class="line"> 		&lt;value&gt;rm1,rm2&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;yarn.resourcemanager.hostname.rm1&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;master&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;yarn.resourcemanager.hostname.rm2&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;slave1&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;yarn.resourcemanager.webapp.address.rm1&lt;/name&gt;</span><br><span class="line">	    &lt;value&gt;master:8088&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;yarn.resourcemanager.webapp.address.rm2&lt;/name&gt;		</span><br><span class="line">		&lt;value&gt;slave1:8088&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;																	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;yarn.resourcemanager.zk-address&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;master:2181,slave1:2181&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;yarn.application.classpath&lt;/name&gt;</span><br><span class="line">					&lt;value&gt;/usr/local/hadoop/etc/hadoop:/usr/local/hadoop/share/hadoop/common/lib/*:/usr/local/hadoop/share/hadoop/common/*:/usr/local/hadoop/share/hadoop/hdfs:/usr/local/hadoop/share/hadoop/hdfs/lib/*:/usr/local/hadoop/share/hadoop/hdfs/*:/usr/local/hadoop/share/hadoop/mapreduce/lib/*:/usr/local/hadoop/share/hadoop/mapreduce/*:/usr/local/hadoop/share/hadoop/yarn:/usr/local/hadoop/share/hadoop/yarn/lib/*:/usr/local/hadoop/share/hadoop/yarn/*&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p><strong>运行错误</strong>：</p>
<p><strong>ERROR: Cannot set priority of datanode process</strong></p>
<p><strong>解决方案</strong></p>
<p>​    <strong>chown -R root:root ##权限问题</strong></p>
<p>​    <strong>也有可能是配置文件不一致</strong></p>
<p>如果初始化过，且journaldata可能初始化过，再次初始化namenode,则需要先启动journalnode</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">错误提示：</span><br><span class="line">Unable to check if JNs are ready for formatting. </span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hadoop-daemon.sh start journalnode-&gt;hdfs --daemon start journalnode</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;2&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.nameservices&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;hdcluster&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.ha.namenodes.hdcluster&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;nn1,nn2&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.namenode.rpc-address.hdcluster.nn1&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;master:8020&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.namenode.rpc-address.hdcluster.nn2&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;slave1:8020&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.namenode.http-address.hdcluster.nn1&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;master:9870&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.namenode.http-address.hdcluster.nn2&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;slave1:9870&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.namenode.shared.edits.dir&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;qjournal://master:8485;slave1:8485;slave2:8485/hdcluster&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.client.failover.proxy.provider.hdcluster&lt;/name&gt;</span><br><span class="line">	    &lt;value&gt;org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.ha.fencing.methods&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;sshfence&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.ha.fencing.ssh.private-key-files&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;/root/.ssh/id_rsa&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.journalnode.edits.dir&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;/usr/local/hadoop/journalData&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.ha.automatic-failover.enabled.hdcluster&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;/usr/local/hadoop/namenode&lt;/value&gt;</span><br><span class="line">        &lt;final&gt;true&lt;/final&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.datanode.name.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;/usr/local/hadoop/datanode&lt;/value&gt;</span><br><span class="line">        &lt;final&gt;true&lt;/final&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>



<h1 id="reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference<a href="#reference" class="header-anchor">#</a></h1><!--
&emsp;&emsp;<font face="黑体" size=10>16. 我是黑体字</font>  <div id="refer-anchor-1"></div>- [1] [hive搭建](https://www.jianshu.com/p/fd73c53668f5)
-->

<div style="display:none">这是一段注释</div>

<ol>
<li><p> <a href="https://blog.csdn.net/weixin_43993764/article/details/113405025"> Docker配置Hadoop集群并使用WordCount测试_出大问题-CSDN博客</a></p>
</li>
<li><p> <a href="https://blog.csdn.net/weixin_43311978/article/details/106099052">Hadoop3.2.1 HA 高可用集群的搭建（基于Zookeeper，NameNode高可用+Yarn高可用）_Captain.Y.的博客-CSDN博客</a></p>
</li>
<li><p> <a href="https://blog.csdn.net/weixin_43311978/article/details/105400694?spm=1001.2014.3001.5501"> CentOS7使用Docker安装hadoop集群_Captain.Y.的博客-CSDN博客</a></p>
</li>
<li><p> <a href="https://blog.csdn.net/u013015629/article/details/70045809">Ubuntu下”sshd:unrecognized service”_子建莫敌-CSDN博客</a></p>
</li>
<li><p> <a href="https://blog.csdn.net/weixin_43487121/article/details/103589532"> Hadoop3.1.3+Zookeeper3.5.6+hbase2.2.2+hive3.1.2安装以及测试_井鱼的博客-CSDN博客</a></p>
</li>
<li><p> <a href="https://blog.csdn.net/piaoxi6587/article/details/103569376"> Hadoop3.2 +Spark3.0全分布式安装_piaoxi6587的博客-CSDN博客</a></p>
</li>
<li><p> <a href="https://blog.csdn.net/shanhai3000/article/details/104865652"> 使用Paralles Desktop，在虚拟机环境中搭建hadoop集群（2主3从5节点）_shanhai3000的博客-CSDN博客</a></p>
</li>
<li><p> <a href="https://blog.csdn.net/shanhai3000/article/details/107682499">安装并配置HBase集群（5个节点）_shanhai3000的博客-CSDN博客</a></p>
</li>
<li><p> <a href="https://www.zabbx.cn/archives/docker%E4%BD%BF%E7%94%A8dockerfile%E6%9E%84%E5%BB%BAmysql%E9%95%9C%E5%83%8F%E5%8D%81%E4%BA%94">Docker 使用Dockerfile构建MySQL镜像（十五） - 勤奋的冬枣 (zabbx.cn)</a></p>
</li>
<li><p> <a href="https://blog.csdn.net/as480133937/article/details/100138838">(22条消息) Hexo-Next 主题博客个性化配置超详细，超全面(两万字)_Z小旋-CSDN博客_hexo next主题配置</a></p>
</li>
<li><p> <a href="https://www.jianshu.com/p/30d45fa044a2">3.Spark环境搭建-Spark完全分布式集群搭建 - 简书 (jianshu.com)</a></p>
</li>
<li><p> <a href="https://www.cnblogs.com/yinzhengjie2020/p/12508145.html">Apache Hadoop HDFS高可用部署实战案例 - JasonYin2020 - 博客园 (cnblogs.com)</a></p>
</li>
<li><p> <a href="https://www.cnblogs.com/rmxd/p/11316062.html#_label4_0">HBase的完全分布式搭建 - coder、 - 博客园 (cnblogs.com)</a></p>
</li>
<li><p> <a href="https://www.cnblogs.com/yinzhengjie2020/p/12239031.html">HBase完全分布式集群搭建 - JasonYin2020 - 博客园 (cnblogs.com)</a></p>
</li>
<li><p> <a href="https://blog.csdn.net/agent_x/article/details/78660341"> hive安装及mysql配置_炼剑-CSDN博客_hive配置mysql</a></p>
</li>
<li><p> <a href="https://blog.csdn.net/GentleCP/article/details/87936263"> Mysql 8.0.13 开启远程访问权限（ERROR 1064 (42000): You have an error in your SQL syntax; check the manual th）_GentleCP的博客-CSDN博客</a></p>
</li>
<li><p> <a href="https://www.cnblogs.com/tijun/p/7562282.html">运行Spark-shell，解决Unable to load native-hadoop library for your platform - 提君 - 博客园 (cnblogs.com)</a></p>
</li>
<li><p> <a href="https://zhuanlan.zhihu.com/p/89472385">ubuntu下hadoop、spark、hive、azkaban 集群搭建 - 知乎 (zhihu.com)</a></p>
</li>
<li><p> <a href="https://www.cnblogs.com/xuwujing/p/">我的随笔 - 虚无境 - 博客园 (cnblogs.com)-大数据学习系列 </a></p>
</li>
<li><p> <a href="https://cloud.tencent.com/developer/article/1624245">Spark on Hive &amp; Hive on Spark，傻傻分不清楚 - 云+社区 - 腾讯云 (tencent.com)</a></p>
</li>
<li><p> <a href="https://blog.csdn.net/Dante_003/article/details/72867493">hive on spark安装(hive2.3 spark2.1)_敲码的汉子-CSDN博客_hive on spark 安装</a></p>
</li>
<li><p> <a href="https://www.cnblogs.com/zlslch/category/965666.html">Hadoop Hive集群搭建（含CentOS和Ubuntu） - 随笔分类 - 大数据和AI躺过的坑 - 博客园 (cnblogs.com)</a></p>
</li>
<li><p><a href="https://blog.csdn.net/u011809553/article/details/80937624">(22条消息) ssh公钥都追加到authorized_keys文件了，但是还是无法免秘钥登陆_孑然一身踽踽而行-CSDN博客</a></p>
</li>
<li><p><a href="https://www.jianshu.com/p/fd73c53668f5">Hive学习笔记一：远程服务器模式搭建 - 简书 (jianshu.com)</a></p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>record_everyday</title>
    <url>/article/record_everyday/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="d03d50acb2a21eaaa17f1cb6ed8f8c560246c05b9ee748454814f2c33d33381b"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>加密</tag>
      </tags>
  </entry>
</search>
