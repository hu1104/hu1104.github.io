<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CF</title>
    <url>/article/CF/</url>
    <content><![CDATA[<!-- @import "[TOC]" {cmd="toc" depthFrom=1 depthTo=6 orderedList=false} -->

<!-- code_chunk_output -->

<ul>
<li><a href="#1-%E5%8D%8F%E8%B0%83%E8%BF%87%E6%BB%A4%E7%AE%97%E6%B3%95">1. 协调过滤算法</a></li>
<li><a href="#2-%E7%9B%B8%E4%BC%BC%E6%80%A7%E5%BA%A6%E9%87%8F%E6%96%B9%E6%B3%95">2. 相似性度量方法</a></li>
<li><a href="#3-%E5%9F%BA%E4%BA%8E%E7%94%A8%E6%88%B7%E7%9A%84%E5%8D%8F%E5%90%8C%E8%BF%87%E6%BB%A4">3. 基于用户的协同过滤</a></li>
<li><a href="#4-%E7%BC%96%E7%A8%8B%E5%AE%9E%E7%8E%B0">4. 编程实现</a></li>
<li><a href="#5-usercf-%E4%BC%98%E7%BC%BA%E7%82%B9">5. UserCF 优缺点</a></li>
<li><a href="#6-%E7%AE%97%E6%B3%95%E8%AF%84%E4%BC%B0">6. 算法评估</a></li>
<li><a href="#7%E5%8D%8F%E5%90%8C%E8%BF%87%E6%BB%A4%E7%AE%97%E6%B3%95%E7%9A%84%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90">7.协同过滤算法的问题分析</a></li>
</ul>
<!-- /code_chunk_output -->

<h3 id="1-协调过滤算法"><a href="#1-协调过滤算法" class="headerlink" title="1. 协调过滤算法"></a>1. 协调过滤算法<a href="#1-协调过滤算法" class="header-anchor">#</a></h3><p>所谓协同过滤， 基本思想是根据用户之前的喜好以及其他兴趣相近的用户的选择来给用户推荐物品(基于对用户历史行为数据的挖掘发现用户的喜好偏向， 并预测用户可能喜好的产品进行推荐)，一般是仅仅基于用户的行为数据（评价、购买、下载等）, 而不依赖于项的任何附加信息（物品自身特征）或者用户的任何附加信息（年龄， 性别等）。<br><br><br>目前应用比较广泛的协同过滤算法是基于邻域的方法， 而这种方法主要有下面两种算法：</p>
<ul>
<li>基于用户的协同过滤算法(UserCF): 给用户推荐和他兴趣相似的其他用户喜欢的产品</li>
<li>基于物品的协同过滤算法(ItemCF): 给用户推荐和他之前喜欢的物品相似的物品</li>
</ul>
<p>不管是UserCF还是ItemCF算法， 非常重要的步骤之一就是计算用户和用户或者物品和物品之间的相似度， 所以下面先整理常用的相似性度量方法， 然后再对每个算法的具体细节进行展开。</p>
<span id="more"></span>
<h3 id="2-相似性度量方法"><a href="#2-相似性度量方法" class="headerlink" title="2. 相似性度量方法"></a>2. 相似性度量方法<a href="#2-相似性度量方法" class="header-anchor">#</a></h3><ol>
<li>jaccard相似系数<br>这个是衡量两个集合的相似度一种指标。两个用户$u$和$v$交互商品交集的数量占这两个用户交互商品并集的数量的比例，称为两个集合的杰卡德相似系数，用符号$sim_{uv}$表示，其中$N(u),N(v)$分别表示用户$u$和用户$v$交互商品的集合。 $$ sim_{uv}=\frac{|N(u) \cap N(v)|}{\sqrt{|N(u)| \cup|N(v)|}} $$ 由于杰卡德相似系数一般无法反映具体用户的评分喜好信息， 所以常用来评估用户是否会对某商品进行打分， 而不是预估用户会对某商品打多少分。</li>
<li>余弦相似度<br>余弦相似度衡量了两个向量的夹角，夹角越小越相似。首先从集合的角度描述余弦相似度，相比于Jaccard公式来说就是分母有差异，不是两个用户交互商品的并集的数量，而是两个用户分别交互的商品数量的乘积，公式如下： $$ sim_{uv}=\frac{|N(u) \cap N(v)|}{\sqrt{|N(u)|\cdot|N(v)|}} $$ 从向量的角度进行描述，令矩阵$A$为用户-商品交互矩阵(因为是TopN推荐并不需要用户对物品的评分，只需要知道用户对商品是否有交互就行)，即矩阵的每一行表示一个用户对所有商品的交互情况，有交互的商品值为1没有交互的商品值为0，矩阵的列表示所有商品。若用户和商品数量分别为$m,n$的话，交互矩阵$A$就是一个$m$行$n$列的矩阵。此时用户的相似度可以表示为(其中$u\cdot v$指的是向量点积)： $$ sim_{uv} = cos(u,v) =\frac{u\cdot v}{|u|\cdot |v|} $$ 上述用户-商品交互矩阵在现实情况下是非常的稀疏了，为了避免存储这么大的稀疏矩阵，在计算用户相似度的时候一般会采用集合的方式进行计算。理论上向量之间的相似度计算公式都可以用来计算用户之间的相似度，但是会根据实际的情况选择不同的用户相似度度量方法。</li>
<li>皮尔逊相关系数<br>皮尔逊相关系数的公式与余弦相似度的计算公式非常的类似，首先对于上述的余弦相似度的计算公式写成求和的形式,其中$r_{ui},r_{vi}$分别表示用户$u$和用户$v$对商品$i$是否有交互(或者具体的评分值)： $$ sim_{uv} = \frac{\sum_i r_{ui}*r_{vi}}{\sqrt{\sum_i r_{ui}^2}\sqrt{\sum_i r_{vi}^2}} $$ 如下是皮尔逊相关系数计算公式，其中$r_{ui},r_{vi}$分别表示用户$u$和用户$v$对商品$i$是否有交互(或者具体的评分值)，$\bar r_u, \bar r_v$分别表示用户$u$和用户$v$交互的所有商品交互数量或者具体评分的平均值。 $$ sim(u,v)=\frac{\sum_{i\in I}(r_{ui}-\bar r_u)(r_{vi}-\bar r_v)}{\sqrt{\sum_{i\in I }(r_{ui}-\bar r_u)^2}\sqrt{\sum_{i\in I }(r_{vi}-\bar r_v)^2}} $$ 所以相比余弦相似度，皮尔逊相关系数通过使用用户的平均分对各独立评分进行修正，减小了用户评分偏置的影响。</li>
</ol>
<h3 id="3-基于用户的协同过滤"><a href="#3-基于用户的协同过滤" class="headerlink" title="3. 基于用户的协同过滤"></a>3. 基于用户的协同过滤<a href="#3-基于用户的协同过滤" class="header-anchor">#</a></h3><br>
基于用户的协同过滤（以下用UserCF表示），思想其实比较简单，当一个用户A需要个性化推荐的时候， 我们可以先找到和他有相似兴趣的其他用户， 然后把那些用户喜欢的， 而用户A没有听说过的物品推荐给A。

<p><img src="./CF/userCF.png" alt="userCF"></p>
<p>UserCF算法主要两个步骤：</p>
<ol>
<li>找到和目标用户兴趣相似的集合</li>
<li>找到这个集合中的用户喜欢的，且目标用户没有听说过的产品推荐给目标用户<br><img src="./CF/%E7%A4%BA%E4%BE%8B.png" alt="示例"></li>
</ol>
<p>应用UserCF算法的两个步骤：</p>
<ol>
<li>首先根据前面的这些打分情况(或者说已有的用户向量）计算一下Alice和用户1， 2， 3， 4的相似程度， 找出与Alice最相似的n个用户</li>
<li>根据这n个用户对物品5的评分情况和与Alice的相似程度会猜测出Alice对物品5的评分， 如果评分比较高的话， 就把物品5推荐给用户Alice， 否则不推荐。</li>
</ol>
<p>根据上面的几种方法， 我们可以计算出向量之间的相似程度， 也就是可以计算出Alice和其他用户的相近程度， 这时候我们就可以选出与Alice最相近的前n个用户， 基于他们对物品5的评价猜测出Alice的打分值， 那么是怎么计算的呢？</p>
<p>这里常用的方式之一是利用用户相似度和相似用户的评价加权平均获得用户的评价预测， 用下面式子表示：</p>
<p>$$ R_{\mathrm{u}, \mathrm{p}}=\frac{\sum_{\mathrm{s} \in S}\left(w_{\mathrm{u}, \mathrm{s}} \cdot R_{\mathrm{s}, \mathrm{p}}\right)}{\sum_{\mathrm{s} \in S} w_{\mathrm{u}, \mathrm{s}}} $$ 这个式子里面， 权重$w_{u,s}$是用户$u$和用户$s$的相似度， $R_{s,p}$是用户$s$对物品$p$的评分。</p>
<p>还有一种方式如下， 这种方式考虑的更加全面， 依然是用户相似度作为权值， 但后面不单纯的是其他用户对物品的评分， 而是该物品的评分与此用户的所有评分的差值进行加权平均， 这时候考虑到了有的用户内心的评分标准不一的情况， 即有的用户喜欢打高分， 有的用户喜欢打低分的情况。</p>
<p>$$ P_{i, j}=\bar{R}{i}+\frac{\sum_{k=1}^{n}\left(S_{i, k}\left(R_{k, j}-\bar{R}<em>{k}\right)\right)}{\sum</em>{k=1}^{n} S_{j, k}} $$ 所以这一种计算方式更为推荐。</p>
<p>在获得用户$u$对不同物品的评价预测后， 最终的推荐列表根据预测评分进行排序得到。</p>
<h3 id="4-编程实现"><a href="#4-编程实现" class="headerlink" title="4. 编程实现"></a>4. 编程实现<a href="#4-编程实现" class="header-anchor">#</a></h3><p> 梳理一下上面的过程其实就是三步： 计算用户相似性矩阵、得到前n个相似用户、计算最终得分。</p>
<ol>
<li>首先， 先把数据表给建立起来</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 定义数据集， 也就是那个表格， 注意这里我们采用字典存放数据， 因为实际情况中数据是非常稀疏的， 很少有情况是现在这样</span><br><span class="line">def loadData():</span><br><span class="line">    items=&#123;&#x27;A&#x27;: &#123;1: 5, 2: 3, 3: 4, 4: 3, 5: 1&#125;,</span><br><span class="line">           &#x27;B&#x27;: &#123;1: 3, 2: 1, 3: 3, 4: 3, 5: 5&#125;,</span><br><span class="line">           &#x27;C&#x27;: &#123;1: 4, 2: 2, 3: 4, 4: 1, 5: 5&#125;,</span><br><span class="line">           &#x27;D&#x27;: &#123;1: 4, 2: 3, 3: 3, 4: 5, 5: 2&#125;,</span><br><span class="line">           &#x27;E&#x27;: &#123;2: 3, 3: 5, 4: 4, 5: 1&#125;</span><br><span class="line">          &#125;</span><br><span class="line">    users=&#123;1: &#123;&#x27;A&#x27;: 5, &#x27;B&#x27;: 3, &#x27;C&#x27;: 4, &#x27;D&#x27;: 4&#125;,</span><br><span class="line">           2: &#123;&#x27;A&#x27;: 3, &#x27;B&#x27;: 1, &#x27;C&#x27;: 2, &#x27;D&#x27;: 3, &#x27;E&#x27;: 3&#125;,</span><br><span class="line">           3: &#123;&#x27;A&#x27;: 4, &#x27;B&#x27;: 3, &#x27;C&#x27;: 4, &#x27;D&#x27;: 3, &#x27;E&#x27;: 5&#125;,</span><br><span class="line">           4: &#123;&#x27;A&#x27;: 3, &#x27;B&#x27;: 3, &#x27;C&#x27;: 1, &#x27;D&#x27;: 5, &#x27;E&#x27;: 4&#125;,</span><br><span class="line">           5: &#123;&#x27;A&#x27;: 1, &#x27;B&#x27;: 5, &#x27;C&#x27;: 5, &#x27;D&#x27;: 2, &#x27;E&#x27;: 1&#125;</span><br><span class="line">          &#125;</span><br><span class="line">    return items,users</span><br><span class="line"></span><br><span class="line">items, users = loadData()</span><br><span class="line">item_df = pd.DataFrame(items).T</span><br><span class="line">user_df = pd.DataFrame(users).T</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>计算用户相似性矩阵<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;计算用户相似性矩阵&quot;&quot;&quot;</span><br><span class="line">similarity_matrix = pd.DataFrame(np.zeros((len(users), len(users))), index=[1, 2, 3, 4, 5], columns=[1, 2, 3, 4, 5])</span><br><span class="line"></span><br><span class="line"># 遍历每条用户-物品评分数据</span><br><span class="line">for userID in users:</span><br><span class="line">    for otheruserId in users:</span><br><span class="line">        vec_user = []</span><br><span class="line">        vec_otheruser = []</span><br><span class="line">        if userID != otheruserId:</span><br><span class="line">            for itemId in items:   # 遍历物品-用户评分数据</span><br><span class="line">                itemRatings = items[itemId]        # 这也是个字典  每条数据为所有用户对当前物品的评分</span><br><span class="line">                if userID in itemRatings and otheruserId in itemRatings:  # 说明两个用户都对该物品评过分</span><br><span class="line">                    vec_user.append(itemRatings[userID])</span><br><span class="line">                    vec_otheruser.append(itemRatings[otheruserId])</span><br><span class="line">            # 这里可以获得相似性矩阵(共现矩阵)</span><br><span class="line">            similarity_matrix[userID][otheruserId] = np.corrcoef(np.array(vec_user), np.array(vec_otheruser))[0][1]</span><br><span class="line">            #similarity_matrix[userID][otheruserId] = cosine_similarity(np.array(vec_user), np.array(vec_otheruser))[0][1]</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>计算前n个相似的用户</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;计算前n个相似的用户&quot;&quot;&quot;</span><br><span class="line">n = 2</span><br><span class="line">similarity_users = similarity_matrix[1].sort_values(ascending=False)[:n].index.tolist()    # [2, 3]   也就是用户1和用户2</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="4">
<li>计算最终得分<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;计算最终得分&quot;&quot;&quot;</span><br><span class="line">base_score = np.mean(np.array([value for value in users[1].values()]))</span><br><span class="line">weighted_scores = 0.</span><br><span class="line">corr_values_sum = 0.</span><br><span class="line">for user in similarity_users:  # [2, 3]</span><br><span class="line">    corr_value = similarity_matrix[1][user]            # 两个用户之间的相似性</span><br><span class="line">    mean_user_score = np.mean(np.array([value for value in users[user].values()]))    # 每个用户的打分平均值</span><br><span class="line">    weighted_scores += corr_value * (users[user][&#x27;E&#x27;]-mean_user_score)      # 加权分数</span><br><span class="line">    corr_values_sum += corr_value</span><br><span class="line">final_scores = base_score + weighted_scores / corr_values_sum</span><br><span class="line">print(&#x27;用户Alice对物品5的打分: &#x27;, final_scores)</span><br><span class="line">user_df.loc[1][&#x27;E&#x27;] = final_scores</span><br><span class="line">user_df</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="5-usercf-优缺点"><a href="#5-UserCF-优缺点" class="headerlink" title="5. UserCF 优缺点"></a>5. UserCF 优缺点<a href="#5-usercf-优缺点" class="header-anchor">#</a></h3><p>两大问题：<br>    1. 数据稀疏性。 一个大型的电子商务推荐系统一般有非常多的物品，用户可能买的其中不到1%的物品，不同用户之间买的物品重叠性较低，导致算法无法找到一个用户的邻居，即偏好相似的用户。这导致UserCF不适用于那些正反馈获取较困难的应用场景(如酒店预订， 大件商品购买等低频应用)<br>    2. 算法扩展性。 基于用户的协同过滤需要维护用户相似度矩阵以便快速的找出Topn相似用户， 该矩阵的存储开销非常大，存储空间随着用户数量的增加而增加，不适合用户数据量大的情况使用。</p>
<h3 id="6-算法评估"><a href="#6-算法评估" class="headerlink" title="6. 算法评估"></a>6. 算法评估<a href="#6-算法评估" class="header-anchor">#</a></h3><ol>
<li>召回率<br>对用户u推荐N个物品记为$R(u)$, 令用户u在测试集上喜欢的物品集合为$T(u)$， 那么召回率定义为： $$ \operatorname{Recall}=\frac{\sum_{u}|R(u) \cap T(u)|}{\sum_{u}|T(u)|} $$ 这个意思就是说， 在用户真实购买或者看过的影片里面， 我模型真正预测出了多少， 这个考察的是模型推荐的一个全面性。</li>
<li>准确率<br> 准确率定义为： $$ \operatorname{Precision}=\frac{\sum_{u} \mid R(u) \cap T(u)|}{\sum_{u}|R(u)|} $$ 这个意思再说， 在我推荐的所有物品中， 用户真正看的有多少， 这个考察的是我模型推荐的一个准确性。 为了提高准确率， 模型需要把非常有把握的才对用户进行推荐， 所以这时候就减少了推荐的数量， 而这往往就损失了全面性， 真正预测出来的会非常少，所以实际应用中应该综合考虑两者的平衡。</li>
<li>覆盖率<br>覆盖率反映了推荐算法发掘长尾的能力， 覆盖率越高， 说明推荐算法越能将长尾中的物品推荐给用户。 $$ \text { Coverage }=\frac{\left|\bigcup_{u \in U} R(u)\right|}{|I|} $$</li>
<li>新颖度<br>用户推荐列表中物品的平均流行度度量推荐结果的新颖度。 如果推荐出的物品都很热门， 说明推荐的新颖度较低。 由于物品的流行度分布呈长尾分布， 所以为了流行度的平均值更加稳定， 在计算平均流行度时对每个物品的流行度取对数。</li>
</ol>
<h3 id="7协同过滤算法的问题分析"><a href="#7-协同过滤算法的问题分析" class="headerlink" title="7.协同过滤算法的问题分析"></a>7.协同过滤算法的问题分析<a href="#7协同过滤算法的问题分析" class="header-anchor">#</a></h3><p>协同过滤算法存在的问题之一就是泛化能力弱， 即协同过滤无法将两个物品相似的信息推广到其他物品的相似性上。 导致的问题是热门物品具有很强的头部效应， 容易跟大量物品产生相似， 而尾部物品由于特征向量稀疏， 导致很少被推荐。</p>
]]></content>
  </entry>
  <entry>
    <title>FM</title>
    <url>/article/FM/</url>
    <content><![CDATA[<!-- @import "[TOC]" {cmd="toc" depthFrom=1 depthTo=6 orderedList=false} -->

<!-- code_chunk_output -->

<ul>
<li><a href="#1-fm%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%BC%95%E5%85%A5">1. FM模型的引入</a><ul>
<li><a href="#11-%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E6%A8%A1%E5%9E%8B%E5%8F%8A%E5%85%B6%E7%BC%BA%E7%82%B9">1.1 逻辑回归模型及其缺点</a></li>
<li><a href="#12-%E4%BA%8C%E9%98%B6%E4%BA%A4%E5%8F%89%E9%A1%B9%E7%9A%84%E8%80%83%E8%99%91%E5%8F%8A%E6%94%B9%E8%BF%9B">1.2 二阶交叉项的考虑及改进</a></li>
</ul>
</li>
<li><a href="#2-fm%E5%85%AC%E5%BC%8F%E7%9A%84%E7%90%86%E8%A7%A3">2. FM公式的理解</a></li>
<li><a href="#3-fm%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%BA%94%E7%94%A8">3. FM模型的应用</a></li>
</ul>
<!-- /code_chunk_output -->

<h3 id="1-fm模型的引入"><a href="#1-FM模型的引入" class="headerlink" title="1. FM模型的引入"></a>1. FM模型的引入<a href="#1-fm模型的引入" class="header-anchor">#</a></h3><h4 id="11-逻辑回归模型及其缺点"><a href="#1-1-逻辑回归模型及其缺点" class="headerlink" title="1.1 逻辑回归模型及其缺点"></a>1.1 逻辑回归模型及其缺点<a href="#11-逻辑回归模型及其缺点" class="header-anchor">#</a></h4><p>FM模型其实是一种思路，具体的应用稍少。一般来说做推荐CTR预估时最简单的思路就是将特征做线性组合（逻辑回归LR），传入sigmoid中得到一个概率值，本质上这就是一个线性模型，因为sigmoid是单调增函数不会改变里面的线性模型的CTR预测顺序，因此逻辑回归模型效果会比较差。也就是LR的缺点有：</p>
<span id="more"></span>
<ul>
<li>是一个线性模型</li>
<li>每个特征对最终输出结果独立，需要手动特征交叉（$x_i*x_j$），比较麻烦<h4 id="12-二阶交叉项的考虑及改进"><a href="#1-2-二阶交叉项的考虑及改进" class="headerlink" title="1.2 二阶交叉项的考虑及改进"></a>1.2 二阶交叉项的考虑及改进<a href="#12-二阶交叉项的考虑及改进" class="header-anchor">#</a></h4></li>
</ul>
<p>由于LR模型的上述缺陷（主要是手动做特征交叉比较麻烦），干脆就考虑所有的二阶交叉项，也就是将目标函数由原来的</p>
<p>$$ y = w_0+\sum_{i=1}^nw_ix_i $$ 变为</p>
<p>$$ y = w_0+\sum_{i=1}^nw_ix_i+\sum_{i=1}^{n-1}\sum_{i+1}^nw_{ij}x_ix_j $$ 但这个式子有一个问题，只有当$x_i$与$x_j$均不为0时这个二阶交叉项才会生效，后面这个特征交叉项本质是和多项式核SVM等价的，为了解决这个问题，我们的FM登场了！</p>
<p>FM模型使用了如下的优化函数：</p>
<p>$$ y = w_0+\sum_{i=1}^nw_ix_i+\sum_{i=1}^{n}\sum_{i+1}^n\lt v_i,v_j\gt x_ix_j $$ 事实上做的唯一改动就是把$w_{ij}$替换成了$\lt v_i,v_j\gt$，大家应该就看出来了，这实际上就有深度学习的意味在里面了，实质上就是给每个$x_i$计算一个embedding，然后将两个向量之间的embedding做内积得到之前所谓的$w_{ij}$好处就是这个模型泛化能力强 ，即使两个特征之前从未在训练集中同时出现，我们也不至于像之前一样训练不出$w_{ij}$，事实上只需要$x_i$和其他的$x_k$同时出现过就可以计算出$x_i$的embedding！</p>
<h3 id="2-fm公式的理解"><a href="#2-FM公式的理解" class="headerlink" title="2. FM公式的理解"></a>2. FM公式的理解<a href="#2-fm公式的理解" class="header-anchor">#</a></h3><p>从公式来看，模型前半部分就是普通的LR线性组合，后半部分的交叉项：特征组合。首先，单从模型表达能力上来看，FM是要强于LR的，至少它不会比LR弱，当交叉项参数$w_{ij}$全为0的时候，整个模型就退化为普通的LR模型。对于有$n$个特征的模型，特征组合的参数数量共有$1+2+3+\cdots + n-1=\frac{n(n-1)}{2}$个，并且任意两个参数之间是独立的。所以说特征数量比较多的时候，特征组合之后，维度自然而然就高了。</p>
<blockquote>
<p>定理：任意一个实对称矩阵（正定矩阵）$W$都存在一个矩阵$V$，使得 $W=V.V^{T}$成立。</p>
</blockquote>
<p>类似地，所有二次项参数$\omega_{ij}$可以组成一个对称阵$W$（为了方便说明FM的由来，对角元素可以设置为正实数），那么这个矩阵就可以分解为$W=V^TV$，$V$ 的第$j$列($v_{j}$)便是第$j$维特征($x_{j}$)的隐向量。</p>
<p>$$ \hat{y}(X) = \omega_{0}+\sum_{i=1}^{n}{\omega_{i}x_{i}}+\sum_{i=1}^{n-1}{\sum_{j=i+1}^{n} \color{red}{&lt;v_{i},v_{j}&gt;x_{i}x_{j}}} $$</p>
<p>需要估计的参数有$\omega_{0}∈ R$，$\omega_{i}∈ R$，$V∈ R$，$&lt; \cdot, \cdot&gt;$是长度为$k$的两个向量的点乘，公式如下：</p>
<p>$$ &lt;v_{i},v_{j}&gt; = \sum_{f=1}^{k}{v_{i,f}\cdot v_{j,f}} $$</p>
<p>上面的公式中：</p>
<p>$\omega_{0}$为全局偏置；<br>$\omega_{i}$是模型第$i$个变量的权重;<br>$\omega_{ij} = &lt; v_{i}, v_{j}&gt;$特征$i$和$j$的交叉权重;<br>$v_{i} $是第$i$维特征的隐向量;<br>$&lt;\cdot, \cdot&gt;$代表向量点积;<br>$k(k&lt;&lt;n)$为隐向量的长度，包含 $k$ 个描述特征的因子。<br>FM模型中二次项的参数数量减少为 $kn $个，远少于多项式模型的参数数量。另外，参数因子化使得 $x_{h}x_{i}$ 的参数和 $x_{i}x_{j}$ 的参数不再是相互独立的，因此我们可以在样本稀疏的情况下相对合理地估计FM的二次项参数。具体来说，$x_{h}x_{i}$ 和 $x_{i}x_{j}$的系数分别为 $\lt v_{h},v_{i}\gt$ 和 $\lt v_{i},v_{j}\gt$ ，它们之间有共同项 $v_{i}$ 。也就是说，所有包含“ $x_{i}$ 的非零组合特征”（存在某个 $j \ne i$ ，使得 $x_{i}x_{j}\neq 0$ ）的样本都可以用来学习隐向量$v_{i}$，这很大程度上避免了数据稀疏性造成的影响。而在多项式模型中,$w_{hi}$ 和 $w_{ij}$ 是相互独立的。</p>
<p>显而易见，FM的公式是一个通用的拟合方程，可以采用不同的损失函数用于解决regression、classification等问题，比如可以采用MSE（Mean Square Error）loss function来求解回归问题，也可以采用Hinge/Cross-Entropy loss来求解分类问题。当然，在进行二元分类时，FM的输出需要使用sigmoid函数进行变换，该原理与LR是一样的。直观上看，FM的复杂度是 $O(kn^2)$ 。但是FM的二次项可以化简，其复杂度可以优化到 $O(kn)$ 。由此可见，FM可以在线性时间对新样本作出预测。</p>
<p>证明：<br>$$ \begin{align} \sum_{i=1}^{n-1}{\sum_{j=i+1}^{n}{&lt;v_i,v_j&gt;x_ix_j}} &amp;= \frac{1}{2}\sum_{i=1}^{n}{\sum_{j=1}^{n}{&lt;v_i,v_j&gt;x_ix_j}} - \frac{1}{2} {\sum_{i=1}^{n}{&lt;v_i,v_i&gt;x_ix_i}} \<br> &amp;= \frac{1}{2} \left( \sum_{i=1}^{n}{\sum_{j=1}^{n}{\sum_{f=1}^{k}{v_{i,f}v_{j,f}x_ix_j}}} - \sum_{i=1}^{n}{\sum_{f=1}^{k}{v_{i,f}v_{i,f}x_ix_i}} \right) \<br>  &amp;= \frac{1}{2}\sum_{f=1}^{k}{\left[ \left( \sum_{i=1}^{n}{v_{i,f}x_i} \right) \cdot \left( \sum_{j=1}^{n}{v_{j,f}x_j} \right) - \sum_{i=1}^{n}{v_{i,f}^2 x_i^2} \right]} \<br>  &amp;= \frac{1}{2}\sum_{f=1}^{k}{\left[ \left( \sum_{i=1}^{n}{v_{i,f}x_i} \right)^2 - \sum_{i=1}^{n}{v_{i,f}^2 x_i^2} \right]} \end{align} $$ 解释：</p>
<p>$v_{i,f}$ 是一个具体的值；<br>第1个等号：对称矩阵 $W$ 对角线上半部分；<br>第2个等号：把向量内积 $v_{i}$,$v_{j}$ 展开成累加和的形式；<br>第3个等号：提出公共部分；<br>第4个等号： $i$ 和 $j$ 相当于是一样的，表示成平方过程。</p>
<h3 id="3-fm模型的应用"><a href="#3-FM模型的应用" class="headerlink" title="3. FM模型的应用"></a>3. FM模型的应用<a href="#3-fm模型的应用" class="header-anchor">#</a></h3><p>最直接的想法就是直接把FM得到的结果放进sigmoid中输出一个概率值，由此做CTR预估，事实上我们也可以做召回。</p>
<p>由于FM模型是利用两个特征的Embedding做内积得到二阶特征交叉的权重，那么我们可以将训练好的FM特征取出离线存好，之后用来做KNN向量检索。</p>
<p>工业应用的具体操作步骤：</p>
<ul>
<li>离线训练好FM模型（学习目标可以是CTR）</li>
<li>将训练好的FM模型Embedding取出</li>
<li>将每个uid对应的Embedding做avg pooling（平均）形成该用户最终的Embedding，item也做同样的操作</li>
<li>将所有的Embedding向量放入Faiss等</li>
<li>线上uid发出请求，取出对应的user embedding，进行检索召回</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Hadoop_WSL2</title>
    <url>/article/Hadoop_WSL2/</url>
    <content><![CDATA[<h1 id="制作镜像"><a href="#制作镜像" class="headerlink" title="制作镜像"></a>制作镜像<a href="#制作镜像" class="header-anchor">#</a></h1><h2 id="1-拉取ubuntu镜像"><a href="#1-拉取Ubuntu镜像" class="headerlink" title="1. 拉取Ubuntu镜像"></a>1. 拉取Ubuntu镜像<a href="#1-拉取ubuntu镜像" class="header-anchor">#</a></h2><pre><code>首先拉取一个Ubuntu最新的镜像作为基础镜像`docker pull ubuntu:latest`,结束后，运行`docker images`,可以看到
</code></pre>
<p><img src="base_ubuntu.png" alt="图片" title="打开后显示图片"></p>
<h2 id="2-使用dockerfile构建包含jdk的ubuntu镜像"><a href="#2-使用Dockerfile构建包含jdk的ubuntu镜像" class="headerlink" title="2. 使用Dockerfile构建包含jdk的ubuntu镜像"></a>2. 使用Dockerfile构建包含jdk的ubuntu镜像<a href="#2-使用dockerfile构建包含jdk的ubuntu镜像" class="header-anchor">#</a></h2><pre><code>去jdk官网下载jdk包，此处下载的为jdk1.8 ** jdk-8u291-linux-x64.tar.gz**, 将下载好的jdk文件移至wsl2环境下，在此目录下新建Dockerfile文件，并进入编辑状态
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim Dockerfile</span><br></pre></td></tr></table></figure>

<span id="more"></span>
<p>&emsp;&emsp;在Dockerfile中输入以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM ubuntu:latest</span><br><span class="line">MAINTAINER duanmu</span><br><span class="line">ADD jdk-8u291-linux-x64.tar.gz /usr/local/</span><br><span class="line">ENV JAVA_HOME /usr/local/jdk1.8.0_291</span><br><span class="line">ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">ENV PATH $PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;编辑后保存，开始build镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t jdk-20210127 .</span><br></pre></td></tr></table></figure>

<h2 id="3-进入镜像"><a href="#3-进入镜像" class="headerlink" title="3. 进入镜像"></a>3. 进入镜像<a href="#3-进入镜像" class="header-anchor">#</a></h2><p>&emsp;&emsp;新建一个以jdk-20210127为基础镜像的容器命名为ubuntu_hadoop并指定容器的hostname为charlie,并进入容器。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it --name=ubuntu_hadoop -h charlie jdk-20210127</span><br></pre></td></tr></table></figure>

<h2 id="4-升级apt-get"><a href="#4-升级apt-get" class="headerlink" title="4. 升级apt-get"></a>4. 升级apt-get<a href="#4-升级apt-get" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure>

<h2 id="5-安装vim"><a href="#5-安装vim" class="headerlink" title="5. 安装vim"></a>5. 安装vim<a href="#5-安装vim" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install vim</span><br></pre></td></tr></table></figure>

<h2 id="6-更新apt-get镜像源"><a href="#6-更新apt-get镜像源" class="headerlink" title="6. 更新apt-get镜像源"></a>6. 更新apt-get镜像源<a href="#6-更新apt-get镜像源" class="header-anchor">#</a></h2><p>&emsp;&emsp;默认的apt-get下载源速度太慢，更换下载源可以提升速度,进入下载源列表文件，按a进入insert模式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure>
<p>将其中内容全部替换为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deb-src http://archive.ubuntu.com/ubuntu focal main restricted #Added by software-properties</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal main restricted</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted multiverse universe #Added by software-properties</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted multiverse universe #Added by software-properties</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-updates universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-updates multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse #Added by software-properties</span><br><span class="line">deb http://archive.canonical.com/ubuntu focal partner</span><br><span class="line">deb-src http://archive.canonical.com/ubuntu focal partner</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted multiverse universe #Added by software-properties</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-security universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-security multiverse</span><br></pre></td></tr></table></figure>

<h2 id="7-重新升级apt-get"><a href="#7-重新升级apt-get" class="headerlink" title="7. 重新升级apt-get"></a>7. 重新升级apt-get<a href="#7-重新升级apt-get" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure>

<h2 id="8-安装wget"><a href="#8-安装wget" class="headerlink" title="8. 安装wget"></a>8. 安装wget<a href="#8-安装wget" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install wget</span><br></pre></td></tr></table></figure>

<h2 id="9-创建并进入安装hadoop的文件目录"><a href="#9-创建并进入安装hadoop的文件目录" class="headerlink" title="9. 创建并进入安装hadoop的文件目录"></a>9. 创建并进入安装hadoop的文件目录<a href="#9-创建并进入安装hadoop的文件目录" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p soft/apache/hadoop/</span><br><span class="line">cd soft/apache/hadoop</span><br></pre></td></tr></table></figure>

<h2 id="10-通过wget下载安装hadoop安装包"><a href="#10-通过wget下载安装Hadoop安装包" class="headerlink" title="10. 通过wget下载安装Hadoop安装包"></a>10. 通过wget下载安装Hadoop安装包<a href="#10-通过wget下载安装hadoop安装包" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://mirrors.ustc.edu.cn/apache/hadoop/common/hadoop-3.3.0/hadoop-3.3.0.tar.gz</span><br></pre></td></tr></table></figure>

<h2 id="11-解压hadoop"><a href="#11-解压hadoop" class="headerlink" title="11. 解压hadoop"></a>11. 解压hadoop<a href="#11-解压hadoop" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -xvzf Hadoop-3.3.0.tar.gz</span><br></pre></td></tr></table></figure>

<h2 id="12-配置环境变量并重启配置文件"><a href="#12-配置环境变量并重启配置文件" class="headerlink" title="12. 配置环境变量并重启配置文件"></a>12. 配置环境变量并重启配置文件<a href="#12-配置环境变量并重启配置文件" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure>

<p>新增以下环境变量：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_291</span><br><span class="line">export HADOOP_HOME=/soft/apache/hadoop/hadoop-3.3.0</span><br><span class="line">export HADOOP_CONFIG_HOME=$HADOOP_HOME/etc/hadoop</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/bin</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/sbin</span><br></pre></td></tr></table></figure>

<p>并重启配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure>

<h2 id="13-创建文件夹并修改配置文件"><a href="#13-创建文件夹并修改配置文件" class="headerlink" title="13. 创建文件夹并修改配置文件"></a>13. 创建文件夹并修改配置文件<a href="#13-创建文件夹并修改配置文件" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd $HADOOP_HOME</span><br><span class="line">mkdir tmp</span><br><span class="line">mkdir namenode</span><br><span class="line">mkdir datanode</span><br></pre></td></tr></table></figure>

<p>修改配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd $HADOOP_CONFIG_HOME</span><br><span class="line">vim core-site.xml</span><br></pre></td></tr></table></figure>

<p>将下面内容替换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line">  you may not use this file except in compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to in writing, software</span><br><span class="line">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License for the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Put site-specific property overrides in this file. --&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;/soft/apache/hadoop/hadoop-3.3.0/tmp&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;fs.default.name&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;hdfs://master:9000&lt;/value&gt;</span><br><span class="line">        &lt;final&gt;true&lt;/final&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>

<p>更改hdfs-site.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim hdfs-site.xml</span><br></pre></td></tr></table></figure>

<p>用下面配置替换：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line">  you may not use this file except in compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to in writing, software</span><br><span class="line">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License for the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Put site-specific property overrides in this file. --&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;2&lt;/value&gt;</span><br><span class="line">        &lt;final&gt;true&lt;/final&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;/soft/apache/hadoop/hadoop-3.3.0/namenode&lt;/value&gt;</span><br><span class="line">        &lt;final&gt;true&lt;/final&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.datanode.name.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;/soft/apache/hadoop/hadoop-3.3.0/datanode&lt;/value&gt;</span><br><span class="line">        &lt;final&gt;true&lt;/final&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>

<p>接下来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim mapred-site.xml</span><br></pre></td></tr></table></figure>

<p>使用下面内容替换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line">  you may not use this file except in compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to in writing, software</span><br><span class="line">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License for the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Put site-specific property overrides in this file. --&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;mapred.job.tarcker&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;master:9001&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>

<h2 id="14-修改hadoop环境变量"><a href="#14-修改hadoop环境变量" class="headerlink" title="14. 修改hadoop环境变量"></a>14. 修改hadoop环境变量<a href="#14-修改hadoop环境变量" class="header-anchor">#</a></h2><p>在hadoop的安装目录下，找到<code>hadoop-env.sh</code>文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim hadoop-env.sh</span><br></pre></td></tr></table></figure>

<p>在最后添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_291</span><br></pre></td></tr></table></figure>

<p>刷新</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hadoop namenode -format</span><br></pre></td></tr></table></figure>

<h2 id="15-安装ssh"><a href="#15-安装SSH" class="headerlink" title="15. 安装SSH"></a>15. 安装SSH<a href="#15-安装ssh" class="header-anchor">#</a></h2><p>hadoop的环境必须满足ssh免密登陆，先安装ssh</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install net-tools</span><br><span class="line">apt-get install ssh</span><br></pre></td></tr></table></figure>

<p>创建sshd目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p ~/var/run/sshd</span><br></pre></td></tr></table></figure>

<p>生成访问密钥</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~/</span><br><span class="line">ssh-keygen -t rsa -P &#x27;&#x27; -f ~/.ssh/id_rsa</span><br><span class="line">cd .ssh</span><br><span class="line">cat id_rsa.pub &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure>

<p>这一步骤提示安装路径与设置密码时全布直接按回车即可设置成免密。</p>
<h3 id="修改ssh配置"><a href="#修改ssh配置" class="headerlink" title="修改ssh配置"></a>修改ssh配置<a href="#修改ssh配置" class="header-anchor">#</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/ssh/ssh_config</span><br></pre></td></tr></table></figure>

<p>添加,将下面这句话直接添加即可，也可以在文件中找到被注释的这句话去修改。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">StrictHostKeyChecking no #将ask改为no</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>

<p>在末尾添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#禁用密码验证</span><br><span class="line">PasswordAuthentication no</span><br><span class="line">#启用密钥验证</span><br><span class="line">RSAAuthentication yes</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line">AuthorizedKeysFile .ssh/authorized_keys</span><br></pre></td></tr></table></figure>

<p>最后使用下面语句测试是否免密登陆，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh localhost</span><br></pre></td></tr></table></figure>

<p>当出现报错时，考虑输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/init.d/ssh restart</span><br></pre></td></tr></table></figure>

<p>为了避免踩坑，先提前设置,进入环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure>

<p>增加如下内容并保存：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export HDFS_NAMENODE_USER=root</span><br><span class="line">export HDFS_DATANODE_USER=root</span><br><span class="line">export HDFS_SECONDARYNAMENODE_USER=root</span><br><span class="line">export YARN_RESOURCEMANAGER_USER=root</span><br><span class="line">export YARN_NODEMANAGER_USER=root</span><br></pre></td></tr></table></figure>

<p>使配置生效</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<h2 id="16-导出镜像"><a href="#16-导出镜像" class="headerlink" title="16. 导出镜像"></a>16. 导出镜像<a href="#16-导出镜像" class="header-anchor">#</a></h2><p>至此镜像已经配置完成，退出容器，将配置好的镜像保存，其中xxxx为刚刚操作的容器的id，可以使用docker ps -a查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker commit xxxx ubuntu:hadoop</span><br></pre></td></tr></table></figure>

<p>此时ubuntu_hadoop就是最终配置好的包含hadoop的镜像。</p>
<h2 id="17-集群测试"><a href="#17-集群测试" class="headerlink" title="17. 集群测试"></a>17. 集群测试<a href="#17-集群测试" class="header-anchor">#</a></h2><p>依次构建并启动三个以刚刚生成的镜像为基本镜像的容器，依次命名为master 、slave1、slave2，并将master做端口映射（提示：容器要处于运行状态，生成容器后使用ctrl+P+Q退出可以使容器保持后台运行。）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it  -h master --name=master -p 9870:9870 -p 8088:8088 -p 9000:9000 ubuntu:hadoop </span><br><span class="line">docker run -it  -h slave1 --name=slave1 ubuntu:hadoop </span><br><span class="line">docker run -it  -h slave2 --name=slave2 ubuntu:hadoop </span><br></pre></td></tr></table></figure>

<p>修改每个容器的host文件<br>对matser、slave1、slave2里的host文件，分别加入其他两个容器的ip</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1       localhost</span><br><span class="line">::1     localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0 ip6-localnet</span><br><span class="line">ff00::0 ip6-mcastprefix</span><br><span class="line">ff02::1 ip6-allnodes</span><br><span class="line">ff02::2 ip6-allrouters</span><br><span class="line">172.17.0.2      master</span><br><span class="line">172.17.0.3      slave1</span><br><span class="line">172.17.0.4      slave2 ###根据实际修改</span><br></pre></td></tr></table></figure>

<h3 id="修改master中slaves文件"><a href="#修改master中slaves文件" class="headerlink" title="修改master中slaves文件"></a>修改master中slaves文件<a href="#修改master中slaves文件" class="header-anchor">#</a></h3><p>注意，在hadoop3.3.0版本中并不是修改slaves文件，而是修改workers文件。此处为3.3.0版本的一些变化。<br>老版本（自行查找hadoop版本中已存在文件是slaves还是iworkers）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd $HADOOP_CONFIG_HOME/</span><br><span class="line">vim workers</span><br></pre></td></tr></table></figure>

<p>将其他两个节点名称加入文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">slave1</span><br><span class="line">slave2</span><br></pre></td></tr></table></figure>

<h3 id="启动hadoop"><a href="#启动hadoop" class="headerlink" title="启动hadoop"></a>启动hadoop<a href="#启动hadoop" class="header-anchor">#</a></h3><p>此时报错的话，可在每个节点运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>



<h1 id="reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference<a href="#reference" class="header-anchor">#</a></h1><ol>
<li><a href="https://blog.csdn.net/weixin_43993764/article/details/113405025">https://blog.csdn.net/weixin_43993764/article/details/113405025</a></li>
<li><a href="https://blog.csdn.net/u013015629/article/details/70045809">https://blog.csdn.net/u013015629/article/details/70045809</a></li>
</ol>
<!--
&emsp;&emsp;<font face="黑体" size=10>16. 我是黑体字</font>
-->

<div style="display:none">这是一段注释</div>]]></content>
  </entry>
  <entry>
    <title>LN_BN</title>
    <url>/article/LN-BN/</url>
    <content><![CDATA[<p>LN：Layer Normalization，LN是“横”着来的，对一个样本，不同的神经元neuron间做归一化。</p>
<p>BN：Batch Normalization，BN是“竖”着来的，各个维度做归一化，所以与batch size有关系。</p>
<p><img src="image-20210906155404860.png" alt="image-20210906155404860"></p>
<p><strong>优点：</strong>Bactch Normalization通过标准化让激活函数分布在线性区间，结果就是加大了梯度，让模型更大胆的进行梯度下降，具有如下优点：</p>
<ul>
<li>加大搜索的步长，加快收敛的速度；</li>
<li>更容易跳出局部最小值；</li>
<li>破坏原来的数据分布，一定程度上缓解了过拟合</li>
</ul>
<p><strong>缺陷如下：</strong></p>
<p>1、BN是在batch size样本上各个维度做标准化的，所以size越大肯定越能得出合理的μ和σ来做标准化，因此BN比较依赖size的大小。<br>2、在训练的时候，是分批量进行填入模型的，但是在预测的时候，如果只有一个样本或者很少量的样本来做inference，这个时候用BN显然偏差很大，例如在线学习场景。<br>3、RNN是一个动态的网络，也就是size是变化的，可大可小，造成多样本维度都没法对齐，所以不适合用BN。</p>
<p><strong>LN带来的优势：</strong></p>
<p>1、Layer Normalization是每个样本内部做标准化，跟size没关系，不受其影响。<br>2、RNN中LN也不受影响，内部自己做标准化，所以LN的应用面更广。</p>
<ul>
<li>BatchNorm：batch方向做归一化，计算N<em>H</em>W的均值</li>
<li>LayerNorm：channel方向做归一化，计算C<em>H</em>W的均值</li>
<li>InstanceNorm：一个channel内做归一化，计算H*W的均值</li>
<li>GroupNorm：先将channel方向分group，然后每个group内做归一化，计算(C//G)<em>H</em>W的均值</li>
</ul>
<h1 id="wn"><a href="#WN" class="headerlink" title="WN"></a>WN<a href="#wn" class="header-anchor">#</a></h1><p><img src="image-20210906155830408.png" alt="image-20210906155830408"></p>
<p><img src="LN-BN/image-20210906155845338.png" alt="image-20210906155845338"></p>
<h1 id="归一化操作"><a href="#归一化操作" class="headerlink" title="归一化操作"></a>归一化操作<a href="#归一化操作" class="header-anchor">#</a></h1><p><img src="image-20210906160001983.png" alt="image-20210906160001983"></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料<a href="#参考资料" class="header-anchor">#</a></h1><p><a href="https://www.cnblogs.com/gczr/p/12597344.html">https://www.cnblogs.com/gczr/p/12597344.html</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/33173246">详解深度学习中的Normalization，BN/LN/WN - 知乎 (zhihu.com)</a></p>
<p><a href="https://www.cnblogs.com/shine-lee/p/11779514.html">为什么要做特征归一化/标准化？ - shine-lee - 博客园 (cnblogs.com)</a></p>
]]></content>
  </entry>
  <entry>
    <title>NecuralCF</title>
    <url>/article/NeuralCF/</url>
    <content><![CDATA[<!-- @import "[TOC]" {cmd="toc" depthFrom=1 depthTo=6 orderedList=false} -->

<!-- code_chunk_output -->

<ul>
<li><a href="#1%E5%8A%A8%E6%9C%BA">1.动机</a></li>
<li><a href="#2%E6%A8%A1%E5%9E%8B%E7%BB%93%E6%9E%84%E5%8F%8A%E5%8E%9F%E7%90%86">2.模型结构及原理</a></li>
<li><a href="#3-%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0">3. 代码实现</a></li>
</ul>
<!-- /code_chunk_output -->

<h3 id="1动机"><a href="#1-动机" class="headerlink" title="1.动机"></a>1.动机<a href="#1动机" class="header-anchor">#</a></h3><p>在前面的组队学习中，我们学习了最经典的推荐算法，协同过滤。在前深度学习的时代，协同过滤曾经大放异彩，但随着技术的发展，协同过滤相比深度学习模型的弊端就日益显现出来了，因为它是通过直接利用非常稀疏的共现矩阵进行预测的，所以模型的泛化能力非常弱，遇到历史行为非常少的用户，就没法产生准确的推荐结果了。虽然，我们可以通过矩阵分解算法增强它的泛化能力，但因为矩阵分解是利用非常简单的内积方式来处理用户向量和物品向量的交叉问题的，所以，它的拟合能力也比较弱。这该怎么办呢？不是说深度学习模型的拟合能力都很强吗？我们能不能利用深度学习来改进协同过滤算法呢？当然是可以的。2017 年，新加坡国立的研究者就使用深度学习网络来改进了传统的协同过滤算法，取名 NeuralCF（神经网络协同过滤）。NeuralCF 大大提高了协同过滤算法的泛化能力和拟合能力，让这个经典的推荐算法又重新在深度学习时代焕发生机。这章节，我们就一起来学习并实现 NeuralCF！</p>
<span id="more"></span>
<h3 id="2模型结构及原理"><a href="#2-模型结构及原理" class="headerlink" title="2.模型结构及原理"></a>2.模型结构及原理<a href="#2模型结构及原理" class="header-anchor">#</a></h3><p><img src="./NeuralCF/neuralCF.webp" alt="necural模型"></p>
<p>为了允许神经网络对协同过滤进行一个完整的处理，我们采用上图展示的多层感知机去模拟一个用户项目交互$y_{ui}$，它的一层的输出作为下一层的输入。底部输入层包括两个特征向量$v^U_u$和$v^I_i$ ，分别用来描述用户$u$和项目$i$。 他们可以进行定制，用以支持广泛的用户和项目的建模，例如上下文感知，基于内容，和基于邻居的构建方式。由于本章工作的重点是纯的协同过滤模型设置，我们仅使用一个用户和一个项目作为输入特征，它使用$one-hot$编码将它们转化为二值化稀疏向量。注意到，我们对输入使用这样的通用特征表示，可以很容易地使用的内容特征来表示用户和项目，以调整解决冷启动问题。</p>
<p>输入层上面是嵌入层$（Embedding\  Layer）$;它是一个全连接层，用来将输入层的稀疏特征向量映射为一个稠密向量$（dense\ vector）$。所获得的用户（项目）的嵌入（就是一个稠密向量）可以被看作是在潜在因素模型的上下文中用于描述用户（项目）的潜在向量。然后我们将用户嵌入和项目嵌入送入多层神经网络中，我们将它称为神经网络协同过滤层，它将潜在向量映射为预测分数。NCF层的每一层都可以被定制，用以发现用户-项目交互的某些潜在结构。最后一个隐藏层 $X$ 的维度尺寸决定了模型的能力。最终输出层是预测分数$\hat{y}<em>{ui}$，通过最小化预测值$\hat{y}</em>{ui}$和其目标值$y_{ui}$之间逐点损失进行训练。</p>
<p>论文中主要运用均方误差$（squared\ loss）$进行回归： $$ L_{sqr}=\sum_{(u,i)\in y\cup y^-}w_{ui}(y_{ui}-\hat{y}<em>{ui})^2 $$ 其中$ y$表示交互矩阵$Y$中观察到的条目（如对电影有明确的评分，评级）， $y^-$表示负样本（$negative\ instances$，可以将未观察的样本全体视为负样本，或者采取抽样的方式标记为负样本）; $w</em>{ui}$是一个超参数，用来表示训练样本$(u,i)$的权重。虽然均方误差可以通过假设观测服从高斯分布来作出解释，但是它不适合处理隐性数据$（implicit\ data）$。这是因为对于隐含数据来说，目标值 $y_{ui}$是二进制值$1$或$0$，表示$u$是否与$i$进行了互动。在下文中提出了逐点学习NCF的概率学方法，特别注重隐性数据的二进制属性。</p>
<p>考虑到隐性反馈的一类性质，我们可以将$y_{ui}$的值作为一个标签——$1$表示项目$i$和用户$u$相关，$0$表达不相关。这样一来预测分数$\hat{y}<em>{ui}$就代表了项目$i$和用户$u$相关的可能性大小。为了赋予NCF这样的概率解释，我们需要将网络输出限制到$[0,1]$的范围内，通过使用概率函数（逻辑函数$sigmoid$或者$probit$函数）作为激活函数作用在输出层$\phi</em>{out}$，我们可以很容易地实现数据压缩。经过以上设置后，我们这样定义似然函数： $$ p(y,y^-|P,Q,\Theta_f)=\prod_{(u,i)\in{y}}\hat{y}<em>{ui}\prod</em>{(u,j)\in{y^-}}(1-\hat{y}<em>{uj}) $$ 对似然函数取负对数，我们得到（负对数可以用来表示$Loss$函数，而且还能消除小数乘法的下溢出问题）: $$ L=-\sum</em>{(u,i)\in{y}}log\hat{y}<em>{ui}-\sum</em>{(u,j)\in{y^-}}log(1-\hat{y}<em>{uj})=-\sum</em>{(u,i)\in{y}\cup{y}^-}y_{ui}log \hat{y}<em>{ui}+(1-y</em>{ui})log(1-\hat{y}_{ui}) $$ 这是NCF需要去最小化的目标函数，并且可以通过使用随机梯度下降$（SGD）$来进行训练优化。这个函数和交叉熵损失函数$（binary\ cross-entropy\ loss，又被成为log\ loss）$是一样的。通过在NCF上使用这样一个概率处理$（probabilistic\ treatment）$，我们把隐性反馈的推荐问题当做一个二分类问题来解决。对于负样本 $y^-$ ，我们在每次迭代均匀地从未观察到的相互作用中采样（作为负样本）并且对照可观察到交互的数量，控制采样比率。</p>
<p>我们现在来证明MF是如何被解释为我们的NCF框架的一个特例。由于MF是推荐领域最流行的模型，并已在众多文献中被广泛的研究，复现它能证明NCF可以模拟大部分的分解模型。由于输入层是用户（项目）ID中的一个$one-hot\ encoding$编码，所获得的嵌入向量可以被看作是用户（项目）的潜在向量。我们用$P^Tv^U_u$表示用户的潜在向量$p_u$,$Q^Tv^I_i$表示项目的潜在向量$q_i$ ,我们定义第一层神经CF层的映射函数为： $$ \phi(p_u,q_i)=p_u\odot q_i $$ 其中$\odot$表示向量的逐元素乘积。然后，我们将向量映射到输出层： $$ \hat{y}<em>{ui}=a</em>{out}(h^T(p_u\odot q_i)) $$ 其中$a_{out}$和$h$分别表示输出层的激活函数和连接权。直观地讲，如果我们将$a_{out}$看做一个恒等函数， $h$权重全为1，显然这就是我们的MF模型。在NCF的框架下，MF可以很容易地被泛化和推广。例如，如果我们允许从没有一致性约束（uniform constraint）的数据中学习$h$，则会形成MF的变体，它允许潜在维度的不同重要性（For example, if we allow h to be learnt from data without the uniform constraint, it will result in a variant of MF that allows varying importance of latent dimensions）。如果我们用一个非线性函数$a_{out}$将进一步推广MF到非线性集合，使得模型比线性MF模型更具有表现力。在NCF下实现一个更一般化的MF，它使用Sigmoid函数$\sigma(x)=1/1(1+e^{-x})$作为激活函数，通过$log loss$学习 $h$。称为GMF（Generalized Matrix Factorization，广义矩阵分解）。</p>
<p><img src="./NeuralCF/NMF.png" alt="NMF"></p>
<p>GMF，它应用了一个线性内核来模拟潜在的特征交互；MLP，使用非线性内核从数据中学习交互函数。接下来的问题是：我们如何能够在NCF框架下融合GMF和MLP，使他们能够相互强化，以更好地对复杂的用户-项目交互建模？一个直接的解决方法是让GMF和MLP共享相同的嵌入层（Embedding Layer），然后再结合它们分别对相互作用的函数输出。这种方式和著名的神经网络张量（NTN,Neural Tensor Network）有点相似。然而，共享GMF和MLP的嵌入层可能会限制融合模型的性能。例如，它意味着，GMF和MLP必须使用的大小相同的嵌入;对于数据集，两个模型的最佳嵌入尺寸差异很大，使得这种解决方案可能无法获得最佳的组合。为了使得融合模型具有更大的灵活性，我们允许GMF和MLP学习独立的嵌入，并结合两种模型通过连接他们最后的隐层输出。</p>
<h3 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3. 代码实现"></a>3. 代码实现<a href="#3-代码实现" class="header-anchor">#</a></h3><p>从模型的结构上来看，NeuralCF的模型其实是在矩阵分解上进行了加强，用MLP代替了inner product，下面是构建模型的核心代码，详细代码参考github。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def NCF(dnn_feature_columns):</span><br><span class="line">    # 构建输入层，即所有特征对应的Input()层，这里使用字典的形式返回，方便后续构建模型</span><br><span class="line">    _, sparse_input_dict = build_input_layers(dnn_feature_columns) # 没有dense特征</span><br><span class="line"></span><br><span class="line">    # 构建模型的输入层，模型的输入层不能是字典的形式，应该将字典的形式转换成列表的形式</span><br><span class="line">    # 注意：这里实际的输入与Input()层的对应，是通过模型输入时候的字典数据的key与对应name的Input层</span><br><span class="line">    input_layers = list(sparse_input_dict.values())</span><br><span class="line">    </span><br><span class="line">    # 创建两份embedding向量, 由于Embedding层的name不能相同，所以这里加入一个prefix参数</span><br><span class="line">    GML_embedding_dict = build_embedding_layers(dnn_feature_columns, sparse_input_dict, is_linear=False, prefix=&#x27;GML&#x27;)</span><br><span class="line">    MLP_embedding_dict = build_embedding_layers(dnn_feature_columns, sparse_input_dict, is_linear=False, prefix=&#x27;MLP&#x27;)</span><br><span class="line"></span><br><span class="line">    # 构建GML的输出</span><br><span class="line">    GML_user_emb = Flatten()(GML_embedding_dict[&#x27;user_id&#x27;](sparse_input_dict[&#x27;user_id&#x27;])) # B x embed_dim</span><br><span class="line">    GML_item_emb = Flatten()(GML_embedding_dict[&#x27;movie_id&#x27;](sparse_input_dict[&#x27;movie_id&#x27;])) # B x embed_dim</span><br><span class="line">    GML_out = tf.multiply(GML_user_emb, GML_item_emb) # 按元素相乘 </span><br><span class="line"></span><br><span class="line">    # 构建MLP的输出</span><br><span class="line">    MLP_user_emb = Flatten()(MLP_embedding_dict[&#x27;user_id&#x27;](sparse_input_dict[&#x27;user_id&#x27;])) # B x embed_dim</span><br><span class="line">    MLP_item_emb = Flatten()(MLP_embedding_dict[&#x27;movie_id&#x27;](sparse_input_dict[&#x27;movie_id&#x27;])) # B x embed_dim</span><br><span class="line">    MLP_dnn_input = Concatenate(axis=1)([MLP_user_emb, MLP_item_emb]) # 两个向量concat</span><br><span class="line">    MLP_dnn_out = get_dnn_out(MLP_dnn_input, (32, 16))</span><br><span class="line"></span><br><span class="line">    # 将dense特征和Sparse特征拼接到一起</span><br><span class="line">    concat_out = Concatenate(axis=1)([GML_out, MLP_dnn_out]) </span><br><span class="line"></span><br><span class="line">    # 输入到dnn中，需要提前定义需要几个残差块</span><br><span class="line">    # output_layer = Dense(1, &#x27;sigmoid&#x27;)(concat_out)</span><br><span class="line">    output_layer = Dense(1)(concat_out)</span><br><span class="line">    </span><br><span class="line">    model = Model(input_layers, output_layer)</span><br><span class="line">    return model</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>RS</title>
    <url>/article/RS/</url>
    <content><![CDATA[<p><img src="%E5%8F%91%E5%B1%95%E5%9B%BE1.png" alt="rs发展历程1"><br><img src="%E5%8F%91%E5%B1%95%E5%9B%BE2.png" alt="rs发展历程2"></p>
<span id="more"></span>
<h1 id="推荐系统简介"><a href="#推荐系统简介" class="headerlink" title="推荐系统简介"></a>推荐系统简介<a href="#推荐系统简介" class="header-anchor">#</a></h1><ol>
<li>做什么<ul>
<li>用户：帮助用户快速发现有用信息</li>
<li>企业：增加产品与潜在用户接触、购买等行为概率的工具</li>
</ul>
</li>
<li>为什么<ul>
<li>用户：在需求不明确的时候进行信息过滤，利用用户的各类历史信息猜测其可能喜欢的内容</li>
<li>使产品最大限度的吸引用户，留存客户，增长用户黏性，提高用户转化率</li>
</ul>
</li>
<li>为了谁<ul>
<li>用户和企业，在此基础上，展开想想什么样的人需要推荐系统，及什么样的企业需要推荐系统</li>
</ul>
</li>
</ol>
<h1 id="评价指标"><a href="#评价指标" class="headerlink" title="评价指标"></a>评价指标<a href="#评价指标" class="header-anchor">#</a></h1><ol>
<li><p>用户满意度<br> &emsp;&emsp;用户满意度直接决定推荐系统的好坏，但是无法离线计算。因此需要购满率来度量客户满意度，与此类似的还有用户停留时间和转化率等指标。</p>
</li>
<li><p>预测精准度<br> 预测准确度是用来度量用户的实际行为与推荐系统预测结果的准确度，是最重要的离线评价指标。</p>
<ul>
<li><p>评分预测<br>  预测用户对物品的评分行为称为评分预测。评分预测模型通过对用户的历史物品评分记录进行建模，进而得到用户的兴趣模型，然后使用模型预测用户对未见过商品的评分。评分预测的准确度一般通过均方根误差（RMSE）或者平均绝对误差（MAE）计算。对于测试集中的一个用户$u$和物品$i$,令$r_{ui}$是用户$u$对物品$i$的实际评分,而$\hat{r_{ui}}$是推荐模型预测出的评分,那么RMSE可以定义为: $$ RMSE = \sqrt{\frac{\sum_{u,i \in T}(r_{ui} - \hat{r}<em>{ui})^2}{|T|}} $$ MAE定义为: $$ MAE = \frac{\sum{u,i \in T}|r</em>{ui} - \hat{r}_{ui}|}{|T|} $$ RMSE由于存在平方项，使得使得用户真实评分与推荐系统预测评分相差较大的用户加大了惩罚，即该评测指标对系统要求更加的苛刻</p>
</li>
<li><p>TopN推荐<br>   推荐系统在给用户推荐物品的时候,往往会给用户一个列表的推荐物品,这种场景下的推荐成为是TopN推荐,该推荐方式最常用的预测准确率指标一般是精确率(precision)和召回率(recall),令$R(u)$为通过推荐模型得到的推荐列表,$T(u)$为用户在实际场景中(测试集)的行为列表.</p>
<ul>
<li><p>精确率(precision): 分类正确的正样本个数占分类器判定为正样本的样本个数比例(这里$R(u)$相当于是模型判定的正样本) $$ Precision= \frac{\sum_{u \in U}|R(u) \cap T(u)|}{\sum_{u \in U}|R(u)|} $$</p>
</li>
<li><p>召回率(recall): 分类正确的正样本个数占真正的正样本个数的比例(这里的$T(u)$相当于真正的正样本集合)</p>
<p>  $$ Recall= \frac{\sum_{u \in U}|R(u) \cap T(u)|}{\sum_{u \in U}|T(u)|} $$<br>有时候为了更加全面的评估TopN推荐,通常会选取不同的推荐列表长度计算多组精确率与召回率然后分别绘制出精确率曲线和召回率曲线,需要注意的是这里并不是PR曲线,感兴趣的可以了解一下PR曲线相关的知识.</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>覆盖率<br> 覆盖率是用来描述一个推荐系统对物品长尾的发掘能力,一个简单的定义可以是:推荐系统所有推荐出来的商品集合数占总物品集合数的比例.<br> 信息熵定义覆盖率: 其中$p(i)$是物品$i$的流行度除以所有物品流行度之和 $$ H = -\sum_{i=1}^n p(i) logp(i) $$ 基尼系数定义覆盖率: 其中$i_j$是按照物品流行度p从小到大排序的物品列表中第$j$个物品 $$ G=\frac{1}{n-1} \sum_{j=1}^{n}(2j-n-1)p(i_{j}) $$</p>
</li>
<li><p>多样性<br> 人的兴趣爱好通常是比较广泛的,所以一个好的推荐系统得到的推荐列表中应该尽可能多的包含用户的兴趣,只有这样才能增加用户找到感兴趣物品的概率.度量推荐列表中物品的多样性换句话说就是度量推荐列表中所有物品之间的不相似性,可以通过不同的相似性函数来度量推荐列表中商品的相似性,比如商品基于内容的相似,基于协同过滤的相似,这样就可以得到不同角度的多样性.令函数$s(i,j)$为物品$i$和物品$j$的相似性,那么用户推荐列表的多样性可以定义为: $$ Diversity(R(u))=1-\frac{\sum_{i,j \in R(u)}s(i,j)}{\frac{1}{2}|R(u)|(|R(u)|-1)} $$ 推荐系统整体的多样性可以定义为所有用户推荐列表多样性的平均值: $$ Diversity = \frac{1}{U} \sum_{u\in U}Diversity(R(u)) $$</p>
</li>
<li><p>新颖性<br> 满足推荐的新颖性最简单的方法就是给用户推荐他们之前没有看过的物品,但是每个用户没见过的物品数量是非常庞大的,所以一般会计算推荐物品的平均流行度,流行度越低的物品越有可能让用户觉得新颖,因此,如果推荐结果中的物品平均热门程度比较低说明推荐的结果就可能比较新颖.</p>
</li>
<li><p>AUC曲线<br> AUC（Area Under Curve），ROC曲线下与坐标轴围成的面积<br> TP：真的真了（真实值是真的，预测也是真）<br> FN：真的假了（真实值是真的，预测为假了）<br> FP：假的真了（真实值是假的，预测为真了）<br> TN：假的假了（真实值是假的，预测也是假）<br>  $$ Recall = \frac{TP}{TP+FN}\ Precise=\frac{TP}{TP+FP} $$ ROC(Receiver Operating Characteristic Curve)曲线：<br>  <img src="ROC.png" alt="ROC曲线图"><br>  ROC曲线的横坐标为假阳性率（False Positive Rate, FPR），N是真实负样本的个数， FP是N个负样本中被分类器预测为正样本的个数。</p>
<p> 纵坐标为真阳性率（True Positive Rate, TPR），P是真实正样本的个数，TP是P个正样本中被分类器预测为正样本的个数。</p>
</li>
</ol>
<h1 id="召回"><a href="#召回" class="headerlink" title="召回"></a>召回<a href="#召回" class="header-anchor">#</a></h1><ol>
<li><p>召回层在推荐系统架构中的位置及作用</p>
<p> &nbsp;<br> 在推荐系统架构中召回层与排序层是推荐系统的核心算法层，而将推荐过程分成召回层与排序层主要是基于工程上的考虑，其中召回阶段负责将海量的候选集快速缩小为几万到几千的规模；而排序层则负责对缩小后的候选集进行精准排序。所以在召回阶段往往会利用少量的特征和简单的模型对大规模的数据集进行快速的筛选，而在排序层一般会使用更多的特征和更加复杂的模型进行精准的排序。<br> &nbsp;<br> <strong>下面是召回层与排序层的特点</strong></p>
<ul>
<li><strong>召回层</strong>:待计算的候选集合大、计算速度快、模型简单、特征较少，尽量让用户感兴趣的物品在这个阶段能够被快速召回，即保证相关物品的召回率</li>
<li><strong>排序层</strong>:首要目标是得到精准的排序结果。需要处理的物品数量少，可以利用较多的特征，使用比较复杂的模型。</li>
</ul>
</li>
</ol>
<p>在设计召回层时，“计算速度”和“召回率”其实是矛盾的两个指标，为提高“计算速度”，需要使召回策略尽量简单一些；而为了提高“召回率”，要求召回策略尽量选出排序模型所需要的候选集，这也就要求召回策略不能过于简单。在权衡计算速度和召回率后，目前工业界主流的召回方法是采用多个简单策略叠加的“多路召回策略”</p>
<ol start="2">
<li><p>多路召回策略<br>所谓的“多路召回”策略，就是指采用不同的策略、特征或简单模型，分别召回一部分候选集，然后把候选集混合在一起供后续排序模型使用，可以明显的看出，“多路召回策略”是在“计算速度”和“召回率”之间进行权衡的结果。其中，各种简单策略保证候选集的快速召回，从不同角度设计的策略保证召回率接近理想的状态，不至于损伤排序效果。<br><img src="%E5%A4%9A%E8%B7%AF%E5%8F%AC%E5%9B%9E.png" alt="多路召回"><br>具体使用哪些召回策略其实是与业务强相关的，针对不同的任务就会有对于该业务真实场景下需要考虑的召回规则。例如视频推荐，召回规则可以是“热门视频”、“导演召回”、“演员召回”、“最近上映“、”流行趋势“、”类型召回“等等。<br>&nbsp;<br><strong>多路召回存在的问题</strong><br>&nbsp;<br>虽然多路召回权衡了计算速度和召回率的问题，可以使得用于排序的候选商品更加的丰富，但是实际的多路召回仍然存在一些问题。如上图所示，对于每一路召回都会从商品集合中拉回K个商品，这里的K是一个超参数，对于K的选择一般需要通过离线评估加线上的A/B测试来确定合理的K值。除此之外，对于不同的任务具体策略的选择也是人工基于经验的选择，选择的策略之间的信息是割裂的，无法总和考虑不同策略对一个物品的影响。</p>
</li>
<li><p>Embedding召回</p>
</li>
</ol>
<br>

<p><strong>embedding 是什么</strong></p>
<p>Embedding其实是一种思想，主要目的是将稀疏的向量(如one-hot编码)表示转换成稠密的向量，下图直观的显示了one-hot编码和Embedding表示的区别于联系，即Embedding相当于是对one-hot做了平滑，而onehot相当于是对Embedding做了max pooling。<br><img src="Embedding.jpg" alt="embdding"></p>
<p><strong>常见的Embedding技术有哪些？</strong></p>
<p>目前主要三大类：</p>
<ul>
<li>text embedding</li>
<li>image embedding</li>
<li>graph embedding</li>
</ul>
<p>在推荐系统领域，text embedding技术是目前使用最多的embedding技术，对于文本特征可以直接使用该技术，对于非文本的id类特征，可以先将其转化成id序列再使用text embedding的技术获取id的embedding再做召回。</p>
<p>常见的text Embedding的技术有：</p>
<ul>
<li>静态向量：word2vec, fasttext, glove</li>
<li>动态向量：ELMO, GPT, BERT</li>
</ul>
<p>对于image embedding其实主要是对于有图或者视频的特征，目前计算机视觉模型已经发展的比较成熟了，对于图像与视频的识别都有效果比较好的模型，大部分都是卷积模块通过各种连接技巧搭建的高效模型，可以使用现有的预训练模型提取图像或者视频的向量特征，然后用于召回。</p>
<p>对于社交网络相关的推荐，进行推荐的用户与用于之间或者商品之间天然的存在某种复杂的图结构的关系，如何利用图中节点与节点之间的关系对其进行向量化是非常关键的，在这种场景下基于序列的text embedding和基于卷积模型的image embedding都显得力不从心，在这样的背景下Graph Embedding逐渐在推荐系统中流行起来。经典的Graph Embedding模型有, Deep Walk, Node2Vec，LINE以及比较新的阿里巴巴2018年公布的EGES graph Embedding模型。</p>
<ol start="4">
<li>参考文献：</li>
</ol>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/143763320">推荐系统 embedding 技术实践总结</a></li>
<li><a href="https://blog.csdn.net/luanfenlian0992/article/details/107416438">推荐系统召回策略之多路召回与Embedding召回</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>WSL2安装Ubuntu</title>
    <url>/article/WSL2_Ubuntu/</url>
    <content><![CDATA[<h1 id="系统更新至预览版"><a href="#系统更新至预览版" class="headerlink" title="系统更新至预览版"></a>系统更新至预览版<a href="#系统更新至预览版" class="header-anchor">#</a></h1><ol>
<li><p>加入Windows Insider Program</p>
<p> <a href="https://insider.windows.com/en-us/getting-started">链接</a></p>
<p> <img src="wip.png" alt="图片" title="打开后显示"></p>
</li>
<li><p>注册加入完成后，前往【开始】菜单&gt;【设置】&gt;【更新和安全】&gt;【Windows 预览体验计划】，选择【开始】，然后点击【确认】。</p>
<p> <img src="update.png" alt="图片" title="打开后显示"><br> <img src="choose.png" alt="图片" title="打开后显示"><br> <img src="microsoft_login.png" alt="图片" title="打开后显示"></p>
</li>
<li><p>漫长的等待，等待过程中如果出现太久旋转没动静，可反复取消-选择账户，几次下来一般就可以了。随后使用加入Windows Insider Program时注册的账号密码，之后出现</p>
<p> <img src="dev.png" alt="图片" title="打开后显示"><br> 选择dev渠道，然后立即重启。</p>
</li>
<li><p>前往【开始】菜单&gt;【设置】&gt;【更新和安全】&gt;【Windows 更新】，下载更新完window，<br>选择【检查更新】，然后耐心等待最新 Windows 10 预览版的下载和安装。</p>
<p> <img src="update_wid.png" alt="图片" title="打开后显示"></p>
</li>
<li><p>检查系统更新成功与否</p>
<p> win+R-&gt;winver:<br> <img src="version.png" alt="图片" title="打开后显示"><br> 确认这里的os内部版本和第四步下载的版本一致</p>
 <span id="more"></span></li>
</ol>
<h1 id="安装驱动"><a href="#安装驱动" class="headerlink" title="安装驱动"></a>安装驱动<a href="#安装驱动" class="header-anchor">#</a></h1><ol>
<li><p>前往<a href="https://developer.nvidia.com/cuda/wsl">链接</a></p>
<p> <img src="driver.png" alt="图片" title="打开后显示"></p>
</li>
<li><p>下载完成后，正常win程序安装</p>
</li>
</ol>
<h1 id="安装wsl2"><a href="#安装WSL2" class="headerlink" title="安装WSL2"></a>安装WSL2<a href="#安装wsl2" class="header-anchor">#</a></h1><p>按照官方说法，使用预览版会有简单操作，但我是在未使用预览版时安装的，所以仅供参考。</p>
<ol>
<li><p>管理员身份运行power shell</p>
<p> 如果出现以下问题：<br> <img src="problem.png" alt="图片" title="打开后显示"><br> 则执行<code>set-ExecutionPolicy RemoteSigned</code><br> 成功结果为：<br> <img src="success.png" alt="图片" title="打开后显示"><br> 如果没有出现上述问题，则执行<code>dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</code>开启子系统<br> <img src="subsystem.png" alt="图片" title="打开后显示"><br> 然后，执行<code>dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</code>开启虚拟机<br> <img src="vm.png" alt="图片" title="打开后显示"><br> <font color="red">随后重启计算机！</font></p>
</li>
<li><p>安装WSL内核更新包<a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi">链接</a></p>
</li>
<li><p>将wsl2设置为默认版本：<code>set --set-default-version 2</code></p>
</li>
</ol>
<h1 id="安装ubuntu1804"><a href="#安装ubuntu18-04" class="headerlink" title="安装ubuntu18.04"></a>安装ubuntu18.04<a href="#安装ubuntu1804" class="header-anchor">#</a></h1><ol>
<li><p>打开Microsoft store,搜索ubuntu18,点击获取，等待下载安装，安装完成后，点击右上角的启动按钮，会出现下面操作；设置好用户名及密码，子系统安装完成。<br><img src="ubuntu.png" alt="图片" title="打开后显示"></p>
</li>
<li><p>安装完成后，运行<code>wsl --list --verbose</code><br><img src="wsl_lv.png" alt="图片" title="打开后显示"></p>
</li>
<li><p>运行</p>
<ul>
<li>点击ubuntu图标<br>  <img src="run_1.png" alt="图片" title="打开后显示"></li>
<li>在power shell中运行<code>wsl</code><br>  <img src="run_2.png" alt="图片" title="打开后显示"></li>
</ul>
</li>
</ol>
<h1 id="安装cuda-toolkit在ubuntu环境下"><a href="#安装cuda-toolkit-在ubuntu环境下" class="headerlink" title="安装cuda toolkit(在ubuntu环境下)"></a>安装cuda toolkit(在ubuntu环境下)<a href="#安装cuda-toolkit在ubuntu环境下" class="header-anchor">#</a></h1><ol>
<li><p>配置cuda网络仓库<br> 依次执行</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub</span><br><span class="line"></span><br><span class="line">sudo sh -c &#x27;echo &quot;deb http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64 /&quot; &gt; /etc/apt/sources.list.d/cuda.list&#x27;</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></li>
<li><p>安装cuda</p>
<p> 执行<code>sudo apt-get install -y cuda-toolkit-11-0</code></p>
</li>
</ol>
<h1 id="安装docker和nvidia-docker"><a href="#安装docker和nvidia-docker" class="headerlink" title="安装docker和nvidia-docker"></a>安装docker和nvidia-docker<a href="#安装docker和nvidia-docker" class="header-anchor">#</a></h1><ol>
<li><p>安装docker-ce:<code>curl https://get.docker.com | sh</code></p>
</li>
<li><p>安装nvidia-docker2:</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">distribution=$(. /etc/os-release;echo $ID$VERSION_ID)</span><br><span class="line"></span><br><span class="line">curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -</span><br><span class="line"></span><br><span class="line">curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list</span><br><span class="line"></span><br><span class="line">curl -s -L https://nvidia.github.io/libnvidia-container/experimental/$distribution/libnvidia-container-experimental.list | sudo tee /etc/apt/sources.list.d/libnvidia-container-experimental.list</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get install -y nvidia-docker2</span><br><span class="line"></span><br><span class="line">sudo gpasswd -a username docker ###username 为设置的Ubuntu用户名</span><br><span class="line"></span><br><span class="line">newgrp docker</span><br></pre></td></tr></table></figure></li>
<li><p>完成安装</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo service docker stop</span><br><span class="line"></span><br><span class="line">sudo service docker start</span><br></pre></td></tr></table></figure></li>
<li><p>验证安装<br> 执行<code>docker run --runtime=nvidia  --rm -it --name tensorflow-1.14.0 tensorflow/tensorflow:1.14.0-gpu-py3</code></p>
<p> 然后执行</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python</span><br><span class="line">import tensorflow as tf</span><br><span class="line">print(tf.test.is_gpu_available()) ###输出True</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference<a href="#reference" class="header-anchor">#</a></h1><ol>
<li><a href="https://docs.nvidia.com/cuda/wsl-user-guide/index.html">CUDA on WSL :: CUDA Toolkit Documentation (nvidia.com)</a></li>
</ol>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>win10</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>algorithm</title>
    <url>/article/algorithm/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>all_CN</title>
    <url>/article/all-CN/</url>
    <content><![CDATA[<h1 id="深度可分离卷积"><a href="#深度可分离卷积" class="headerlink" title="深度可分离卷积"></a>深度可分离卷积<a href="#深度可分离卷积" class="header-anchor">#</a></h1><p>假设输入是$D_{f^i} * D_{f^i} * M$ ,输出图大小是$D_{f^o}*D_{f^o}<em>N$, 卷积核大小是$D_k</em>D_k$</p>
<h2 id="普通卷积操作"><a href="#普通卷积操作" class="headerlink" title="普通卷积操作"></a>普通卷积操作<a href="#普通卷积操作" class="header-anchor">#</a></h2><p>输入图在经过卷积核（$D_k<em>D_k</em>M$）后输出为目标输出大小，但此时仅为$D_{f^o}*D_{f^o} * 1$ ,需要$N$个这样的操作才能得到目标特征图。</p>
<p>此时所需要的计算量有$D_{f^o}<em>D_{f^o}<em>D_k</em>D_k</em>M*N$。</p>
<span id="more"></span>

<h2 id="深度可分离卷积"><a href="#深度可分离卷积-1" class="headerlink" title="深度可分离卷积"></a>深度可分离卷积<a href="#深度可分离卷积" class="header-anchor">#</a></h2><p>输入图首先经过$M$个$D_k<em>D_k</em>1$的卷积核，这样可以得到$D_{f^o}*D_{f^o}*M$的特征图，其中$M$是堆叠出来的，此步骤叫做<code>depthwise convolution</code> 。</p>
<p>再经过$N$个$1<em>1</em>M$的卷积核，就可以得到$D_{f^o}*D_{f^o} *N$的特征图。此操作为<code>pointwise convolution</code>。</p>
<p>可以看出，深度可分离卷积可分为逐层卷积和逐点卷积两个步骤，</p>
<p>逐层卷积：</p>
<p><img src="image-20210906145026434.png" alt="image-20210906145026434"></p>
<p>逐点卷积：</p>
<p><img src="image-20210906145039602.png" alt="image-20210906145039602"></p>
<p><img src="image-20210906145050415.png" alt="image-20210906145050415"></p>
<p>计算量分步骤计算分别为$D_k<em>D_k</em>M<em>D_{f^o}<em>D_{f^o}$和$N</em>1</em>1<em>M</em>D_{f^o}*D_{f^o}$。</p>
<p>则相比较与常规卷积$\frac {D_k<em>D_k</em>M<em>D_{f^o}<em>D_{f^o}+N</em>M</em>D_{f^o}<em>D_{f^o}}{D_{f^o}<em>D_{f^o}<em>D_k</em>D_k</em>M</em>N} = \frac {1}{N} + \frac {1}{D_k^2}$</p>
<p>针对一般$D_k=3$和$N$远大于9的情况，可知压缩比略小于9。</p>
<h2 id="速度思考"><a href="#速度思考" class="headerlink" title="速度思考"></a>速度思考<a href="#速度思考" class="header-anchor">#</a></h2><p>在速度方面，经过大量实验，我发现在算力足够的GPU平台上，MobileNet不会带来任何速度上的提升（有时甚至是下降的），然而在计算能力有限的平台上，MobileNet能让速度提升三倍以上。</p>
<p><strong>深度可分离卷积将一个标准卷积分割成了两个卷积（逐深度，逐点），因此减小了参数量，对应也减小了总计算量。</strong></p>
<p>好的，在上面的话中，我们可以发现一个有趣的事实：深度可分离卷积的<strong>总计算量变小了</strong>，但深度可分离卷积的<strong>层数变多了</strong>。</p>
<p>而结合我们对GPU和CPU的认识：GPU是并行处理大规模数据（矩阵内积）的运算平台，而CPU则倾向于对数据串行计算（一个一个算）。</p>
<p>因此，若GPU的显存足够大（干脆假设无限大好了），因为每层的计算都可以并行一次处理，则此时<strong>总运算时间的主导因素是网络的层数。</strong></p>
<p>而对于缺乏并行能力的CPU，总的运算时间的主导因素则是<strong>总计算量有关。</strong></p>
<h2 id="pytorch实现"><a href="#pytorch实现" class="headerlink" title="pytorch实现"></a>pytorch实现<a href="#pytorch实现" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import torch</span><br><span class="line">import torch.nn as nn</span><br><span class="line">import torch.nn.functional as F</span><br><span class="line"></span><br><span class="line">class Block(nn.Module):</span><br><span class="line">    &quot;Depthwise conv + Pointwise conv&quot;</span><br><span class="line">    def __init__(self, in_channels, out_channels, stride=1):</span><br><span class="line">        super(Block, self).__init__()</span><br><span class="line">        self.conv1 = nn.Conv2d(in_channels, in_channels, kernel_size=3, stride=2, padding=1, groups=in_channels, bias=False)</span><br><span class="line">        self.bn1 = nn.BatchNorm2d(in_channels)</span><br><span class="line">        self.conv2 = nn.Conv2d(in_channels, out_channels, kernel_size=1, stride=1, padding=0, bias=False)</span><br><span class="line">        self.bn2 = nn.BatchNorm2d(out_channels)</span><br><span class="line"></span><br><span class="line">    def forward(self, x):</span><br><span class="line">        x = self.conv1(x)</span><br><span class="line">        x = self.bn1(x)</span><br><span class="line">        x = F.relu(x)</span><br><span class="line">        x = self.conv2(x)</span><br><span class="line">        x = self.bn2(x)</span><br><span class="line">        x = F.relu(x)</span><br><span class="line">        return x</span><br><span class="line"></span><br><span class="line">input = torch.randn(32, 3, 224, 224)</span><br><span class="line">block = Block(3, 64)</span><br><span class="line">out = block(input)</span><br><span class="line">print(out.size())</span><br></pre></td></tr></table></figure>



<h1 id="分组卷积"><a href="#分组卷积" class="headerlink" title="分组卷积"></a>分组卷积<a href="#分组卷积" class="header-anchor">#</a></h1><p><img src="image-20210906151614062.png" alt="image-20210906151614062"></p>
<p><strong>Group Convolution</strong>顾名思义，则是对输入feature map进行分组，然后每组分别卷积。假设输入feature map的尺寸仍为$C∗H∗W$，输出feature map的数量为$N$个，如果设定要分成$G$个groups，则每组的输入feature map数量为$\frac {C}{G}$，每组的输出feature map数量为$\frac {N}{G}$，每个卷积核的尺寸为$\frac CG∗K∗K$，卷积核的总数仍为$N$个，每组的卷积核数量为$\frac NG$，卷积核只与其同组的输入map进行卷积，卷积核的总参数量为$N∗\frac CG∗K∗K$，可见，<strong>总参数量减少为原来的</strong> $\frac 1G$，其连接方式如上图右所示，group1输出map数为2，有2个卷积核，每个卷积核的channel数为4，与group1的输入map的channel数相同，卷积核只与同组的输入map卷积，而不与其他组的输入map卷积。</p>
<h2 id="分组卷积的用途"><a href="#分组卷积的用途" class="headerlink" title="分组卷积的用途"></a>分组卷积的用途<a href="#分组卷积的用途" class="header-anchor">#</a></h2><ol>
<li>减少参数量， 分成$G$组，则该层的参数量减少为原来的$\frac 1G$</li>
<li>可看成structured sparse，每个卷积核的尺寸由$C<em>K</em>K$变为$\frac CG<em>K</em>K$，可以看作将其余$(C-\frac CG)<em>K</em>K$的参数视为0，有时可以取得不错的效果(正则化)。</li>
<li>当分组数量等于输入map数量，输出map数量也等于输入map数量，相当于<code>depthwise convolution</code></li>
<li>如果满足3的同时，卷积核大小与输入尺寸相同，则输出$C<em>1</em>1$的向量，此时为<code>global depthwise convolution</code>，可视为全局加权池化，与GAP( global average pooling)的不同之处在于，GDC给每个位置赋予可学习的权重，而GAP是权重相同取个平均。</li>
</ol>
<h1 id="转置卷积"><a href="#转置卷积" class="headerlink" title="转置卷积"></a>转置卷积<a href="#转置卷积" class="header-anchor">#</a></h1><h1 id="空洞卷积"><a href="#空洞卷积" class="headerlink" title="空洞卷积"></a>空洞卷积<a href="#空洞卷积" class="header-anchor">#</a></h1><p>作用：</p>
<ol>
<li>增大感受野</li>
<li>捕获多尺度上下文信息</li>
</ol>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料<a href="#参考资料" class="header-anchor">#</a></h1><p><a href="https://mp.weixin.qq.com/s/BDlYXOjaNuBsLkfbQKRGLA">一文读懂 12种卷积方法（含1x1卷积、转置卷积和深度可分离卷积等） (qq.com)</a></p>
<p><a href="https://www.cnblogs.com/shine-lee/p/10243114.html">Group Convolution分组卷积，以及Depthwise Convolution和Global Depthwise Convolution - shine-lee - 博客园 (cnblogs.com)</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/208519425">通过分组卷积的思想，巧妙的代码实现动态卷积(Dynamic Convolution) - 知乎 (zhihu.com)</a></p>
]]></content>
  </entry>
  <entry>
    <title>coroutine</title>
    <url>/article/coroutine/</url>
    <content><![CDATA[<h3 id="asyncio-yield-from"><a href="#asyncio-yield-from" class="headerlink" title="asyncio + yield from"></a>asyncio + yield from<a href="#asyncio-yield-from" class="header-anchor">#</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#-*- coding:utf8 -*-</span><br><span class="line">import asyncio</span><br><span class="line"></span><br><span class="line">@asyncio.coroutine</span><br><span class="line">def test(i):</span><br><span class="line">    print(&#x27;test_1&#x27;, i)</span><br><span class="line">    r = yield from asyncio.sleep(1)</span><br><span class="line">    print(&#x27;test_2&#x27;, i)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    tasks = [test(i) for i in range(3)]</span><br><span class="line">    loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line">    loop.close()</span><br></pre></td></tr></table></figure>

<p><code>@asyncio.coroutine</code>把一个generator标记为coroutine类型，然后就把这个coroutine扔到EventLoop中执行。test()会首先打印出test_1，然后<code>yield from</code>语法可以让我们方便地调用另一个generator。由于<code>asyncio.sleep()</code>也是一个coroutine，所以线程不会等待<code>asyncio.sleep()</code>，而是直接中断并执行下一个消息循环。当<code>asyncio.sleep()</code>返回时，线程就可以从<code>yield from</code>拿到返回值（此处是None），然后接着执行下一行语句。把<code>asyncio.sleep(1)</code>看成是一个耗时1秒的IO操作，在此期间主线程并未等待，而是去执行EventLoop中其他可以执行的coroutine了，因此可以实现并发执行。</p>
<span id="more"></span>

<h3 id="asyncio-asyncawait"><a href="#asyncio-async-await" class="headerlink" title="asyncio + async/await"></a>asyncio + async/await<a href="#asyncio-asyncawait" class="header-anchor">#</a></h3><p>为了简化并更好地标识异步IO，从Python3.5开始引入了新的语法async和await，可以让coroutine的代码更简洁易读。请注意，async和await是coroutine的新语法，使用新语法只需要做两步简单的替换：</p>
<ul>
<li>把@asyncio.coroutine替换为async</li>
<li>把yield from替换为await</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#-*- coding:utf8 -*-000</span><br><span class="line">import asyncio</span><br><span class="line"></span><br><span class="line">async def test(i):</span><br><span class="line">    print(&#x27;test_1&#x27;, i)</span><br><span class="line">    await asyncio.sleep(1)</span><br><span class="line">    print(&#x27;test_2&#x27;, i)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    tasks = [test(i) for i in range(3)]</span><br><span class="line">    loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line">    loop.close()</span><br></pre></td></tr></table></figure>

<h2 id="gevent"><a href="#Gevent" class="headerlink" title="Gevent"></a>Gevent<a href="#gevent" class="header-anchor">#</a></h2><p>Gevent是一个基于Greenlet实现的网络库，通过greenlet实现协程。基本思想是一个greenlet就认为是一个协程，当一个greenlet遇到IO操作的时候，比如访问网络，就会自动切换到其他的greenlet，等到IO操作完成，再在适当的时候切换回来继续执行。由于IO操作非常耗时，经常使程序处于等待状态，有了gevent为我们自动切换协程，就保证总有greenlet在运行，而不是等待IO操作。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#-*- coding:utf8 -*-</span><br><span class="line">import gevent</span><br><span class="line"></span><br><span class="line">def test(n):</span><br><span class="line">    for i in range(n):</span><br><span class="line">        print(gevent.getcurrent(), i)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    g1 = gevent.spawn(test, 3)</span><br><span class="line">    g2 = gevent.spawn(test, 3)</span><br><span class="line">    g3 = gevent.spawn(test, 3)</span><br><span class="line"></span><br><span class="line">    g1.join()</span><br><span class="line">    g2.join()</span><br><span class="line">    g3.join()</span><br></pre></td></tr></table></figure>

<p>可以看到3个greenlet是依次运行而不是交替运行。要让greenlet交替运行，可以通过<code>gevent.sleep()</code>交出控制权:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def test(n):</span><br><span class="line">    for i in range(n):</span><br><span class="line">        print(gevent.getcurrent(), i)</span><br><span class="line">        gevent.sleep(1)</span><br></pre></td></tr></table></figure>

<p>当然在实际的代码里，我们不会用<code>gevent.sleep()</code>去切换协程，而是在执行到IO操作时gevent会自动完成，所以gevent需要将Python自带的一些标准库的运行方式由阻塞式调用变为协作式运行。这一过程在启动时通过monkey patch完成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#-*- coding:utf8 -*-</span><br><span class="line">from gevent import monkey; monkey.patch_all()</span><br><span class="line">from urllib import request</span><br><span class="line">import gevent</span><br><span class="line"></span><br><span class="line">def test(url):</span><br><span class="line">    print(&#x27;Get: %s&#x27; % url)</span><br><span class="line">    response = request.urlopen(url)</span><br><span class="line">    content = response.read().decode(&#x27;utf8&#x27;)</span><br><span class="line">    print(&#x27;%d bytes received from %s.&#x27; % (len(content), url))</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    gevent.joinall([</span><br><span class="line">        gevent.spawn(test, &#x27;http://httpbin.org/ip&#x27;),</span><br><span class="line">        gevent.spawn(test, &#x27;http://httpbin.org/uuid&#x27;),</span><br><span class="line">        gevent.spawn(test, &#x27;http://httpbin.org/user-agent&#x27;)</span><br><span class="line">    ])</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[CONSUMER] start&quot;</span>)</span><br><span class="line">    r = <span class="string">&#x27;start&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        n = <span class="keyword">yield</span> r</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> n:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;n is empty&quot;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[CONSUMER] Consumer is consuming %s&quot;</span> % n)</span><br><span class="line">        r = <span class="string">&quot;200 ok&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span>(<span class="params">c</span>):</span></span><br><span class="line">    <span class="comment"># 启动generator</span></span><br><span class="line">    start_value = c.send(<span class="literal">None</span>)</span><br><span class="line">    <span class="built_in">print</span>(start_value)</span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; <span class="number">3</span>:</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[PRODUCER] Producer is producing %d&quot;</span> % n)</span><br><span class="line">        r = c.send(n)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[PRODUCER] Consumer return: %s&#x27;</span> % r)</span><br><span class="line">    <span class="comment"># 关闭generator</span></span><br><span class="line">    c.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建生成器</span></span><br><span class="line">c = consumer()</span><br><span class="line"><span class="comment"># 传入generator</span></span><br><span class="line">producer(c)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 子生成器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">n</span>):</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; n:</span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 委派生成器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_yield_from</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test_yield_from start&quot;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> test(n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test_yield_from end&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> test_yield_from(<span class="number">3</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>



<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料<a href="#参考资料" class="header-anchor">#</a></h1><p><a href="https://zhuanlan.zhihu.com/p/95722895">Python异步IO操作</a></p>
<p><a href="https://www.jianshu.com/p/b5e347b3a17c">Python黑魔法 — 异步IO（ asyncio） 协程 </a></p>
<p><a href="https://cloud.tencent.com/developer/article/1590280">python 多进程和协程配合使用</a></p>
<p><a href="https://blog.csdn.net/weixin_36338224/article/details/109288327?spm=1001.2014.3001.5501">(21条消息) 实战异步IO框架：asyncio 下篇_王炳明-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/weixin_36338224/article/details/109282596?spm=1001.2014.3001.5501">(21条消息) 深入异步IO框架：asyncio 中篇_王炳明-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/weixin_36338224/article/details/109282563?spm=1001.2014.3001.5501">(21条消息) 初识异步IO框架：asyncio 上篇_王炳明-CSDN博客_异步io框架</a></p>
]]></content>
  </entry>
  <entry>
    <title>anchor_free_or_anchor_based</title>
    <url>/article/anchor-free-or-anchor-based/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>decorator</title>
    <url>/article/decorator/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E8%A3%85%E9%A5%B0%E5%99%A8">什么是装饰器</a></li>
<li><a href="#%E7%AE%80%E5%8D%95%E8%A3%85%E9%A5%B0%E5%99%A8">简单装饰器</a></li>
<li><a href="#%E9%AB%98%E7%BA%A7%E8%A3%85%E9%A5%B0%E5%99%A8">高级装饰器</a><ul>
<li><a href="#%E5%9F%BA%E4%BA%8E%E5%87%BD%E6%95%B0%E7%9A%84%E5%B8%A6%E5%8F%82%E8%A3%85%E9%A5%B0%E5%99%A8">基于函数的带参装饰器</a></li>
<li><a href="#%E5%9F%BA%E4%BA%8E%E7%B1%BB%E7%9A%84%E4%B8%8D%E5%B8%A6%E5%8F%82%E8%A3%85%E9%A5%B0%E5%99%A8">基于类的不带参装饰器</a></li>
<li><a href="#%E5%9F%BA%E4%BA%8E%E7%B1%BB%E7%9A%84%E5%B8%A6%E5%8F%82%E6%95%B0%E8%A3%85%E9%A5%B0%E5%99%A8">基于类的带参数装饰器</a></li>
</ul>
</li>
<li><a href="#%E5%86%85%E7%BD%AE%E8%A3%85%E9%A5%B0%E5%99%A8">内置装饰器</a><ul>
<li><a href="#classmethod">@classmethod</a></li>
<li><a href="#staticmethod">@staticmethod</a></li>
<li><a href="#property">@property</a></li>
<li><a href="#wraps">@wraps</a></li>
<li><a href="#python%E5%86%85%E7%BD%AE%E7%B1%BB%E5%B1%9E%E6%80%A7">python内置类属性</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99">参考资料</a></li>
</ul>
<!-- tocstop -->

</div>





<h1 id="什么是装饰器"><a href="#什么是装饰器" class="headerlink" title="什么是装饰器"></a>什么是装饰器<a href="#什么是装饰器" class="header-anchor">#</a></h1><p>一个decorator只是一个带有一个函数作为参数并返回一个替换函数的闭包。<br>简单示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 未使用装饰器时</span><br><span class="line">def outer(some_func):</span><br><span class="line">	def inner():</span><br><span class="line">		print (&quot;before some_func&quot;)</span><br><span class="line">		ret = some_func() # 1</span><br><span class="line">		return ret + 1</span><br><span class="line">	return inner</span><br><span class="line">def foo():</span><br><span class="line">	return 1</span><br><span class="line">decorated = outer(foo)</span><br><span class="line">decorated()</span><br><span class="line"></span><br><span class="line">#使用装饰器时</span><br><span class="line">def outer(some_func):</span><br><span class="line">	def inner():</span><br><span class="line">		print (&quot;before some_func&quot;)</span><br><span class="line">		ret = some_func() # 1</span><br><span class="line">		return ret + 1</span><br><span class="line">	return inner</span><br><span class="line">@outer</span><br><span class="line">def foo():</span><br><span class="line">	return 1</span><br><span class="line"></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="简单装饰器"><a href="#简单装饰器" class="headerlink" title="简单装饰器"></a>简单装饰器<a href="#简单装饰器" class="header-anchor">#</a></h1><p>引入装饰器会便于开发，便于代码复用</p>
<p>简单示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def say_hello():</span><br><span class="line">    print(&quot;[DEBUG]: enter say_hello()&quot;)</span><br><span class="line">    print(&quot;hello!&quot;)</span><br><span class="line"></span><br><span class="line">def say_goodbye():</span><br><span class="line">    print( &quot;[DEBUG]: enter say_goodbye()&quot;)</span><br><span class="line">    print( &quot;hello!&quot;)</span><br><span class="line">    </span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    say_hello()</span><br><span class="line">    say_goodbye()</span><br></pre></td></tr></table></figure>

<p>进一步</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def debug():</span><br><span class="line">    import inspect</span><br><span class="line">    caller_name = inspect.stack()[1][3]</span><br><span class="line">    print(&quot;[DEBUG]: enter &#123;&#125;()&quot;.format(caller_name)  ) </span><br><span class="line"></span><br><span class="line">def say_hello():</span><br><span class="line">    debug()</span><br><span class="line">    print(&quot;hello!&quot;)</span><br><span class="line"></span><br><span class="line">def say_goodbye():</span><br><span class="line">    debug()</span><br><span class="line">    print( &quot;goodbye!&quot;)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    say_hello()</span><br><span class="line">    say_goodbye()</span><br></pre></td></tr></table></figure>

<p>但依然每个业务函数都需要调用一次<code>debug()</code>函数</p>
<p>使用装饰器:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def debug(func):</span><br><span class="line">    def wrapper():</span><br><span class="line">        print(&quot;[DEBUG]: enter &#123;&#125;()&quot;.format(func.__name__))</span><br><span class="line">        return func()</span><br><span class="line">    return wrapper</span><br><span class="line"></span><br><span class="line">@debug</span><br><span class="line">def say_hello():</span><br><span class="line">    print( &quot;hello!&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这个装饰器依然存在一个问题， 不能引入参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def debug(func):</span><br><span class="line">    def wrapper(something):  # 指定一毛一样的参数</span><br><span class="line">        print &quot;[DEBUG]: enter &#123;&#125;()&quot;.format(func.__name__)</span><br><span class="line">        return func(something)</span><br><span class="line">    return wrapper  # 返回包装过函数</span><br><span class="line"></span><br><span class="line">@debug</span><br><span class="line">def say(something):</span><br><span class="line">    print &quot;hello &#123;&#125;!&quot;.format(something)</span><br></pre></td></tr></table></figure>

<p>那么如果参数不定的时候呢？<code>(*args, **kwargs)</code>就可以派上用场了，其中<code>*args</code>只是表明在函数定义中位置参数应该保存在变量<code>args</code>中, *表示<code>iterables</code>和位置参数,**表示dictionaries &amp; key/value对</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def debug(func):</span><br><span class="line">    def wrapper(*args, **kwargs):  # 指定宇宙无敌参数</span><br><span class="line">        print &quot;[DEBUG]: enter &#123;&#125;()&quot;.format(func.__name__)</span><br><span class="line">        print &#x27;Prepare and say...&#x27;,</span><br><span class="line">        return func(*args, **kwargs)</span><br><span class="line">    return wrapper  # 返回</span><br><span class="line"></span><br><span class="line">@debug</span><br><span class="line">def say(something):</span><br><span class="line">    print &quot;hello &#123;&#125;!&quot;.format(something)</span><br></pre></td></tr></table></figure>

<p>至此，简单的装饰器完成！</p>
<h1 id="高级装饰器"><a href="#高级装饰器" class="headerlink" title="高级装饰器"></a>高级装饰器<a href="#高级装饰器" class="header-anchor">#</a></h1><h2 id="基于函数的带参装饰器"><a href="#基于函数的带参装饰器" class="headerlink" title="基于函数的带参装饰器"></a>基于函数的带参装饰器<a href="#基于函数的带参装饰器" class="header-anchor">#</a></h2><p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def logging(level): # 传递装饰器参数</span><br><span class="line">    def wrapper(func): # 调用函数名</span><br><span class="line">        def inner_wrapper(*args, **kwargs): # 函数参数</span><br><span class="line">            print &quot;[&#123;level&#125;]: enter function &#123;func&#125;()&quot;.format(</span><br><span class="line">                level=level,</span><br><span class="line">                func=func.__name__)</span><br><span class="line">            return func(*args, **kwargs)</span><br><span class="line">        return inner_wrapper</span><br><span class="line">    return wrapper</span><br><span class="line"></span><br><span class="line">@logging(level=&#x27;INFO&#x27;)</span><br><span class="line">def say(something):</span><br><span class="line">    print &quot;say &#123;&#125;!&quot;.format(something)</span><br><span class="line"></span><br><span class="line"># 如果没有使用@语法，等同于</span><br><span class="line"># say = logging(level=&#x27;INFO&#x27;)(say)</span><br><span class="line"></span><br><span class="line">@logging(level=&#x27;DEBUG&#x27;)</span><br><span class="line">def do(something):</span><br><span class="line">    print &quot;do &#123;&#125;...&quot;.format(something)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    say(&#x27;hello&#x27;)</span><br><span class="line">    do(&quot;my work&quot;)</span><br></pre></td></tr></table></figure>

<p>你可以这么理解，当带参数的装饰器被打在某个函数上时，比如<code>@logging(level=&#39;DEBUG&#39;)</code>，它其实是一个函数，会马上被执行，只要这个它返回的结果是一个装饰器时，那就没问题。</p>
<h2 id="基于类的不带参装饰器"><a href="#基于类的不带参装饰器" class="headerlink" title="基于类的不带参装饰器"></a>基于类的不带参装饰器<a href="#基于类的不带参装饰器" class="header-anchor">#</a></h2><p>装饰器函数其实是这样一个接口约束，它必须接受一个callable对象作为参数，然后返回一个callable对象。在Python中一般callable对象都是函数，但也有例外。只要某个对象重载了<code>__call__()</code>方法，那么这个对象就是callable的。</p>
<p>装饰器要求接受一个callable对象，并返回一个callable对象（不太严谨，详见后文）。那么用类来实现也是也可以的。我们可以让类的构造函数<code>__init__()</code>接受一个函数，然后重载<code>__call__()</code>并返回一个函数，也可以达到装饰器函数的效果。</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class logging(object):</span><br><span class="line">    def __init__(self, func): # 接受函数</span><br><span class="line">        self.func = func</span><br><span class="line"></span><br><span class="line">    def __call__(self, *args, **kwargs): # 函数参数</span><br><span class="line">        print &quot;[DEBUG]: enter function &#123;func&#125;()&quot;.format(</span><br><span class="line">            func=self.func.__name__)</span><br><span class="line">        return self.func(*args, **kwargs)</span><br><span class="line">@logging</span><br><span class="line">def say(something):</span><br><span class="line">    print &quot;say &#123;&#125;!&quot;.format(something)</span><br></pre></td></tr></table></figure>



<h2 id="基于类的带参数装饰器"><a href="#基于类的带参数装饰器" class="headerlink" title="基于类的带参数装饰器"></a>基于类的带参数装饰器<a href="#基于类的带参数装饰器" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class logging(object):</span><br><span class="line">    def __init__(self, level=&#x27;INFO&#x27;):</span><br><span class="line">        self.level = level</span><br><span class="line">        </span><br><span class="line">    def __call__(self, func): # 接受函数</span><br><span class="line">        def wrapper(*args, **kwargs):</span><br><span class="line">            print &quot;[&#123;level&#125;]: enter function &#123;func&#125;()&quot;.format(</span><br><span class="line">                level=self.level,</span><br><span class="line">                func=func.__name__)</span><br><span class="line">            func(*args, **kwargs)</span><br><span class="line">        return wrapper  #返回函数</span><br><span class="line"></span><br><span class="line">@logging(level=&#x27;INFO&#x27;)</span><br><span class="line">def say(something):</span><br><span class="line">    print &quot;say &#123;&#125;!&quot;.format(something)</span><br></pre></td></tr></table></figure>



<h1 id="内置装饰器"><a href="#内置装饰器" class="headerlink" title="内置装饰器"></a>内置装饰器<a href="#内置装饰器" class="header-anchor">#</a></h1><h2 id="classmethod"><a href="#classmethod" class="headerlink" title="@classmethod"></a>@classmethod<a href="#classmethod" class="header-anchor">#</a></h2><p>类方法，不需要实例化，也不需要self参数，需要一个cls参数，可以用类名调用，也可以用对象来调用。</p>
<p>原则上，类方法是将类本身作为对象进行操作的方法。假设有个方法，且这个方法在逻辑上采用类本身作为对象来调用更合理，那么这个方法就可以定义为类方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class A:</span><br><span class="line">    &quot;&quot;&quot;docstring for A&quot;&quot;&quot;</span><br><span class="line">    # 类变量v</span><br><span class="line">    v = 0</span><br><span class="line"> </span><br><span class="line">    def __init__(self):</span><br><span class="line">        # __init__定义的为实例变量，属于类的实例</span><br><span class="line">        self.my_v = 10000000</span><br><span class="line"> </span><br><span class="line">    # 类方法需要使用@classmethod装饰器定义</span><br><span class="line">    @classmethod</span><br><span class="line">    # 类方法至少有一个形参,第一个形参用于绑定类,约定为:&#x27;cls&#x27;</span><br><span class="line">    def get_v(cls):</span><br><span class="line">        &quot;&quot;&quot;此方法为类方法,cls用于绑定调用此方法的类;此方法用于返回类变量v的值&quot;&quot;&quot;</span><br><span class="line">        return cls.v</span><br><span class="line"> </span><br><span class="line">    @classmethod</span><br><span class="line">    def set_v(cls, value):</span><br><span class="line">        cls.v = value</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    # 通过类实例来调用类方法</span><br><span class="line">    print(A.get_v())</span><br><span class="line">    A.set_v(100)</span><br><span class="line">    print(A.get_v())</span><br><span class="line"> </span><br><span class="line">    # 通过对象实例调用类方法</span><br><span class="line">    a = A()</span><br><span class="line">    print(a.get_v())</span><br><span class="line">    a.set_v(200)</span><br><span class="line">    print(a.get_v())</span><br><span class="line"> </span><br><span class="line">    # 访问实例属性</span><br><span class="line">    print(a.my_v)</span><br></pre></td></tr></table></figure>



<h2 id="staticmethod"><a href="#staticmethod" class="headerlink" title="@staticmethod"></a>@staticmethod<a href="#staticmethod" class="header-anchor">#</a></h2><p>静态方法，不需要实例化，不需要self和cls等参数，就跟使用普通的函数一样，只是封装在类中</p>
<p>静态方法是类中的函数，不需要实例。静态方法主要是用来存放逻辑性的代码，逻辑上属于类，但是和类本身没有关系，也就是说在静态方法中，不会涉及到类中的属性和方法的操作。可以理解为，静态方法是个独立的、单纯的函数，它仅仅托管于某个类的名称空间中，便于使用和维护。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Student:</span><br><span class="line">    &quot;&quot;&quot;描述学生的信息&quot;&quot;&quot;</span><br><span class="line">    count = 0</span><br><span class="line"> </span><br><span class="line">    def __init__(self, name, age, score):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.score = score</span><br><span class="line">        self.__class__.count += 1</span><br><span class="line"> </span><br><span class="line">    def print_info(self):</span><br><span class="line">        print(&quot;&#123;&#125;: age=&#123;&#125;, score=&#123;&#125;&quot;.format(self.name, self.age, self.score))</span><br><span class="line"> </span><br><span class="line">    @classmethod</span><br><span class="line">    def get_stu_number(cls):</span><br><span class="line">        &quot;&quot;&quot;只访问类变量，使用类方法即可&quot;&quot;&quot;</span><br><span class="line">        return cls.count</span><br><span class="line"> </span><br><span class="line">    @staticmethod</span><br><span class="line">    def average(students, kind):</span><br><span class="line">        &quot;&quot;&quot;不需要访问实例变量和类变量，仅仅是定义在类内的函数，使用静态方法即可&quot;&quot;&quot;</span><br><span class="line">        sum_kind = 0</span><br><span class="line">        for student in students:</span><br><span class="line">            sum_kind += student.__dict__[kind]</span><br><span class="line">        average = sum_kind // Student.get_stu_number()</span><br><span class="line">        return average</span><br><span class="line"> </span><br><span class="line">    @staticmethod</span><br><span class="line">    def add_stu_info():</span><br><span class="line">        &quot;&quot;&quot;一次性录入所有的学生信息，并以列表形式返回所有创建好的学生实例&quot;&quot;&quot;</span><br><span class="line">        students = []</span><br><span class="line">        while True:</span><br><span class="line">            name = input(&#x27;输入姓名:&#x27;) or &#x27;q&#x27;</span><br><span class="line">            if name == &#x27;q&#x27;:</span><br><span class="line">                break</span><br><span class="line">            age = int(input(&#x27;输入年龄:&#x27;))</span><br><span class="line">            score = int(input(&#x27;输入成绩:&#x27;))</span><br><span class="line">            student = Student(name, age, score)</span><br><span class="line">            students.append(student)</span><br><span class="line">        return students</span><br><span class="line"> </span><br><span class="line">    @classmethod</span><br><span class="line">    def remove_student(cls, name, students):</span><br><span class="line">        &quot;&quot;&quot;根据姓名删除列表中的学生&quot;&quot;&quot;</span><br><span class="line">        for student in students:</span><br><span class="line">            if student.name.lower() == name.lower():</span><br><span class="line">                stu_list.remove(student)</span><br><span class="line">                cls.count -= 1</span><br><span class="line"></span><br><span class="line">&gt;&gt; Student.average(stu_list, &#x27;score&#x27;)</span><br><span class="line">95</span><br><span class="line">&gt;&gt; Student.average(stu_list, &#x27;age&#x27;)</span><br><span class="line">13</span><br></pre></td></tr></table></figure>



<h2 id="property"><a href="#property" class="headerlink" title="@property"></a>@property<a href="#property" class="header-anchor">#</a></h2><p>属性方法，主要作用是将一个操作方法封装成一个属性,用户用起来就和操作普通属性完全一致,非常简单.定义时，在实例方法的基础上添加@property装饰器，并且只有一个self参数，调用时，不需要括号</p>
<p>@property 是经典类中的一种装饰器，新式类中具有三种:</p>
<ol>
<li>@property获取属性</li>
<li>@方法名.setter 修改属性</li>
<li>@方法名.deleter 删除属性</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Goods(object):</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        # 原价</span><br><span class="line">        self.original_price = 100</span><br><span class="line">        # 折扣</span><br><span class="line">        self.discount = 0.8</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    def price(self):</span><br><span class="line">        # 实际价格 = 原价*折扣</span><br><span class="line">        new_price = self.original_price*self.discount</span><br><span class="line">        return new_price</span><br><span class="line"></span><br><span class="line">    @price.setter</span><br><span class="line">    def price(self,value):</span><br><span class="line">        self.original_price = value</span><br><span class="line"></span><br><span class="line">    @price.deleter</span><br><span class="line">    def price(self):</span><br><span class="line">        del self.original_price</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = Goods()</span><br><span class="line"># print(obj.price)</span><br><span class="line">obj.price = 200</span><br><span class="line">print(obj.price)</span><br><span class="line">del obj.price  # 删除了类中的price属性若再次调用就会报错</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="wraps"><a href="#wraps" class="headerlink" title="@wraps"></a>@wraps<a href="#wraps" class="header-anchor">#</a></h2><p>Python装饰器（decorator）在实现的时候，被装饰后的函数其实已经是另外一个函数了（函数名等函数属性会发生改变），为了不影响，Python的functools包中提供了一个叫wraps的decorator来消除这样的副作用。写一个decorator的时候，最好在实现之前加上functools的wrap，它能保留原有函数的名称和docstring。</p>
<p>不加wraps:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#coding=utf-8</span><br><span class="line"># -*- coding=utf-8 -*- </span><br><span class="line">from functools import wraps   </span><br><span class="line">def my_decorator(func):</span><br><span class="line">    def wrapper(*args, **kwargs):</span><br><span class="line">        &#x27;&#x27;&#x27;decorator&#x27;&#x27;&#x27;</span><br><span class="line">        print(&#x27;Calling decorated function...&#x27;)</span><br><span class="line">        return func(*args, **kwargs)</span><br><span class="line">    return wrapper  </span><br><span class="line"> </span><br><span class="line">@my_decorator </span><br><span class="line">def example():</span><br><span class="line">    &quot;&quot;&quot;Docstring&quot;&quot;&quot; </span><br><span class="line">    print(&#x27;Called example function&#x27;)</span><br><span class="line">print(example.__name__, example.__doc__)</span><br><span class="line"></span><br><span class="line"># 输出</span><br><span class="line">(&#x27;wrapper&#x27;, &#x27;decorator&#x27;)</span><br><span class="line">[Finished in 0.2s]</span><br></pre></td></tr></table></figure>

<p>加上后：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#coding=utf-8</span><br><span class="line"># -*- coding=utf-8 -*- </span><br><span class="line">from functools import wraps   </span><br><span class="line">def my_decorator(func):</span><br><span class="line">    @wraps(func)</span><br><span class="line">    def wrapper(*args, **kwargs):</span><br><span class="line">        &#x27;&#x27;&#x27;decorator&#x27;&#x27;&#x27;</span><br><span class="line">        print(&#x27;Calling decorated function...&#x27;)</span><br><span class="line">        return func(*args, **kwargs)</span><br><span class="line">    return wrapper  </span><br><span class="line"> </span><br><span class="line">@my_decorator </span><br><span class="line">def example():</span><br><span class="line">    &quot;&quot;&quot;Docstring&quot;&quot;&quot; </span><br><span class="line">    print(&#x27;Called example function&#x27;)</span><br><span class="line">print(example.__name__, example.__doc__)</span><br><span class="line"># 输出</span><br><span class="line">(&#x27;example&#x27;, &#x27;Docstring&#x27;)</span><br><span class="line">[Finished in 0.5s]</span><br></pre></td></tr></table></figure>



<h2 id="python内置类属性"><a href="#python内置类属性" class="headerlink" title="python内置类属性"></a>python内置类属性<a href="#python内置类属性" class="header-anchor">#</a></h2><ol>
<li><p><code>__dict__ </code>: 类的属性（包含一个字典，由类的数据属性组成）</p>
</li>
<li><p><code>__doc__</code> :类的文档字符串</p>
</li>
<li><p><code>__name__</code>: 类名</p>
</li>
<li><p><code>__module__</code>: 类定义所在的模块（类的全名是’<strong>main</strong>.className’，如果类位于一个导入模块mymod中，那么className.<strong>module</strong> 等于 mymod）</p>
</li>
<li><p><code>__bases__</code> : 类的所有父类构成元素（包含了一个由所有父类组成的元组）</p>
</li>
</ol>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料<a href="#参考资料" class="header-anchor">#</a></h1><p><a href="https://www.cnblogs.com/cicaday/p/python-decorator.html">详解Python的装饰器</a></p>
<p><a href="http://ruanyifeng.com/blog/2017/02/fp-tutorial.html">函数式编程入门</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/269012332">装饰器八种写法</a></p>
]]></content>
  </entry>
  <entry>
    <title>deepcrossing</title>
    <url>/article/deepcrossing/</url>
    <content><![CDATA[<!-- @import "[TOC]" {cmd="toc" depthFrom=1 depthTo=6 orderedList=false} -->

<!-- code_chunk_output -->

<ul>
<li><a href="#1-%E5%8A%A8%E6%9C%BA">1. 动机</a></li>
<li><a href="#2-%E6%A8%A1%E5%9E%8B%E7%BB%93%E6%9E%84%E5%8F%8A%E5%8E%9F%E7%90%86">2. 模型结构及原理</a></li>
</ul>
<!-- /code_chunk_output -->


<h3 id="1-动机"><a href="#1-动机" class="headerlink" title="1. 动机"></a>1. 动机<a href="#1-动机" class="header-anchor">#</a></h3><p>这个模型就是一个真正的把深度学习架构应用于推荐系统中的模型了， 2016年由微软提出， 完整的解决了特征工程、稀疏向量稠密化， 多层神经网络进行优化目标拟合等一系列深度学习再推荐系统的应用问题。 这个模型涉及到的技术比较基础，在传统神经网络的基础上加入了embedding，残差连接等思想，且结构比较简单，对初学者复现和学习都比较友好。</p>
<p>DeepCrossing模型应用场景是微软搜索引擎Bing中的搜索广告推荐， 用户在输入搜索词之后， 搜索引擎除了返回相关结果， 还返回与搜索词相关的广告，Deep Crossing的优化目标就是预测对于某一广告， 用户是否会点击，依然是点击率预测的一个问题。</p>
<p>这种场景下，我们的输入一般会有类别型特征，比如广告id，和数值型特征，比如广告预算，两种情况。 对于类别型特征，我们需要进行one-hot编码处理，而数值型特征 一般需要进行归一化处理，这样算是把数据进行了一个简单清洗。 DeepCrossing模型就是利用这些特征向量进行CRT预估，那么它的结构长啥样, 又是怎么做CTR预估的呢？ 这又是DeepCrossing的核心内容。</p>
<h3 id="2-模型结构及原理"><a href="#2-模型结构及原理" class="headerlink" title="2. 模型结构及原理"></a>2. 模型结构及原理<a href="#2-模型结构及原理" class="header-anchor">#</a></h3><p>为了完成端到端的训练， DeepCrossing模型要在内部网络结构中解决如下问题：</p>
<ol>
<li>离散类特征编码后过于稀疏， 不利于直接输入神经网络训练， 需要解决稀疏特征向量稠密化的问题</li>
<li>如何解决特征自动交叉组合的问题</li>
<li>如何在输出层中达成问题设定的优化目标</li>
</ol>
<p>DeepCrossing分别设置了不同神经网络层解决上述问题。模型结构如下<br><img src="./deepcrossing/deepcrossing%E6%A8%A1%E5%9E%8B.png" alt="deepcrossing模型"></p>
<p>下面分别介绍一下各层的作用：</p>
<h4 id="21-embedding-layer"><a href="#2-1-Embedding-Layer" class="headerlink" title="2.1 Embedding Layer"></a>2.1 Embedding Layer<a href="#21-embedding-layer" class="header-anchor">#</a></h4><p>将稀疏的类别型特征转成稠密的Embedding向量，Embedding的维度会远小于原始的稀疏特征向量。 Embedding是NLP里面常用的一种技术，这里的Feature #1表示的类别特征(one-hot编码后的稀疏特征向量）， Feature #2是数值型特征，不用embedding， 直接到了Stacking Layer。 关于Embedding Layer的实现， 往往一个全连接层即可，Tensorflow中有实现好的层可以直接用。 和NLP里面的embedding技术异曲同工， 比如Word2Vec， 语言模型等。</p>
<h4 id="22-stacking-layer"><a href="#2-2-Stacking-Layer" class="headerlink" title="2.2 Stacking Layer"></a>2.2 Stacking Layer<a href="#22-stacking-layer" class="header-anchor">#</a></h4><p>这个层是把不同的Embedding特征和数值型特征拼接在一起，形成新的包含全部特征的特征向量，该层通常也称为连接层, 具体的实现如下，先将所有的数值特征拼接起来，然后将所有的Embedding拼接起来，最后将数值特征和Embedding特征拼接起来作为DNN的输入，这里TF是通过Concatnate层进行拼接。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#将所有的dense特征拼接到一起</span><br><span class="line">dense_dnn_list = list(dense_input_dict.values())</span><br><span class="line">dense_dnn_inputs = Concatenate(axis=1)(dense_dnn_list) # B x n (n表示数值特征的数量)</span><br><span class="line"></span><br><span class="line"># 因为需要将其与dense特征拼接到一起所以需要Flatten，不进行Flatten的Embedding层输出的维度为：Bx1xdim</span><br><span class="line">sparse_dnn_list = concat_embedding_list(dnn_feature_columns, sparse_input_dict, embedding_layer_dict, flatten=True) </span><br><span class="line"></span><br><span class="line">sparse_dnn_inputs = Concatenate(axis=1)(sparse_dnn_list) # B x m*dim (n表示类别特征的数量，dim表示embedding的维度)</span><br><span class="line"></span><br><span class="line"># 将dense特征和Sparse特征拼接到一起</span><br><span class="line">dnn_inputs = Concatenate(axis=1)([dense_dnn_inputs, sparse_dnn_inputs]) # B x (n + m*dim)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="23-multiple-residual-units-layer"><a href="#2-3-Multiple-Residual-Units-Layer" class="headerlink" title="2.3 Multiple Residual Units Layer"></a>2.3 Multiple Residual Units Layer<a href="#23-multiple-residual-units-layer" class="header-anchor">#</a></h4><p>该层的主要结构是MLP， 但DeepCrossing采用了残差网络进行的连接。通过多层残差网络对特征向量各个维度充分的交叉组合， 使得模型能够抓取更多的非线性特征和组合特征信息， 增加模型的表达能力。残差网络结构如下图所示：<br><img src="deepcrossing/resunit.png" alt="残差结构"><br>Deep Crossing模型使用稍微修改过的残差单元，它不使用卷积内核，改为了两层神经网络。我们可以看到，残差单元是通过两层ReLU变换再将原输入特征相加回来实现的。具体代码实现如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># DNN残差块的定义</span><br><span class="line">class ResidualBlock(Layer):</span><br><span class="line">    def __init__(self, units): # units表示的是DNN隐藏层神经元数量</span><br><span class="line">        super(ResidualBlock, self).__init__()</span><br><span class="line">        self.units = units</span><br><span class="line"></span><br><span class="line">    def build(self, input_shape):</span><br><span class="line">        out_dim = input_shape[-1]</span><br><span class="line">        self.dnn1 = Dense(self.units, activation=&#x27;relu&#x27;)</span><br><span class="line">        self.dnn2 = Dense(out_dim, activation=&#x27;relu&#x27;) # 保证输入的维度和输出的维度一致才能进行残差连接</span><br><span class="line">    def call(self, inputs):</span><br><span class="line">        x = inputs</span><br><span class="line">        x = self.dnn1(x)</span><br><span class="line">        x = self.dnn2(x)</span><br><span class="line">        x = Activation(&#x27;relu&#x27;)(x + inputs) # 残差操作</span><br><span class="line">        return x</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="24-scoring-layer"><a href="#2-4-Scoring-Layer" class="headerlink" title="2.4 Scoring Layer"></a>2.4 Scoring Layer<a href="#24-scoring-layer" class="header-anchor">#</a></h4><p>这个作为输出层，为了拟合优化目标存在。 对于CTR预估二分类问题， Scoring往往采用逻辑回归，模型通过叠加多个残差块加深网络的深度，最后将结果转换成一个概率值输出。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># block_nums表示DNN残差块的数量</span><br><span class="line">def get_dnn_logits(dnn_inputs, block_nums=3):</span><br><span class="line">    dnn_out = dnn_inputs</span><br><span class="line">    for i in range(block_nums):</span><br><span class="line">        dnn_out = ResidualBlock(64)(dnn_out)</span><br><span class="line">    </span><br><span class="line">    # 将dnn的输出转化成logits</span><br><span class="line">    dnn_logits = Dense(1, activation=&#x27;sigmoid&#x27;)(dnn_out)</span><br><span class="line"></span><br><span class="line">    return dnn_logits</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结<a href="#3总结" class="header-anchor">#</a></h3><p>这就是DeepCrossing的结构了，比较清晰和简单，没有引入特殊的模型结构，只是常规的Embedding+多层神经网络。但这个网络模型的出现，有革命意义。DeepCrossing模型中没有任何人工特征工程的参与，只需要简单的特征处理，原始特征经Embedding Layer输入神经网络层，自主交叉和学习。 相比于FM，FFM只具备二阶特征交叉能力的模型，DeepCrossing可以通过调整神经网络的深度进行特征之间的“深度交叉”，这也是Deep Crossing名称的由来。</p>
<p>如果是用于点击率预估模型的损失函数就是对数损失函数：</p>
<p>$$ logloss=-\frac 1N\sum_1^N(y_ilog(p_i)+(1-y_i)log(1-p_i) $$ 其中$$y_i$$表示真实的标签（点击或未点击），$$p_i$$表示Scoring Layer输出的结果。但是在实际应用中，根据不同的需求可以灵活替换为其他目标函数。</p>
<h3 id="4-代码实现"><a href="#4-代码实现" class="headerlink" title="4. 代码实现"></a>4. 代码实现<a href="#4-代码实现" class="header-anchor">#</a></h3><p>从模型的代码结构上来看，DeepCrossing的模型输入主要由数值特征和类别特征组成，并将经过Embedding之后的类别特征及类别特征拼接在一起，详细的拼接代码如Staking Layer所示，下面是构建模型的核心代码，详细代码参考github。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def DeepCrossing(dnn_feature_columns):</span><br><span class="line">    # 构建输入层，即所有特征对应的Input()层，这里使用字典的形式返回，方便后续构建模型</span><br><span class="line">    dense_input_dict, sparse_input_dict = build_input_layers(dnn_feature_columns)</span><br><span class="line"></span><br><span class="line">    # 构建模型的输入层，模型的输入层不能是字典的形式，应该将字典的形式转换成列表的形式</span><br><span class="line">    # 注意：这里实际的输入与Input()层的对应，是通过模型输入时候的字典数据的key与对应name的Input层</span><br><span class="line">    input_layers = list(dense_input_dict.values()) + list(sparse_input_dict.values())</span><br><span class="line">    </span><br><span class="line">    # 构建维度为k的embedding层，这里使用字典的形式返回，方便后面搭建模型</span><br><span class="line">    embedding_layer_dict = build_embedding_layers(dnn_feature_columns, sparse_input_dict, is_linear=False)</span><br><span class="line"></span><br><span class="line">    #将所有的dense特征拼接到一起</span><br><span class="line">    dense_dnn_list = list(dense_input_dict.values())</span><br><span class="line">    dense_dnn_inputs = Concatenate(axis=1)(dense_dnn_list) # B x n (n表示数值特征的数量)</span><br><span class="line"></span><br><span class="line">    # 因为需要将其与dense特征拼接到一起所以需要Flatten，不进行Flatten的Embedding层输出的维度为：Bx1xdim</span><br><span class="line">    sparse_dnn_list = concat_embedding_list(dnn_feature_columns, sparse_input_dict, embedding_layer_dict, flatten=True) </span><br><span class="line"></span><br><span class="line">    sparse_dnn_inputs = Concatenate(axis=1)(sparse_dnn_list) # B x m*dim (n表示类别特征的数量，dim表示embedding的维度)</span><br><span class="line"></span><br><span class="line">    # 将dense特征和Sparse特征拼接到一起</span><br><span class="line">    dnn_inputs = Concatenate(axis=1)([dense_dnn_inputs, sparse_dnn_inputs]) # B x (n + m*dim)</span><br><span class="line"></span><br><span class="line">    # 输入到dnn中，需要提前定义需要几个残差块</span><br><span class="line">    output_layer = get_dnn_logits(dnn_inputs, block_nums=3)</span><br><span class="line"></span><br><span class="line">    model = Model(input_layers, output_layer)</span><br><span class="line">    return model</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>deeplearning</title>
    <url>/article/deeplearning/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="b31157566198a7e21362b0ec90d5f165701dea308ca35047da2c02452e8594af">1e0e73741e06b0129e61c2ad316ca7f7e5461bce2236a74a72b61150c72cf901</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>加密</tag>
      </tags>
  </entry>
  <entry>
    <title>distributed_torch</title>
    <url>/article/distributed-torch/</url>
    <content><![CDATA[<h1 id="多gpu分配"><a href="#多GPU分配" class="headerlink" title="多GPU分配"></a>多GPU分配<a href="#多gpu分配" class="header-anchor">#</a></h1><p>实现逻辑：寻找（可用显存 / 总显存）最大的的GPU，并优先安排任务</p>
<p>nvidia-smi可以很方便的获得GPU的各种详细信息。</p>
<p>首先获得可用的GPU数目，nvidia-smi -L | grep GPU |wc -l</p>
<p>然后获得GPU各自的总显存，nvidia-smi -q -d Memory | grep -A4 GPU | grep Total | grep -o ‘[0-9]+‘</p>
<p>最后获得GPU各自的可用显存，nvidia-smi -q -d Memory | grep -A4 GPU | grep Free | grep -o ‘[0-9]+‘</p>
<p>将（可用显存 / 总显存）另存为numpy数组，并使用np.argmax返回值即为可用GPU</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def available_GPU(self):</span><br><span class="line">    import subprocess</span><br><span class="line">    import numpy as np</span><br><span class="line">    nDevice = int(subprocess.getoutput(&quot;nvidia-smi -L | grep GPU |wc -l&quot;))</span><br><span class="line">    total_GPU_str = subprocess.getoutput(&quot;nvidia-smi -q -d Memory | grep -A4 GPU | grep Total | grep -o &#x27;[0-9]\+&#x27;&quot;)</span><br><span class="line">    total_GPU = total_GPU_str.split(&#x27;\n&#x27;)</span><br><span class="line">    total_GPU = np.array([int(device_i) for device_i in total_GPU])</span><br><span class="line">    avail_GPU_str = subprocess.getoutput(&quot;nvidia-smi -q -d Memory | grep -A4 GPU | grep Free | grep -o &#x27;[0-9]\+&#x27;&quot;)</span><br><span class="line">    avail_GPU = avail_GPU_str.split(&#x27;\n&#x27;)</span><br><span class="line">    avail_GPU = np.array([int(device_i) for device_i in avail_GPU])</span><br><span class="line">    avail_GPU = avail_GPU / total_GPU</span><br><span class="line">    return np.argmax(avail_GPU)</span><br></pre></td></tr></table></figure>



<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料<a href="#参考资料" class="header-anchor">#</a></h1><p><a href="https://www.cnblogs.com/yh-blog/p/12877922.html">pytorch(分布式)数据并行个人实践总结——DataParallel/DistributedDataParallel </a></p>
<p><a href="https://blog.csdn.net/junqing_wu/article/details/112732338">torch 多进程训练(详细例程)</a></p>
<p><a href="https://blog.csdn.net/qq_34914551/article/details/110576421">PyTorch多进程分布式训练最简单最好用的实施办法</a></p>
<p><a href="https://blog.csdn.net/ZAQ1018472917/article/details/84626040">python并行编程 - GPU篇</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/107230545">Pytorch 分布式、多进程模块测试 </a></p>
<p><a href="https://blog.csdn.net/baidu_36669549/article/details/95094464">多进程GPU调用问题</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/77307505">GPU加速02:超详细Python Cuda零基础入门教程，没有显卡也能学</a></p>
<p><a href="https://blog.csdn.net/sh39o/article/details/90382101">使用python多GPU任务分配</a></p>
<p><a href="https://blog.csdn.net/github_37320188/article/details/100519346">Deep Learning:PyTorch 基于docker 容器的分布式训练实践</a></p>
]]></content>
  </entry>
  <entry>
    <title>git_learn</title>
    <url>/article/git_learn/</url>
    <content><![CDATA[<p><img src="image-20210909164119386.png" alt="image-20210909164119386" title="dsfsdf"></p>
<p><img src="image-20210909165936257.png" alt="image-20210909165936257"></p>
<p>gitlab 是origin main而不是master,绝了！</p>
<p>git reset –hard </p>
<p><a href="https://www.cnblogs.com/jeremylee/p/5715289.html">error: src refspec master does not match any. 错误处理办法 - JeremyLee87 - 博客园 (cnblogs.com)</a></p>
<p><a href="https://segmentfault.com/a/1190000013059664">Git 多人协作开发流程 - SegmentFault 思否</a></p>
<p><img src="image-20210910093541121.png" alt="image-20210910093541121"></p>
]]></content>
  </entry>
  <entry>
    <title>generator_and_iterator</title>
    <url>/article/generator-and-iterator/</url>
    <content><![CDATA[<!--toc-->

<h1 id="列表表达式"><a href="#列表表达式" class="headerlink" title="列表表达式"></a>列表表达式<a href="#列表表达式" class="header-anchor">#</a></h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">info = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class="line">a = [i+1 for i in range(10)]</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>



<p>多重循环</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = [(i,j) for i in range(4) for j in range(2)]</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>



<p>多重循环+判断语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls = [(&#x27;x&#x27;,[&#x27;open1&#x27;,&#x27;open1&#x27;,&#x27;open1&#x27;]),(&#x27;y&#x27;,[&#x27;open1&#x27;,&#x27;open1&#x27;,&#x27;open0&#x27;]),(&#x27;z&#x27;,[&#x27;open0&#x27;,&#x27;open0&#x27;,&#x27;open1&#x27;])]</span><br><span class="line"></span><br><span class="line">def find(con):</span><br><span class="line">    return [j for i in con for j in i if j.isdigit()]</span><br><span class="line"> </span><br><span class="line">[w for w,con in ls if find(con)==[&#x27;1&#x27;,&#x27;1&#x27;,&#x27;1&#x27;]]</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器<a href="#生成器" class="header-anchor">#</a></h1><ol>
<li><p>什么是生成器</p>
<p>生成器是一种特殊的迭代器，生成器的出现是为了简化迭代器应用。</p>
<p>生成器的主要思想：对于可以公式自动生成的数字序列，由计算机不断迭代，每次只生成一个数字，从而通过循环遍历生成序列中的所有元素。所以说，生成器产生的不是一个静态的值（比如类似字符串、元组和列表等，都是一次性生成所有值），而是一个动态的数据流。</p>
<p>示例1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = (x**2 for x in range(1,9))</span><br><span class="line">print(type(a))</span><br><span class="line">next(a)</span><br></pre></td></tr></table></figure>

<p>示例2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def gen(x):</span><br><span class="line">	x += 1</span><br><span class="line">	yield x**2</span><br><span class="line">b = gen(0)</span><br><span class="line">print(type(b))</span><br><span class="line">next(b)</span><br></pre></td></tr></table></figure>

<p>可以看到，变量a和b都是生成器，我们不能直接使用a、b，因为它们实际上保存的是一个公式，使用时可以调用内置函数next()，由next(a)、next(b)来动态生成序列中的下一个值。采用生成器的好处是：节省内存空间，特别是对于数据量大的序列，一次性生成所有值将会耗费大量内存，而采用生成器可以极大地节省存储空间。同时，生成器还可以处理无限长的序列。比如，上述实例中，变量b就是一个无限序列，理论上可以永远next(b)，而且每次都是按顺序生成其中的一个值。</p>
<p>可以把生成器看作是一种特殊的函数，它与一般函数最主要的区别就在于生成器函数中有关键字yield。比如，上述实例2，函数中只要有yield关键字，就是一个生成器函数。</p>
</li>
<li><p>生成器怎么用</p>
<p>​    (1). 生成器使用场景</p>
<p>​            当你需要生成一个大型的序列，但又不想因此占用大量的存储空间，提高存储和计算效率。此时，可以考虑用生成器。</p>
<p>​    (2). 生成器的构造</p>
<p>​            主要有两种方式：一是生成器表达式；二是生成器函数。上面实例1就是生成器表达式；实例2其实就是生成器函数。</p>
<p>​    (3). 生成器的使用</p>
<p>​            ①采用for循环</p>
<p>​            ②采用内置函数next()遍历生成器元素</p>
<p>​            ③采用生成器自身方法<code>__next()__</code>循环生成下一个值。</p>
</li>
</ol>
<h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器<a href="#迭代器" class="header-anchor">#</a></h1><ol>
<li><p>什么是迭代器</p>
<p>​    首先了解几个概念：</p>
<p>​        (1). 可迭代对象。可以直接作用于for 循环的对象统称为可迭代对象：Iterable。可以使用isinstance()判断一个对象是否为可Iterable对象。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from collections import Iterable</span><br><span class="line">&gt;&gt;&gt; isinstance(fib(8), Iterable)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; b = [1,2,3,4]</span><br><span class="line">&gt;&gt;&gt; isinstance(b, Iterable)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; c = 8</span><br><span class="line">&gt;&gt;&gt; isinstance(c, Iterable)</span><br><span class="line">False</span><br></pre></td></tr></table></figure>

<p>Python中可直接采用for循环的对象有：一类是集合数据类型，如list，tuple，dict，set，str等；一类是generator，包括生成器表达式和带yield的生成器函数。</p>
<p>​        (2). 迭代器。Python中一个实现了_iter_方法和_next_方法的类对象，就是迭代器。</p>
<pre><code>    (3).迭代器协议：要构造一个迭代器，对象需要提供next()方法，它要么返回迭代中的下一项，要么就引起一个StopIteration异常，以终止迭代。
</code></pre>
</li>
<li><p>迭代器的构造</p>
<p>（1）自定义迭代器类</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Fib(object):</span><br><span class="line">    def __init__(self, max):</span><br><span class="line">        super(Fib, self).__init__()</span><br><span class="line">        self.max = max</span><br><span class="line">    def __iter__(self):</span><br><span class="line">        self.a = 0</span><br><span class="line">        self.b = 1</span><br><span class="line">        return self</span><br><span class="line">    def __next__(self):</span><br><span class="line">        fib = self.a</span><br><span class="line">        if fib &gt; self.max:</span><br><span class="line">            raise StopIteration</span><br><span class="line">        self.a, self.b = self.b, self.a + self.b</span><br><span class="line">        return fib</span><br><span class="line"># 定义一个main函数，循环遍历每一个菲波那切数</span><br><span class="line">def main():</span><br><span class="line">    # 20以内的数</span><br><span class="line">    fib = Fib(20)</span><br><span class="line">    for i in fib:</span><br><span class="line">        print(i)</span><br><span class="line"># 测试</span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>​    （2）通过调用内置函数iter()构造迭代器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; g = iter(range(10))</span><br><span class="line">&gt;&gt;&gt; isinstance(g, Iterator)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(range(10), Iterable)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(range(10), Iterator)</span><br><span class="line">False</span><br></pre></td></tr></table></figure>

<p>注意，不少文章中写道，map、filter等内置函数返回的都是生成器，还有个别资料中说range返回的也是生成器。要检查一个对象是否为迭代器，也可以采用isinstance()判断，所以我们可以进行以下的判断：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from collections import Iterable， Iterator， Generator</span><br><span class="line">&gt;&gt;&gt; d= range(10)</span><br><span class="line">&gt;&gt;&gt; isinstance(d, Iterable)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(d, Iterator)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; e = map(lambda x : x**2, [1,2,4,6,7,8,9])</span><br><span class="line">&gt;&gt;&gt; isinstance(e, Iterable)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(e, Iterator)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(e, Generator)</span><br><span class="line">&gt;&gt;&gt; f = (x**2 for x in [1,2,4,6,7,8,9])</span><br><span class="line">&gt;&gt;&gt; isinstance(f, Iterator)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(f, Generator)</span><br><span class="line">True</span><br></pre></td></tr></table></figure>



<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料<a href="#参考资料" class="header-anchor">#</a></h1><p><a href="https://zhuanlan.zhihu.com/p/122537818">生成器和迭代器总结</a></p>
]]></content>
  </entry>
  <entry>
    <title>logging</title>
    <url>/article/logging/</url>
    <content><![CDATA[<h1 id="按天生成日志"><a href="#按天生成日志" class="headerlink" title="按天生成日志"></a>按天生成日志<a href="#按天生成日志" class="header-anchor">#</a></h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># #coding=utf-8</span><br><span class="line">import logging,os  # 引入logging模块</span><br><span class="line">from com_tools import setting</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from logging import handlers</span><br><span class="line"></span><br><span class="line">class Logger(object):</span><br><span class="line">    level_relations = &#123;</span><br><span class="line">        &#x27;debug&#x27;:logging.DEBUG,</span><br><span class="line">        &#x27;info&#x27;:logging.INFO,</span><br><span class="line">        &#x27;warning&#x27;:logging.WARNING,</span><br><span class="line">        &#x27;error&#x27;:logging.ERROR,</span><br><span class="line">        &#x27;crit&#x27;:logging.CRITICAL</span><br><span class="line">    &#125;#日志级别关系映射</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def __init__(self,filename,level=&#x27;info&#x27;,when=&#x27;MIDNIGHT&#x27;,backCount=7,fmt=&#x27;%(asctime)s - %(pathname)s[line:%(lineno)d] - %(levelname)s: %(message)s&#x27;):</span><br><span class="line">        self.logger = logging.getLogger(filename)</span><br><span class="line">        format_str = logging.Formatter(fmt)#设置日志格式</span><br><span class="line">        self.logger.setLevel(self.level_relations.get(level))#设置日志级别</span><br><span class="line">        sh = logging.StreamHandler()#往控制台输出</span><br><span class="line">        sh.setFormatter(format_str) #设置控制台上显示的格式</span><br><span class="line">        th = handlers.TimedRotatingFileHandler(filename=filename,interval=1,when=when,backupCount=backCount,encoding=&#x27;utf-8&#x27;)#往文件里写入#指定间隔时间自动生成文件的处理器</span><br><span class="line">        #实例化TimedRotatingFileHandler</span><br><span class="line">        #interval是时间间隔，backupCount是备份文件的个数，如果超过这个个数，就会自动删除，when是间隔的时间单位，单位有以下几种：</span><br><span class="line">        # S 秒</span><br><span class="line">        # M 分</span><br><span class="line">        # H 小时、</span><br><span class="line">        # D 天、</span><br><span class="line">        # W 每星期（interval==0时代表星期一）</span><br><span class="line">        # midnight 每天凌晨</span><br><span class="line">        th.suffix = &quot;%Y-%m-%d.log&quot; #设置文件后缀</span><br><span class="line">        th.setFormatter(format_str)#设置文件里写入的格式</span><br><span class="line">        self.logger.addHandler(sh) #把对象加到logger里</span><br><span class="line">        self.logger.addHandler(th)</span><br><span class="line">logfile = os.path.join(setting.logs_path, &quot;daodianmockapi.txt&quot;) # 这个文件的名称就是当天的日志文件，过往的日志文件，会在后面追加文件后缀 th.suffix</span><br><span class="line">logger = Logger(logfile,level=&#x27;debug&#x27;)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    #logger = Logger(&#x27;all.log&#x27;,level=&#x27;debug&#x27;)</span><br><span class="line">    # filename = setting.now_time+ &quot;.txt&quot;</span><br><span class="line">    # logfile = os.path.join(setting.logs_path,filename)</span><br><span class="line">    # logger = Logger(logfile,level=&#x27;debug&#x27;)</span><br><span class="line">    logger.logger.debug(&#x27;debug&#x27;) # 括号内的内容即为日志的文本内容</span><br><span class="line">    logger.logger.info(&#x27;info&#x27;)</span><br><span class="line">    logger.logger.warning(&#x27;警告&#x27;)</span><br><span class="line">    logger.logger.error(&#x27;报错&#x27;)</span><br><span class="line">    logger.logger.critical(&#x27;严重&#x27;)</span><br><span class="line">    #Logger(&#x27;error.log&#x27;, level=&#x27;error&#x27;).logger.error(&#x27;error&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="loguru"><a href="#loguru" class="headerlink" title="loguru"></a>loguru<a href="#loguru" class="header-anchor">#</a></h1><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料<a href="#参考资料" class="header-anchor">#</a></h1><p><a href="https://zhuanlan.zhihu.com/p/144506204">python定时任务最强框架APScheduler详细教程 </a></p>
<p><a href="https://pythondict.com/life-intelligent/tools/loguru/">Loguru — 最强大的 Python 日志记录器</a></p>
]]></content>
  </entry>
  <entry>
    <title>mmdetection</title>
    <url>/article/mmdetection/</url>
    <content><![CDATA[<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料<a href="#参考资料" class="header-anchor">#</a></h1><p><a href="https://www.jianshu.com/p/38f4525246e1">MMDetection 2.5 目标检测（3）：配置修改 - 简书 (jianshu.com)</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/137454940">mmdetection源码分析faster-rcnn，读懂mmdetection - 知乎 (zhihu.com)</a></p>
<p><a href="https://www.jianshu.com/p/924db4d52213">将自己数据集转化成voc数据集格式并用mmdetection训练 - 简书 (jianshu.com)</a></p>
<p><a href="https://blog.csdn.net/qq_33897832/article/details/103995636">(29条消息) （详细教程）mmdetection训练自己的模型，测试，评估_若风的博客-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/qq_41251963/article/details/112940253">(29条消息) 【MMDetection-学习记录】 训练自己的VOC数据集_乐亦亦乐的博客-CSDN博客</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/162730118">MMDetection v2.0 训练自己的数据集 - 知乎 (zhihu.com)</a></p>
<p><a href="https://www.aiuai.cn/aifarm1218.html">mmdetection 模型训练</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/128697076">mmdetection源码解读（一） - 知乎 (zhihu.com)</a></p>
]]></content>
  </entry>
  <entry>
    <title>multiprocessing</title>
    <url>/article/multiprocessing/</url>
    <content><![CDATA[<p>由于python的GIL锁的存在，导致在多线程的时候，同一时间只能有一个线程在cpu上运行，而且是单个cpu上运行，不管cpu有多少核数。如果要充分利用多核cpu的资源，在python中大部分情况下需要使用多进程。</p>
<h1 id="python多进程模块"><a href="#python多进程模块" class="headerlink" title="python多进程模块"></a>python多进程模块<a href="#python多进程模块" class="header-anchor">#</a></h1><p>Python中的多进程是通过multiprocessing包来实现的，和多线程的threading.Thread差不多，它可以利用multiprocessing.Process对象来创建一个进程对象。这个进程对象的方法和线程对象的方法差不多也有start(), run(), join()等方法，其中有一个方法不同Thread线程对象中的守护线程方法是setDeamon，而Process进程对象的守护进程是通过设置daemon属性来完成的。</p>
<span id="more"></span>

<h1 id="多进程的实现方法"><a href="#多进程的实现方法" class="headerlink" title="多进程的实现方法"></a>多进程的实现方法<a href="#多进程的实现方法" class="header-anchor">#</a></h1><ol>
<li><p>方法一</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from multiprocessing import  Process</span><br><span class="line"></span><br><span class="line">def fun1(name):</span><br><span class="line">    print(&#x27;测试%s多进程&#x27; %name)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    process_list = []</span><br><span class="line">    for i in range(5):  #开启5个子进程执行fun1函数</span><br><span class="line">        p = Process(target=fun1,args=(&#x27;Python&#x27;,)) #实例化进程对象</span><br><span class="line">        p.start()</span><br><span class="line">        process_list.append(p)</span><br><span class="line"></span><br><span class="line">    for i in process_list:</span><br><span class="line">        p.join()</span><br><span class="line"></span><br><span class="line">    print(&#x27;结束测试&#x27;)</span><br></pre></td></tr></table></figure>

<p>上面的代码开启了5个子进程去执行函数，我们可以观察结果，是同时打印的，这里实现了真正的并行操作，就是多个CPU同时执行任务。我们知道进程是python中最小的资源分配单元，也就是进程中间的数据，内存是不共享的，每启动一个进程，都要独立分配资源和拷贝访问的数据，所以进程的启动和销毁的代价是比较大了，所以在实际中使用多进程，要根据服务器的配置来设定。</p>
</li>
<li><p>方法二</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from multiprocessing import  Process</span><br><span class="line"></span><br><span class="line">class MyProcess(Process): #继承Process类</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        super(MyProcess,self).__init__()</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        print(&#x27;测试%s多进程&#x27; % self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    process_list = []</span><br><span class="line">    for i in range(5):  #开启5个子进程执行fun1函数</span><br><span class="line">        p = MyProcess(&#x27;Python&#x27;) #实例化进程对象</span><br><span class="line">        p.start()</span><br><span class="line">        process_list.append(p)</span><br><span class="line"></span><br><span class="line">    for i in process_list:</span><br><span class="line">        p.join()</span><br><span class="line"></span><br><span class="line">    print(&#x27;结束测试&#x27;)</span><br></pre></td></tr></table></figure>

<p>Process类的其他方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">构造方法：</span><br><span class="line"></span><br><span class="line">Process([group [, target [, name [, args [, kwargs]]]]])</span><br><span class="line">　　group: 线程组 </span><br><span class="line">　　target: 要执行的方法</span><br><span class="line">　　name: 进程名</span><br><span class="line">　　args/kwargs: 要传入方法的参数</span><br><span class="line"></span><br><span class="line">实例方法：</span><br><span class="line">　　is_alive()：返回进程是否在运行,bool类型。</span><br><span class="line">　　join([timeout])：阻塞当前上下文环境的进程程，直到调用此方法的进程终止或到达指定的timeout（可选参数）。</span><br><span class="line">　　start()：进程准备就绪，等待CPU调度</span><br><span class="line">　　run()：strat()调用run方法，如果实例进程时未制定传入target，这star执行t默认run()方法。</span><br><span class="line">　　terminate()：不管任务是否完成，立即停止工作进程</span><br><span class="line"></span><br><span class="line">属性：</span><br><span class="line">　　daemon：和线程的setDeamon功能一样</span><br><span class="line">　　name：进程名字</span><br><span class="line">　　pid：进程号</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="python-多进程的通信"><a href="#python-多进程的通信" class="headerlink" title="python 多进程的通信"></a>python 多进程的通信<a href="#python-多进程的通信" class="header-anchor">#</a></h1><p>进程是系统独立调度核分配系统资源（CPU、内存）的基本单位，进程之间是相互独立的，每启动一个新的进程相当于把数据进行了一次克隆，子进程里的数据修改无法影响到主进程中的数据，不同子进程之间的数据也不能共享，这是多进程在使用中与多线程最明显的区别。但是难道Python多进程中间难道就是孤立的吗？当然不是，python也提供了多种方法实现了多进程中间的通信和数据共享（可以修改一份数据）</p>
<h3 id="进程对列queue"><a href="#进程对列Queue" class="headerlink" title="进程对列Queue"></a><strong>进程对列Queue</strong><a href="#进程对列queue" class="header-anchor">#</a></h3><p>Queue在多线程中也说到过，在生成者消费者模式中使用，是线程安全的，是生产者和消费者中间的数据管道，那在python多进程中，它其实就是进程之间的数据管道，实现进程通信。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from multiprocessing import Process,Queue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def fun1(q,i):</span><br><span class="line">    print(&#x27;子进程%s 开始put数据&#x27; %i)</span><br><span class="line">    q.put(&#x27;我是%s 通过Queue通信&#x27; %i)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    q = Queue()</span><br><span class="line"></span><br><span class="line">    process_list = []</span><br><span class="line">    for i in range(3):</span><br><span class="line">        p = Process(target=fun1,args=(q,i,))  #注意args里面要把q对象传给我们要执行的方法，这样子进程才能和主进程用Queue来通信</span><br><span class="line">        p.start()</span><br><span class="line">        process_list.append(p)</span><br><span class="line"></span><br><span class="line">    for i in process_list:</span><br><span class="line">        p.join()</span><br><span class="line"></span><br><span class="line">    print(&#x27;主进程获取Queue数据&#x27;)</span><br><span class="line">    print(q.get())</span><br><span class="line">    print(q.get())</span><br><span class="line">    print(q.get())</span><br><span class="line">    print(&#x27;结束测试&#x27;)</span><br></pre></td></tr></table></figure>



<h3 id="管道pipe"><a href="#管道Pipe" class="headerlink" title="管道Pipe"></a><strong>管道Pipe</strong><a href="#管道pipe" class="header-anchor">#</a></h3><p>管道Pipe和Queue的作用大致差不多，也是实现进程间的通信，下面之间看怎么使用吧</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from multiprocessing import Process, Pipe</span><br><span class="line">def fun1(conn):</span><br><span class="line">    print(&#x27;子进程发送消息：&#x27;)</span><br><span class="line">    conn.send(&#x27;你好主进程&#x27;)</span><br><span class="line">    print(&#x27;子进程接受消息：&#x27;)</span><br><span class="line">    print(conn.recv())</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    conn1, conn2 = Pipe() #关键点，pipe实例化生成一个双向管</span><br><span class="line">    p = Process(target=fun1, args=(conn2,)) #conn2传给子进程</span><br><span class="line">    p.start()</span><br><span class="line">    print(&#x27;主进程接受消息：&#x27;)</span><br><span class="line">    print(conn1.recv())</span><br><span class="line">    print(&#x27;主进程发送消息：&#x27;)</span><br><span class="line">    conn1.send(&quot;你好子进程&quot;)</span><br><span class="line">    p.join()</span><br><span class="line">    print(&#x27;结束测试&#x27;)</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## 进程池不能使用Queue,而要用Pipe, 但是可以使用Manager包装一下</span><br><span class="line">from multiprocessing import Pool, Process,Queue, Pipe</span><br><span class="line">import time,random</span><br><span class="line"></span><br><span class="line">def consumer(q, name):</span><br><span class="line">    # q, name = k</span><br><span class="line">    while True:</span><br><span class="line">        food = q.recv()</span><br><span class="line">        if food is None:</span><br><span class="line">            print(&#x27;接收到了一个空,生产者已经完事了&#x27;)</span><br><span class="line">            q.close()</span><br><span class="line">            break</span><br><span class="line"></span><br><span class="line">        print(&#x27;\033[31m&#123;&#125;消费了&#123;&#125;\033[0m&#x27;.format(name,food))</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"></span><br><span class="line">def producer(name,food, q):</span><br><span class="line">    # print(name, food)</span><br><span class="line">    # name,food,q = k</span><br><span class="line">    for i in range(10):</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line">        f = &#x27;&#123;&#125;生产了&#123;&#125;&#123;&#125;&#x27;.format(name,food,i)</span><br><span class="line">        print(f)</span><br><span class="line">        q.send(f)</span><br><span class="line">    q.send(None)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    q1,q2 = Pipe()</span><br><span class="line"></span><br><span class="line">    p1 = Pool(3)</span><br><span class="line">    p2 = Pool(3)</span><br><span class="line"></span><br><span class="line">    # p1 = Process(target=producer,args=(&#x27;fioman&#x27;,&#x27;包子&#x27;,q))</span><br><span class="line">    # p2 = Process(target=producer,args=(&#x27;jingjing&#x27;,&#x27;馒头&#x27;,q))</span><br><span class="line">    # p1.start()</span><br><span class="line">    # p2.start()</span><br><span class="line">    # for i in [(&#x27;fioman&#x27;,&#x27;包子&#x27;,q), (&#x27;jingjing&#x27;,&#x27;馒头&#x27;,q)]:</span><br><span class="line">    #     print(i)</span><br><span class="line">        # p1.apply_async(func=producer, args=(i,))</span><br><span class="line">    p1.apply_async(func=producer, args=(&#x27;fioman&#x27;,&#x27;包子&#x27;,q1))</span><br><span class="line">    p1.apply_async(func=producer, args=(&#x27;jingjing&#x27;,&#x27;馒头&#x27;,q1))</span><br><span class="line">    # p1.apply_async(func=producer, args=(&#x27;hu&#x27;,&#x27;馒头&#x27;,q1))</span><br><span class="line"></span><br><span class="line">    # for i in [(q,&#x27;mengmeng&#x27;), (q,&#x27;xiaoxiao&#x27;)]:</span><br><span class="line">    p2.apply_async(func=consumer, args=(q2,&#x27;mengmeng&#x27;))</span><br><span class="line">    p2.apply_async(func=consumer, args=(q2,&#x27;xiaoxiao&#x27;))</span><br><span class="line">    p2.apply_async(func=consumer, args=(q2,&#x27;x&#x27;))</span><br><span class="line">    p2.apply_async(func=consumer, args=(q2,&#x27;xy&#x27;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # c1 = Process(target=consumer,args=(q,&#x27;mengmeng&#x27;))</span><br><span class="line">    # c2 = Process(target=consumer,args=(q,&#x27;xiaoxiao&#x27;))</span><br><span class="line">    p1.close()</span><br><span class="line">    p2.close()</span><br><span class="line">    p1.join()</span><br><span class="line">    # c1.start()</span><br><span class="line">    # c2.start()</span><br><span class="line"></span><br><span class="line">    # 让主程序可以等待子进程的结束.</span><br><span class="line">    # p1.join()</span><br><span class="line">    # p2.join()</span><br><span class="line">    # 生产者的进程结束,这里需要放置两个空值,供消费者获取,用来判断已经没有存货了</span><br><span class="line">    # q.put(None)</span><br><span class="line">    # q.put(None)</span><br><span class="line"></span><br><span class="line">    print(&#x27;主程序结束..........&#x27;)</span><br><span class="line">    end_time = time.time()</span><br><span class="line">    print(end_time - start_time)</span><br></pre></td></tr></table></figure>





<h3 id="managers"><a href="#Managers" class="headerlink" title="Managers"></a><strong>Managers</strong><a href="#managers" class="header-anchor">#</a></h3><p>Queue和Pipe只是实现了数据交互，并没实现数据共享，即一个进程去更改另一个进程的数据。那么就要用到Managers</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from multiprocessing import Process, Manager</span><br><span class="line"></span><br><span class="line">def fun1(dic,lis,index):</span><br><span class="line"></span><br><span class="line">    dic[index] = &#x27;a&#x27;</span><br><span class="line">    dic[&#x27;2&#x27;] = &#x27;b&#x27;    </span><br><span class="line">    lis.append(index)    #[0,1,2,3,4,0,1,2,3,4,5,6,7,8,9]</span><br><span class="line">    #print(l)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    with Manager() as manager:</span><br><span class="line">        dic = manager.dict()#注意字典的声明方式，不能直接通过&#123;&#125;来定义</span><br><span class="line">        l = manager.list(range(5))#[0,1,2,3,4]</span><br><span class="line"></span><br><span class="line">        process_list = []</span><br><span class="line">        for i in range(10):</span><br><span class="line">            p = Process(target=fun1, args=(dic,l,i))</span><br><span class="line">            p.start()</span><br><span class="line">            process_list.append(p)</span><br><span class="line"></span><br><span class="line">        for res in process_list:</span><br><span class="line">            res.join()</span><br><span class="line">        print(dic)</span><br><span class="line">        print(l)</span><br></pre></td></tr></table></figure>

<h1 id="进程池"><a href="#进程池" class="headerlink" title="进程池"></a>进程池<a href="#进程池" class="header-anchor">#</a></h1><p>进程池内部维护一个进程序列，当使用时，则去进程池中获取一个进程，如果进程池序列中没有可供使用的进程，那么程序就会等待，直到进程池中有可用进程为止。就是固定有几个进程可以使用。</p>
<p>进程池中有两个方法：</p>
<p>apply：同步，一般不使用</p>
<p>apply_async：异步</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from  multiprocessing import Process,Pool</span><br><span class="line">import os, time, random</span><br><span class="line"></span><br><span class="line">def fun1(name):</span><br><span class="line">    print(&#x27;Run task %s (%s)...&#x27; % (name, os.getpid()))</span><br><span class="line">    start = time.time()</span><br><span class="line">    time.sleep(random.random() * 3)</span><br><span class="line">    end = time.time()</span><br><span class="line">    print(&#x27;Task %s runs %0.2f seconds.&#x27; % (name, (end - start)))</span><br><span class="line"></span><br><span class="line">if __name__==&#x27;__main__&#x27;:</span><br><span class="line">    pool = Pool(5) #创建一个5个进程的进程池</span><br><span class="line"></span><br><span class="line">    for i in range(10):</span><br><span class="line">        pool.apply_async(func=fun1, args=(i,))</span><br><span class="line"></span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    print(&#x27;结束测试&#x27;)</span><br></pre></td></tr></table></figure>

<p>对<code>Pool</code>对象调用<code>join()</code>方法会等待所有子进程执行完毕，调用<code>join()</code>之前必须先调用<code>close()</code>，调用<code>close()</code>之后就不能继续添加新的<code>Process</code>了。</p>
<h3 id="进程池map方法"><a href="#进程池map方法" class="headerlink" title="进程池map方法"></a><strong>进程池map方法</strong><a href="#进程池map方法" class="header-anchor">#</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import os </span><br><span class="line">import PIL </span><br><span class="line"></span><br><span class="line">from multiprocessing import Pool </span><br><span class="line">from PIL import Image</span><br><span class="line"></span><br><span class="line">SIZE = (75,75)</span><br><span class="line">SAVE_DIRECTORY = \&#x27;thumbs\&#x27;</span><br><span class="line"></span><br><span class="line">def get_image_paths(folder):</span><br><span class="line">    return (os.path.join(folder, f) </span><br><span class="line">            for f in os.listdir(folder) </span><br><span class="line">            if \&#x27;jpeg\&#x27; in f)</span><br><span class="line"></span><br><span class="line">def create_thumbnail(filename): </span><br><span class="line">    im = Image.open(filename)</span><br><span class="line">    im.thumbnail(SIZE, Image.ANTIALIAS)</span><br><span class="line">    base, fname = os.path.split(filename) </span><br><span class="line">    save_path = os.path.join(base, SAVE_DIRECTORY, fname)</span><br><span class="line">    im.save(save_path)</span><br><span class="line"></span><br><span class="line">if __name__ == \&#x27;__main__\&#x27;:</span><br><span class="line">    folder = os.path.abspath(</span><br><span class="line">        \&#x27;11_18_2013_R000_IQM_Big_Sur_Mon__e10d1958e7b766c3e840\&#x27;)</span><br><span class="line">    os.mkdir(os.path.join(folder, SAVE_DIRECTORY))</span><br><span class="line"></span><br><span class="line">    images = get_image_paths(folder)</span><br><span class="line"></span><br><span class="line">    pool = Pool()</span><br><span class="line">    pool.map(creat_thumbnail, images) #关键点，images是一个可迭代对象</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br></pre></td></tr></table></figure>





<h1 id="参考方法"><a href="#参考方法" class="headerlink" title="参考方法"></a>参考方法<a href="#参考方法" class="header-anchor">#</a></h1><p><a href="https://zhuanlan.zhihu.com/p/64702600">一篇文章搞定Python多进程</a></p>
<p><a href="https://blog.csdn.net/ubuntu64fan/article/details/51898740">python 如何优雅地退出子进程</a></p>
<p><a href="https://blog.csdn.net/qq_43475705/article/details/115518463"> python多进程多线程,多个程序同时运行</a></p>
<p><a href="https://blog.csdn.net/qq_17127427/article/details/116532097">pytorch多模型异步推理</a></p>
]]></content>
  </entry>
  <entry>
    <title>python_base</title>
    <url>/article/python-base/</url>
    <content><![CDATA[<h1 id="initpy"><a href="#init-py" class="headerlink" title="init.py"></a><strong>init</strong>.py<a href="#initpy" class="header-anchor">#</a></h1><p>首先，module其实就是一个.py文件，中文名为模块，其内置有各种函数和类与变量等。而package就是一个包含很多subpackage或者module(.py文件)的一个包。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/16486710-40ddf50fd0d6b105.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/format/webp" alt="img"></p>
<p>一个directories 只有包含__init__.py文件才会被python识别成package。只有在import package时，才会执行package目录下的__init__.py文件。</p>
<p>若文件结构如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mypackage</span><br><span class="line">    ——__init__.py</span><br><span class="line">    ——subpackage_1</span><br><span class="line">        ——__init__.py</span><br><span class="line">        ——test11.py</span><br><span class="line">        ——test12.py</span><br><span class="line">    ——subpackage_2</span><br><span class="line">        ——__init__.py</span><br><span class="line">        ——test21.py</span><br><span class="line">        ——test22.py</span><br></pre></td></tr></table></figure>



<h1 id="pickle-json"><a href="#pickle-json" class="headerlink" title="pickle, json"></a>pickle, json<a href="#pickle-json" class="header-anchor">#</a></h1><p>都是四个函数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pickle.dumps()：将 Python 中的对象序列化成二进制对象，并返回；</span><br><span class="line">pickle.loads()：读取给定的二进制对象数据，并将其转换为 Python 对象；</span><br><span class="line">pickle.dump()：将 Python 中的对象序列化成二进制对象，并写入文件；</span><br><span class="line">pickle.load()：读取指定的序列化数据文件，并返回对象。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">json.load()从文件中读取json字符串</span><br><span class="line">json.loads()将json字符串转换为字典类型</span><br><span class="line">json.dumps()将python中的字典类型转换为字符串类型</span><br><span class="line">json.dump()将json格式字符串写到文件中</span><br></pre></td></tr></table></figure>



<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料<a href="#参考资料" class="header-anchor">#</a></h1><p><a href="https://www.jianshu.com/p/eaae9678a779"><strong>init</strong>.py文件与__all__变量</a></p>
<p><a href="https://blog.csdn.net/yucicheung/article/details/79445350">python模块中__init__.py的作用</a></p>
<p><a href="https://www.cnblogs.com/qi-yuan-008/p/12827918.html">Python：<strong>init</strong>.py文件和、<strong>all__、import、__name__、__doc</strong> </a></p>
]]></content>
  </entry>
  <entry>
    <title>theme</title>
    <url>/article/theme/</url>
    <content><![CDATA[<h3 id="更改主题"><a href="#更改主题" class="headerlink" title="更改主题"></a>更改主题<a href="#更改主题" class="header-anchor">#</a></h3><p>进入命令行，下载 NexT 主题，输入:</p>
<p><code>git clone https://github.com/theme-next/hexo-theme-next themes/next</code></p>
<p>修改站点配置文件<code>_config.yml</code>，找到如下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: landscape</span><br></pre></td></tr></table></figure>

<p>将 landscape 修改为 next 即可。</p>
<span id="more"></span>

<h3 id="隐藏网页底部-powered-by-hexo-强力驱动"><a href="#隐藏网页底部-powered-By-Hexo-强力驱动" class="headerlink" title="隐藏网页底部 powered By Hexo / 强力驱动"></a>隐藏网页底部 powered By Hexo / 强力驱动<a href="#隐藏网页底部-powered-by-hexo-强力驱动" class="header-anchor">#</a></h3><p>打开 themes/next/layout/_partials/footer.swig</p>
<p>找到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.footer.powered.enable %&#125;</span><br><span class="line">&lt;div class=&quot;powered-by&quot;&gt;&#123;#</span><br><span class="line">#&#125;&#123;&#123; __(&#x27;footer.powered&#x27;, &#x27;&lt;a class=&quot;theme-link&quot; target=&quot;_blank&quot;&#x27; + nofollow + &#x27; href=&quot;https://hexo.io&quot;&gt;Hexo&lt;/a&gt;&#x27;) &#125;&#125;&#123;% if theme.footer.powered.version %&#125; v&#123;&#123; hexo_env(&#x27;version&#x27;) &#125;&#125;&#123;% endif %&#125;&#123;#</span><br><span class="line">#&#125;&lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% if theme.footer.powered.enable and theme.footer.theme.enable %&#125;</span><br><span class="line">&lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% if theme.footer.theme.enable %&#125;</span><br><span class="line">&lt;div class=&quot;theme-info&quot;&gt;&#123;#</span><br><span class="line">#&#125;&#123;&#123; __(&#x27;footer.theme&#x27;) &#125;&#125; – &#123;#</span><br><span class="line">#&#125;&lt;a class=&quot;theme-link&quot; target=&quot;_blank&quot;&#123;&#123; nofollow &#125;&#125; href=&quot;https://theme-next.org&quot;&gt;&#123;#</span><br><span class="line">#&#125;NexT.&#123;&#123; theme.scheme &#125;&#125;&#123;#</span><br><span class="line">#&#125;&lt;/a&gt;&#123;% if theme.footer.theme.version %&#125; v&#123;&#123; version &#125;&#125;&#123;% endif %&#125;&#123;#</span><br><span class="line">#&#125;&lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>把这段代码首尾分别加上：<code>&lt;!--</code> 和<code>--&gt;</code>，或者直接删除。</p>
<h3 id="统计字数和阅读时间"><a href="#统计字数和阅读时间" class="headerlink" title="统计字数和阅读时间"></a>统计字数和阅读时间<a href="#统计字数和阅读时间" class="header-anchor">#</a></h3><p>安装插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure>

<p>在站点配置文件_config.yml中添加如下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  symbols: true</span><br><span class="line">  time: true</span><br><span class="line">  total_symbols: true</span><br><span class="line">  total_time: true</span><br></pre></td></tr></table></figure>



<p>在主题配置文件找到对应代码修改为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  separated_meta: true</span><br><span class="line">  item_text_post: true</span><br><span class="line">  item_text_total: false</span><br><span class="line">  awl: 4</span><br><span class="line">  wpm: 275</span><br></pre></td></tr></table></figure>

<p>最后：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g </span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>





<h3 id="文档加密"><a href="#文档加密" class="headerlink" title="文档加密"></a>文档加密<a href="#文档加密" class="header-anchor">#</a></h3><p>安装插件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-blog-encrypt</span><br></pre></td></tr></table></figure>

<p>在站点配置文件中启用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">encrypt:</span><br><span class="line">    enable: true</span><br></pre></td></tr></table></figure>

<p>然后在文章头部加上对应字段password, abstract, message</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章加密</span><br><span class="line">date: 2019-01-04T22:20:13.000Z</span><br><span class="line">category: 教程</span><br><span class="line">tags:</span><br><span class="line">  - 博客</span><br><span class="line">  - Hexo</span><br><span class="line">keywords: 博客文章密码</span><br><span class="line">password: TloveY</span><br><span class="line">abstract: 密码：TloveY</span><br><span class="line">message:  输入密码，查看文章</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">password: 是该博客加密使用的密码</span><br><span class="line">abstract: 是该博客的摘要，会显示在博客的列表页</span><br><span class="line">message: 这个是博客查看时，密码输入框上面的描述性文字</span><br></pre></td></tr></table></figure>

<h3 id="部分显示"><a href="#部分显示" class="headerlink" title="部分显示"></a>部分显示<a href="#部分显示" class="header-anchor">#</a></h3><ol>
<li><p>写概述</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 让首页显示部分内容</span><br><span class="line">date: 2020-02-23 22:55:10</span><br><span class="line">description: 这是显示在首页的概述，正文内容均会被隐藏。</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li>
<li><p>文章截断</p>
<p>在需要的地方插入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>result_record</title>
    <url>/article/result-record/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="4c4b9bb42ea02a9c4f12cbb619927a37672052d7ec732725df69faf6a4e78438"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">st结果记录2</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>加密</tag>
      </tags>
  </entry>
  <entry>
    <title>todo_list</title>
    <url>/article/todo-list/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>tqdm使用</title>
    <url>/article/tqdm%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用<a href="#基本使用" class="header-anchor">#</a></h1><ol>
<li><p>迭代的形式</p>
<p>使用<code>tqdm()</code>封装可迭代的对象：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from tqdm import tqdm</span><br><span class="line">from time import sleep</span><br><span class="line"></span><br><span class="line">text = &quot;&quot;</span><br><span class="line">for char in tqdm([&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]):</span><br><span class="line">    sleep(0.25)</span><br><span class="line">    text = text + char</span><br></pre></td></tr></table></figure>

<span id="more"></span></li>
<li><p>手动的形式</p>
<p>除了迭代的形式，你可以手动控制进度，加一个tqdm上下文即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">with tqdm(total=100) as pbar:</span><br><span class="line">    for i in range(10):</span><br><span class="line">        sleep(0.1)</span><br><span class="line">        pbar.update(10)</span><br></pre></td></tr></table></figure>

<p>上述例子中，pbar 是 tpdm 的“进度”，每一次对 pbar 进行 update 10 都相当于进度加10。</p>
<p>也可以不是上下文形式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pbar = tqdm(total=100)</span><br><span class="line">for i in range(10):</span><br><span class="line">    sleep(0.1)</span><br><span class="line">    pbar.update(10)</span><br><span class="line">pbar.close()</span><br></pre></td></tr></table></figure></li>
<li><p>观察处理的数据</p>
<p>通过<code>tqdm</code>提供的<code>set_description</code>方法可以实时查看每次处理的数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from tqdm import tqdm</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">pbar = tqdm([&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;])</span><br><span class="line">for c in pbar:</span><br><span class="line">  time.sleep(1)</span><br><span class="line">  pbar.set_description(&quot;Processing %s&quot;%c)</span><br></pre></td></tr></table></figure></li>
<li><p>linux命令行进度条</p>
<p>不使用tqdm</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ time find . -name &#x27;*.py&#x27; -type f -exec cat \&#123;&#125; \; | wc -l</span><br><span class="line">857365</span><br><span class="line"></span><br><span class="line">real  0m3.458s</span><br><span class="line">user  0m0.274s</span><br><span class="line">sys   0m3.325s</span><br></pre></td></tr></table></figure>

<p>使用tqdm</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ time find . -name &#x27;*.py&#x27; -type f -exec cat \&#123;&#125; \; | tqdm | wc -l</span><br><span class="line">857366it [00:03, 246471.31it/s]</span><br><span class="line">857365</span><br><span class="line"></span><br><span class="line">real  0m3.585s</span><br><span class="line">user  0m0.862s</span><br><span class="line">sys   0m3.358s</span><br></pre></td></tr></table></figure>

<p>指定tqdm的参数控制进度条</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ find . -name &#x27;*.py&#x27; -type f -exec cat \&#123;&#125; \; |</span><br><span class="line">  tqdm --unit loc --unit_scale --total 857366 &gt;&gt; /dev/null</span><br><span class="line">100%|███████████████████████████████████| 857K/857K [00:04&lt;00:00, 246Kloc/s]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ 7z a -bd -r backup.7z docs/ | grep Compressing |</span><br><span class="line">  tqdm --total $(find docs/ -type f | wc -l) --unit files &gt;&gt; backup.log</span><br><span class="line">100%|███████████████████████████████▉| 8014/8014 [01:37&lt;00:00, 82.29files/s]</span><br></pre></td></tr></table></figure></li>
<li><p>自定义进度条显示信息</p>
<p>通过<code>set_description</code>和<code>set_postfix</code>方法设置进度条显示信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from tqdm import trange</span><br><span class="line">from random import random,randint</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">with trange(100) as t:</span><br><span class="line">  for i in t:</span><br><span class="line">    #设置进度条左边显示的信息</span><br><span class="line">    t.set_description(&quot;GEN %i&quot;%i)</span><br><span class="line">    #设置进度条右边显示的信息</span><br><span class="line">    t.set_postfix(loss=random(),gen=randint(1,999),str=&quot;h&quot;,lst=[1,2])</span><br><span class="line">    time.sleep(0.1)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from tqdm import tqdm</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">with tqdm(total=10,bar_format=&quot;&#123;postfix[0]&#125;&#123;postfix[1][value]:&gt;9.3g&#125;&quot;,</span><br><span class="line">     postfix=[&quot;Batch&quot;,dict(value=0)]) as t:</span><br><span class="line">  for i in range(10):</span><br><span class="line">    time.sleep(0.05)</span><br><span class="line">    t.postfix[1][&quot;value&quot;] = i / 2</span><br><span class="line">    t.update()</span><br></pre></td></tr></table></figure></li>
<li><p>多层循环进度条</p>
<p>通过<code>tqdm</code>也可以很简单的实现嵌套循环进度条的展示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from tqdm import tqdm</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">for i in tqdm(range(20), ascii=True,desc=&quot;1st loop&quot;):</span><br><span class="line">  for j in tqdm(range(10), ascii=True,desc=&quot;2nd loop&quot;):</span><br><span class="line">    time.sleep(0.01)</span><br></pre></td></tr></table></figure></li>
<li><p>多进程进度条</p>
<p>在使用多进程处理任务的时候，通过tqdm可以实时查看每一个进程任务的处理情况</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from time import sleep</span><br><span class="line">from tqdm import trange, tqdm</span><br><span class="line">from multiprocessing import Pool, freeze_support, RLock</span><br><span class="line"></span><br><span class="line">L = list(range(9))</span><br><span class="line"></span><br><span class="line">def progresser(n):</span><br><span class="line">  interval = 0.001 / (n + 2)</span><br><span class="line">  total = 5000</span><br><span class="line">  text = &quot;#&#123;&#125;, est. &#123;:&lt;04.2&#125;s&quot;.format(n, interval * total)</span><br><span class="line">  for i in trange(total, desc=text, position=n,ascii=True):</span><br><span class="line">    sleep(interval)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">  freeze_support() # for Windows support</span><br><span class="line">  p = Pool(len(L),</span><br><span class="line">       # again, for Windows support</span><br><span class="line">       initializer=tqdm.set_lock, initargs=(RLock(),))</span><br><span class="line">  p.map(progresser, L)</span><br><span class="line">  print(&quot;\n&quot; * (len(L) - 2))</span><br></pre></td></tr></table></figure></li>
<li><p>pandas中使用tqdm</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line">from tqdm import tqdm</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.random.randint(0, 100, (100000, 6)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tqdm.pandas(desc=&quot;my bar!&quot;)</span><br><span class="line">df.progress_apply(lambda x: x**2)</span><br></pre></td></tr></table></figure></li>
<li><p>递归使用进度条</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from tqdm import tqdm</span><br><span class="line">import os.path</span><br><span class="line"></span><br><span class="line">def find_files_recursively(path, show_progress=True):</span><br><span class="line">  files = []</span><br><span class="line">  # total=1 assumes `path` is a file</span><br><span class="line">  t = tqdm(total=1, unit=&quot;file&quot;, disable=not show_progress)</span><br><span class="line">  if not os.path.exists(path):</span><br><span class="line">    raise IOError(&quot;Cannot find:&quot; + path)</span><br><span class="line"></span><br><span class="line">  def append_found_file(f):</span><br><span class="line">    files.append(f)</span><br><span class="line">    t.update()</span><br><span class="line"></span><br><span class="line">  def list_found_dir(path):</span><br><span class="line">    &quot;&quot;&quot;returns os.listdir(path) assuming os.path.isdir(path)&quot;&quot;&quot;</span><br><span class="line">    try:</span><br><span class="line">      listing = os.listdir(path)</span><br><span class="line">    except:</span><br><span class="line">      return []</span><br><span class="line">    # subtract 1 since a &quot;file&quot; we found was actually this directory</span><br><span class="line">    t.total += len(listing) - 1</span><br><span class="line">    # fancy way to give info without forcing a refresh</span><br><span class="line">    t.set_postfix(dir=path[-10:], refresh=False)</span><br><span class="line">    t.update(0) # may trigger a refresh</span><br><span class="line">    return listing</span><br><span class="line"></span><br><span class="line">  def recursively_search(path):</span><br><span class="line">    if os.path.isdir(path):</span><br><span class="line">      for f in list_found_dir(path):</span><br><span class="line">        recursively_search(os.path.join(path, f))</span><br><span class="line">    else:</span><br><span class="line">      append_found_file(path)</span><br><span class="line"></span><br><span class="line">  recursively_search(path)</span><br><span class="line">  t.set_postfix(dir=path)</span><br><span class="line">  t.close()</span><br><span class="line">  return files</span><br><span class="line"></span><br><span class="line">find_files_recursively(&quot;E:/&quot;)</span><br></pre></td></tr></table></figure></li>
<li><p>注意</p>
<p>在使用<code>tqdm</code>显示进度条的时候，如果代码中存在<code>print</code>可能会导致输出多行进度条，此时可以将<code>print</code>语句改为<code>tqdm.write</code>，代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for i in tqdm(range(10),ascii=True):</span><br><span class="line">  tqdm.write(&quot;come on&quot;)</span><br><span class="line">  time.sleep(0.1)</span><br></pre></td></tr></table></figure></li>
<li><p>alive-process 花式进度条</p>
</li>
</ol>
<p><a href="https://jishuin.proginn.com/p/763bfbd55bf8">酷炫的 Python 进度条开源库：alive-progress-技术圈 (proginn.com)</a></p>
]]></content>
  </entry>
  <entry>
    <title>train_record</title>
    <url>/article/train-record/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="e264ac60c2555ee3997523e707da290c483929a3284340a29714a42bd49c36b4"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>加密</tag>
      </tags>
  </entry>
  <entry>
    <title>yolov5_real</title>
    <url>/article/yolov5_real/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="f281726046ff286c623499316bb8cbbc90b82801fb06498db63cc804ff6b0b77"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>加密</tag>
      </tags>
  </entry>
  <entry>
    <title>yolox训练自定义数据集</title>
    <url>/article/yolox%E8%AE%AD%E7%BB%83%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E9%9B%86/</url>
    <content><![CDATA[<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置<a href="#环境配置" class="header-anchor">#</a></h1><p> 第一步：安装YOLOX</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:Megvii-BaseDetection/YOLOX.git</span><br><span class="line">cd YOLOX</span><br><span class="line">pip3 install -U pip &amp;&amp; pip3 install -r requirements.txt</span><br><span class="line">pip3 install -v -e .  # or  python3 setup.py develop</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>第二步：安装apex</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 如果不想训练模型，可跳过这步。</span><br><span class="line">git clone https://github.com/NVIDIA/apex</span><br><span class="line">cd apex</span><br><span class="line">pip3 install -v --disable-pip-version-check --no-cache-dir --global-option=&quot;--cpp_ext&quot; --global-option=&quot;--cuda_ext&quot; ./</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>此处需要torch的cuda版本和外部环境的cuda版本一致，比如我们的服务器是10.2，那么torch的也要是10.2</p>
<p>可通过<code>torch.version.cuda</code>确认，最好是选择docker来配置。Windows也不推荐，即使是wsl。</p>
<p>第三步： 安装 <a href="https://github.com/cocodataset/cocoapi">pycocotools</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip3 install cython; pip3 install &#x27;git+https://github.com/cocodataset/cocoapi.git#subdirectory=PythonAPI&#x27;</span><br></pre></td></tr></table></figure>



<h1 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置<a href="#修改配置" class="header-anchor">#</a></h1><p>修改<code>exps/example/yolox_voc/yolox_voc_s.py</code>, 主要涉及类别和文件路径</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/fb863c7fbfa25392b426aa319026887b.png" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/b52f331bb2f1f35a057136c8e5b77656.png" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/febec4ac7bf5e614f383ea5932007ffe.png" alt="在这里插入图片描述"></p>
<p>修改<code>yolox/data/datasets/__init__.py</code></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/e4575a30f261ae0371fd460684d41763.png" alt="img"></p>
<p>修改<code>yolox/data/datasets/voc_classes.py</code></p>
<p><img src="image-20210830143808609.png" alt="image-20210830143808609"></p>
<h1 id="开始训练"><a href="#开始训练" class="headerlink" title="开始训练"></a>开始训练<a href="#开始训练" class="header-anchor">#</a></h1><p><code>python tools/train.py -f exps/example/yolox_voc/yolox_voc_s.py -d 1 -b 16 --fp16 -o -c yolox_s.pth</code></p>
<ul>
<li>-d 使用多少张显卡训练</li>
<li>-b 批次大小</li>
<li>–fp16 是否开启半精度训练</li>
</ul>
<h1 id="批量推理"><a href="#批量推理" class="headerlink" title="批量推理"></a>批量推理<a href="#批量推理" class="header-anchor">#</a></h1><p>非官方实现，其实也就是for循环实现的。</p>
<p><code>tools/test_imgs.py</code>:</p>
<p><img src="image-20210830144401995.png" alt="image-20210830144401995"></p>
<p><img src="image-20210830144449907.png" alt="image-20210830144449907"></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料<a href="#参考资料" class="header-anchor">#</a></h1><p><a href="https://zhuanlan.zhihu.com/p/397499216">深入浅出Yolox之自有数据集训练超详细教程 </a></p>
<p><a href="https://blog.csdn.net/qq_39056987/article/details/119002910">YOLOX自定义数据集训练</a></p>
<p><a href="https://github.com/DataXujing/YOLOX-">DataXujing/YOLOX-: YOLOX 训练自己的数据集 TensorRT加速 详细教程</a></p>
]]></content>
  </entry>
  <entry>
    <title>上采样方法</title>
    <url>/article/%E4%B8%8A%E9%87%87%E6%A0%B7%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="pixelshuffle"><a href="#pixelshuffle" class="headerlink" title="pixelshuffle"></a>pixelshuffle<a href="#pixelshuffle" class="header-anchor">#</a></h1><p>上采样可以理解为在同一个位置，原来只是以1:1的比例提取信息，而现在以1:4的比例提取信息，提取信息的频率更高了，所以能反映的细节也就更多。对于tensor来说，在同一个位置多提取信息，也就是通过卷积生成通道数更多的tensor。具体过程为（以一个（n,64,64,64）的特征图为例）</p>
<ol>
<li>通过卷积，得到通道数倍增的特征图（n,64,64,256）</li>
<li>将特征图切割成若干份，对每一份（n,64,64,4）的像素点进行重新排列,reshape成(n,64,64,2,2），再reshape成（n,64,2,64,2），最后reshape成（n,128,128,1），再把这么多份拼接起来，得（n,128,128,64）的特征图</li>
</ol>
<p><img src="image-20210906161758378.png" alt="image-20210906161758378"></p>
<p><img src="image-20210906161922868.png" alt="image-20210906161922868"></p>
<h1 id="upsample"><a href="#upsample" class="headerlink" title="upsample"></a>upsample<a href="#upsample" class="header-anchor">#</a></h1><p>插值方法</p>
<h1 id="转置卷积convtranspose2d"><a href="#转置卷积-ConvTranspose2d" class="headerlink" title="转置卷积(ConvTranspose2d)"></a>转置卷积(ConvTranspose2d)<a href="#转置卷积convtranspose2d" class="header-anchor">#</a></h1><p>填充0后做卷积</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料<a href="#参考资料" class="header-anchor">#</a></h1><p><a href="https://blog.csdn.net/qq_14845119/article/details/107557449">(19条消息) 上采样方法大PK（Upsample，Interpolate，resize，Transposed convolution，deconv，Unpool，Pixelshuffle）_年轻即出发，-CSDN博客</a></p>
<p><a href="https://www.cnblogs.com/oliyoung/p/upsample.html">上采样，上池化，反卷积 - OliYoung - 博客园 (cnblogs.com)</a></p>
<p><a href="https://www.pianshen.com/article/46871443097/">PixelShuffler原理学习笔记 - 程序员大本营 (pianshen.com)</a></p>
<p><a href="https://www.cnblogs.com/jiangkejie/p/12919155.html">pytorch中的上采样（上采样，转置卷积，上池化，PixelShuffle） - 那抹阳光1994 - 博客园 (cnblogs.com)</a></p>
]]></content>
  </entry>
  <entry>
    <title>GBDT_LR</title>
    <url>/article/GBDT-LR/</url>
    <content><![CDATA[<!-- @import "[TOC]" {cmd="toc" depthFrom=1 depthTo=6 orderedList=false} -->

<!-- code_chunk_output -->

<ul>
<li><a href="#1-gbdtlr%E7%AE%80%E4%BB%8B">1. GBDT+LR简介</a></li>
<li><a href="#2-%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E6%A8%A1%E5%9E%8B">2. 逻辑回归模型</a></li>
<li><a href="#3-gbdt%E6%A8%A1%E5%9E%8B">3. GBDT模型</a></li>
<li><a href="#4-gbdtlr%E6%A8%A1%E5%9E%8B">4. GBDT+LR模型</a></li>
</ul>
<!-- /code_chunk_output -->


<h3 id="1-gbdtlr简介"><a href="#1-GBDT-LR简介" class="headerlink" title="1. GBDT+LR简介"></a>1. GBDT+LR简介<a href="#1-gbdtlr简介" class="header-anchor">#</a></h3><p>前面介绍的协同过滤和矩阵分解存在的劣势就是仅利用了用户与物品相互行为信息进行推荐， 忽视了用户自身特征， 物品自身特征以及上下文信息等，导致生成的结果往往会比较片面。 而这次介绍的这个模型是2014年由Facebook提出的GBDT+LR模型， 该模型利用GBDT自动进行特征筛选和组合， 进而生成新的离散特征向量， 再把该特征向量当做LR模型的输入， 来产生最后的预测结果， 该模型能够综合利用用户、物品和上下文等多种不同的特征， 生成较为全面的推荐结果， 在CTR点击率预估场景下使用较为广泛。</p>
<p>下面首先会介绍逻辑回归和GBDT模型各自的原理及优缺点， 然后介绍GBDT+LR模型的工作原理和细节。</p>
<span id="more"></span>

<h3 id="2-逻辑回归模型"><a href="#2-逻辑回归模型" class="headerlink" title="2. 逻辑回归模型"></a>2. 逻辑回归模型<a href="#2-逻辑回归模型" class="header-anchor">#</a></h3><p>逻辑回归模型非常重要， 在推荐领域里面， 相比于传统的协同过滤， 逻辑回归模型能够综合利用用户、物品、上下文等多种不同的特征生成较为“全面”的推荐结果， 关于逻辑回归的更多细节， 可以参考下面给出的链接，这里只介绍比较重要的一些细节和在推荐中的应用。</p>
<p>逻辑回归是在线性回归的基础上加了一个 Sigmoid 函数（非线形）映射，使得逻辑回归成为了一个优秀的分类算法， 学习逻辑回归模型， 首先应该记住一句话：<strong>逻辑回归假设数据服从伯努利分布,通过极大化似然函数的方法，运用梯度下降来求解参数，来达到将数据二分类的目的。</strong></p>
<p>相比于协同过滤和矩阵分解利用用户的物品“相似度”进行推荐， 逻辑回归模型将问题看成了一个分类问题， 通过预测正样本的概率对物品进行排序。这里的正样本可以是用户“点击”了某个商品或者“观看”了某个视频， 均是推荐系统希望用户产生的“正反馈”行为， 因此逻辑回归模型将推荐问题转化成了一个点击率预估问题。而点击率预测就是一个典型的二分类， 正好适合逻辑回归进行处理， 那么逻辑回归是如何做推荐的呢？ 过程如下：</p>
<ol>
<li>将用户年龄、性别、物品属性、物品描述、当前时间、当前地点等特征转成数值型向量</li>
<li>确定逻辑回归的优化目标，比如把点击率预测转换成二分类问题， 这样就可以得到分类问题常用的损失作为目标， 训练模型</li>
<li>在预测的时候， 将特征向量输入模型产生预测， 得到用户“点击”物品的概率</li>
<li>利用点击概率对候选物品排序， 得到推荐列表</li>
</ol>
<p><img src="GBDT-LR/%E6%8E%A8%E6%96%AD%E8%BF%87%E7%A8%8B.png" alt="推断过程"><br>这里的关键就是每个特征的权重参数$w$， 我们一般是使用梯度下降的方式， 首先会先随机初始化参数$w$， 然后将特征向量（也就是我们上面数值化出来的特征）输入到模型， 就会通过计算得到模型的预测概率， 然后通过对目标函数求导得到每个$w$的梯度， 然后进行更新$w$</p>
<p>这里的目标函数长下面这样：</p>
<p>$$ J(w)=-\frac{1}{m}\left(\sum_{i=1}^{m}\left(y^{i} \log f_{w}\left(x^{i}\right)+\left(1-y^{i}\right) \log \left(1-f_{w}\left(x^{i}\right)\right)\right)\right. $$ 求导之后的方式长这样： $$ w_{j} \leftarrow w_{j}-\gamma \frac{1}{m} \sum_{i=1}^{m}\left(f_{w}\left(x^{i}\right)-y^{i}\right) x_{j}^{i} $$ 这样通过若干次迭代， 就可以得到最终的$w$了， 关于这些公式的推导，可以参考下面给出的文章链接， 下面我们分析一下逻辑回归模型的优缺点。</p>
<p>优点：</p>
<ol>
<li>LR模型形式简单，可解释性好，从特征的权重可以看到不同的特征对最后结果的影响。</li>
<li>训练时便于并行化，在预测时只需要对特征进行线性加权，所以性能比较好，往往适合处理海量id类特征，用id类特征有一个很重要的好处，就是防止信息损失（相对于范化的 CTR 特征），对于头部资源会有更细致的描述</li>
<li>资源占用小,尤其是内存。在实际的工程应用中只需要存储权重比较大的特征及特征对应的权重。</li>
<li>方便输出结果调整。逻辑回归可以很方便的得到最后的分类结果，因为输出的是每个样本的概率分数，我们可以很容易的对这些概率分数进行cutoff，也就是划分阈值(大于某个阈值的是一类，小于某个阈值的是一类)</li>
</ol>
<p>当然， 逻辑回归模型也有一定的局限性</p>
<ol>
<li>表达能力不强， 无法进行特征交叉， 特征筛选等一系列“高级“操作（这些工作都得人工来干， 这样就需要一定的经验， 否则会走一些弯路）， 因此可能造成信息的损失</li>
<li>准确率并不是很高。因为这毕竟是一个线性模型加了个sigmoid， 形式非常的简单(非常类似线性模型)，很难去拟合数据的真实分布</li>
<li>处理非线性数据较麻烦。逻辑回归在不引入其他方法的情况下，只能处理线性可分的数据， 如果想处理非线性， 首先对连续特征的处理需要先进行离散化（离散化的目的是为了引入非线性），如上文所说，人工分桶的方式会引入多种问题。</li>
<li>LR 需要进行人工特征组合，这就需要开发者有非常丰富的领域经验，才能不走弯路。这样的模型迁移起来比较困难，换一个领域又需要重新进行大量的特征工程。</li>
</ol>
<p>所以如何自动发现有效的特征、特征组合，弥补人工经验不足，缩短LR特征实验周期，是亟需解决的问题， 而GBDT模型， 正好可以自动发现特征并进行有效组合</p>
<h3 id="3-gbdt模型"><a href="#3-GBDT模型" class="headerlink" title="3. GBDT模型"></a>3. GBDT模型<a href="#3-gbdt模型" class="header-anchor">#</a></h3><p>GBDT全称梯度提升决策树，在传统机器学习算法里面是对真实分布拟合的最好的几种算法之一，在前几年深度学习还没有大行其道之前，gbdt在各种竞赛是大放异彩。原因大概有几个，一是效果确实挺不错。二是即可以用于分类也可以用于回归。三是可以筛选特征， 所以这个模型依然是一个非常重要的模型。</p>
<p>GBDT是通过采用加法模型(即基函数的线性组合），以及不断减小训练过程产生的误差来达到将数据分类或者回归的算法， 其训练过程如下：<br><img src="GBDT-LR/GBDT.png" alt="GBDT"></p>
<p>gbdt通过多轮迭代， 每轮迭代会产生一个弱分类器， 每个分类器在上一轮分类器的残差基础上进行训练。 gbdt对弱分类器的要求一般是足够简单， 并且低方差高偏差。 因为训练的过程是通过降低偏差来不断提高最终分类器的精度。 由于上述高偏差和简单的要求，每个分类回归树的深度不会很深。最终的总分类器是将每轮训练得到的弱分类器加权求和得到的（也就是加法模型）。<br>关于GBDT的详细细节，依然是可以参考下面给出的链接。这里想分析一下GBDT如何来进行二分类的，因为我们要明确一点就是gbdt 每轮的训练是在上一轮的训练的残差基础之上进行训练的， 而这里的残差指的就是当前模型的负梯度值， 这个就要求每轮迭代的时候，弱分类器的输出的结果相减是有意义的， 而gbdt 无论用于分类还是回归一直都是使用的CART 回归树， 那么既然是回归树， 是如何进行二分类问题的呢？</p>
<p>GBDT 来解决二分类问题和解决回归问题的本质是一样的，都是通过不断构建决策树的方式，使预测结果一步步的接近目标值， 但是二分类问题和回归问题的损失函数是不同的， 关于GBDT在回归问题上的树的生成过程， 损失函数和迭代原理可以参考给出的链接， 回归问题中一般使用的是平方损失， 而二分类问题中， GBDT和逻辑回归一样， 使用的下面这个：</p>
<p>$$ L=\arg \min \left[\sum_{i}^{n}-\left(y_{i} \log \left(p_{i}\right)+\left(1-y_{i}\right) \log \left(1-p_{i}\right)\right)\right] $$ 其中， $y_i$是第$i$个样本的观测值， 取值要么是0要么是1， 而$p_i$是第$i$个样本的预测值， 取值是0-1之间的概率，由于我们知道GBDT拟合的残差是当前模型的负梯度， 那么我们就需要求出这个模型的导数， 即$\frac{dL}{dp_i}$， 对于某个特定的样本， 求导的话就可以只考虑它本身， 去掉加和号， 那么就变成了$\frac{dl}{dp_i}$， 其中$l$如下：<br>$$ \begin{aligned} l &amp;=-y_{i} \log \left(p_{i}\right)-\left(1-y_{i}\right) \log \left(1-p_{i}\right) \<br> &amp;=-y_{i} \log \left(p_{i}\right)-\log \left(1-p_{i}\right)+y_{i} \log \left(1-p_{i}\right) \<br>&amp;=-y_{i}\left(\log \left(\frac{p_{i}}{1-p_{i}}\right)\right)-\log \left(1-p_{i}\right) \end{aligned} $$ 如果对逻辑回归非常熟悉的话， $\left(\log \left(\frac{p_{i}}{1-p_{i}}\right)\right)$一定不会陌生吧， 这就是对几率比取了个对数， 并且在逻辑回归里面这个式子会等于$\theta X$， 所以才推出了$p_i=\frac{1}{1+e^{-\theta X}}$的那个形式。 这里令$\eta_i=\frac{p_i}{1-p_i}$, 即$p_i=\frac{\eta_i}{1+\eta_i}$, 则上面这个式子变成了：</p>
<p>$$ \begin{aligned} l &amp;=-y_{i} \log \left(\eta_{i}\right)-\log \left(1-\frac{e^{\log \left(\eta_{i}\right)}}{1+e^{\log \left(\eta_{i}\right)}}\right) \<br>&amp;=-y_{i} \log \left(\eta_{i}\right)-\log \left(\frac{1}{1+e^{\log \left(\eta_{i}\right)}}\right) \<br>&amp;=-y_{i} \log \left(\eta_{i}\right)+\log \left(1+e^{\log \left(\eta_{i}\right)}\right) \end{aligned} $$ 这时候，我们对$log(\eta_i)$求导， 得 $$ \frac{d l}{d \log (\eta_i)}=-y_{i}+\frac{e^{\log \left(\eta_{i}\right)}}{1+e^{\log \left(\eta_{i}\right)}}=-y_i+p_i $$ 这样， 我们就得到了某个训练样本在当前模型的梯度值了， 那么残差就是$y_i-p_i$。GBDT二分类的这个思想，其实和逻辑回归的思想一样，逻辑回归是用一个线性模型去拟合$P(y=1|x)$这个事件的对数几率$log\frac{p}{1-p}=\theta^Tx$， GBDT二分类也是如此， 用一系列的梯度提升树去拟合这个对数几率， 其分类模型可以表达为： $$ P(Y=1 \mid x)=\frac{1}{1+e^{-F_{M}(x)}} $$</p>
<p>下面我们具体来看GBDT的生成过程， 构建分类GBDT的步骤有两个：</p>
<ol>
<li>初始化GBDT 和回归问题一样， 分类 GBDT 的初始状态也只有一个叶子节点，该节点为所有样本的初始预测值，如下： $$ F_{0}(x)=\arg \min _{\gamma} \sum{i=1}^{n} L(y, \gamma) $$ 上式里面， $F$代表GBDT模型， $F_0$是模型的初识状态， 该式子的意思是找到一个$\gamma$，使所有样本的 Loss 最小，在这里及下文中，$\gamma$都表示节点的输出，即叶子节点， 且它是一个 $log(\eta_i)$ 形式的值(回归值)，在初始状态，$\gamma =F_0$。</li>
</ol>
<p>下面看例子(该例子来自下面的第二个链接)， 假设我们有下面3条样本：<br><img src="GBDT-LR/%E8%A1%A8%E6%A0%BC.png" alt="表格"></p>
<pre><code>     我们希望构建 GBDT 分类树，它能通过「喜欢爆米花」、「年龄」和「颜色偏好」这 3 个特征来预测某一个样本是否喜欢看电影。            我们把数据代入上面的公式中求Loss:
</code></pre>
<p>$$ \operatorname{Loss}=L(1, \gamma)+L(1, \gamma)+L(0, \gamma) $$ 为了令其最小， 我们求导， 且让导数为0， 则：</p>
<p>$$ \operatorname{Loss}=p-1 + p-1+p=0 $$ 于是， 就得到了初始值$p=\frac{2}{3}=0.67, \gamma=log(\frac{p}{1-p})=0.69$, 模型的初识状态$F_0(x)=0.69$</p>
<p>循环生成决策树 这里回忆一下回归树的生成步骤， 其实有4小步， 第一就是计算负梯度值得到残差， 第二步是用回归树拟合残差， 第三步是计算叶子节点的输出值， 第四步是更新模型。 下面我们一一来看：</p>
<ol>
<li>计算负梯度得到残差 $$ r_{i m}=-\left[\frac{\partial L\left(y_{i}, F\left(x_{i}\right)\right)}{\partial F\left(x_{i}\right)}\right]{F(x)=F_{m-1}(x)} $$ 此处使用$m-1$棵树的模型， 计算每个样本的残差$r_{im}$, 就是上面的$y_i-pi$, 于是例子中， 每个样本的残差：<br><img src="GBDT-LR/%E6%AE%8B%E5%B7%AE.png" alt="残差"></li>
<li>使用回归树来拟合$r_{im}$， 这里的$i$表示样本哈，回归树的建立过程可以参考下面的链接文章，简单的说就是遍历每个特征， 每个特征下遍历每个取值， 计算分裂后两组数据的平方损失， 找到最小的那个划分节点。 假如我们产生的第2棵决策树如下：<br><img src="GBDT-LR/%E5%88%86%E8%A3%82.png" alt="分裂"></li>
<li>对于每个叶子节点$j$, 计算最佳残差拟合值 $$ \gamma <em>{j m}=\arg \min <em>{\gamma} \sum</em> {x \in R</em>{i j}} {L\left(y_{i}, F_{m-1}\left(x_{i}\right)+\gamma\right)} $$ 意思是， 在刚构建的树$m$中， 找到每个节点$j$的输出$\gamma_{jm}$, 能使得该节点的loss最小。 那么我们看一下这个$\gamma$的求解方式， 这里非常的巧妙。 首先， 我们把损失函数写出来， 对于左边的第一个样本， 有 $$ L\left(y_{1}, F_{m-1}\left(x_{1}\right)+\gamma\right)=-y_{1}\left(F_{m-1}\left(x_{1}\right)+\gamma\right)+\log \left(1+e^{F_{m-1}\left(x_{1}\right)+\gamma}\right) $$ 这个式子就是上面推导的$l$， 因为我们要用回归树做分类， 所以这里把分类的预测概率转换成了对数几率回归的形式， 即$log(\eta_i)$， 这个就是模型的回归输出值。而如果求这个损失的最小值， 我们要求导， 解出令损失最小的$\gamma$。 但是上面这个式子求导会很麻烦， 所以这里介绍了一个技巧就是使用二阶泰勒公式来近似表示该式， 再求导， 还记得伟大的泰勒吗？ $$ f(x+\Delta x) \approx f(x)+\Delta x f^{\prime}(x)+\frac{1}{2} \Delta x^{2} f^{\prime \prime}(x)+O(\Delta x) $$ 这里就相当于把$L(y_1, F_{m-1}(x_1))$当做常量$f(x)$， $\gamma$作为变量$\Delta x$， 将$f(x)$二阶展开： $$ L\left(y_{1}, F_{m-1}\left(x_{1}\right)+\gamma\right) \approx L\left(y_{1}, F_{m-1}\left(x_{1}\right)\right)+L^{\prime}\left(y_{1}, F_{m-1}\left(x_{1}\right)\right) \gamma+\frac{1}{2} L^{\prime \prime}\left(y_{1}, F_{m-1}\left(x_{1}\right)\right) \gamma^{2} $$ 这时候再求导就简单了 $$ \frac{d L}{d \gamma}=L^{\prime}\left(y_{1}, F_{m-1}\left(x_{1}\right)\right)+L^{\prime \prime}\left(y_{1}, F_{m-1}\left(x_{1}\right)\right) \gamma $$ Loss最小的时候， 上面的式子等于0， 就可以得到$\gamma$: $$ \gamma_{11}=\frac{-L^{\prime}\left(y_{1}, F_{m-1}\left(x_{1}\right)\right)}{L^{\prime \prime}\left(y_{1}, F_{m-1}\left(x_{1}\right)\right)} $$ 因为分子就是残差(上述已经求到了)， 分母可以通过对残差求导，得到原损失函数的二阶导： $$ \begin{aligned} L^{\prime \prime}\left(y_{1}, F(x)\right) &amp;=\frac{d L^{\prime}}{d \log (\eta_1)} \ &amp;=\frac{d}{d \log (\eta_1)}\left[-y_{i}+\frac{e^{\log (\eta_1)}}{1+e^{\log (\eta_1)}}\right] \ &amp;=\frac{d}{d \log (\eta_1)}\left[e^{\log (\eta_1)}\left(1+e^{\log (\eta_1)}\right)^{-1}\right] \ &amp;=e^{\log (\eta_1)}\left(1+e^{\log (\eta_1)}\right)^{-1}-e^{2 \log (\eta_1)}\left(1+e^{\log (\eta_1)}\right)^{-2} \ &amp;=\frac{e^{\log (\eta_1)}}{\left(1+e^{\log (\eta_1)}\right)^{2}} \ &amp;=\frac{\eta_1}{(1+\eta_1)}\frac{1}{(1+\eta_1)} \ &amp;=p_1(1-p_1) \end{aligned} $$ 这时候， 就可以算出该节点的输出： $$ \gamma_{11}=\frac{r_{11}}{p_{10}\left(1-p_{10}\right)}=\frac{0.33}{0.67 \times 0.33}=1.49 $$ 这里的下面$\gamma_{jm}$表示第$m$棵树的第$j$个叶子节点。 接下来是右边节点的输出， 包含样本2和样本3， 同样使用二阶泰勒公式展开： $$ \begin{array}{l} L\left(y_{2}, F_{m-1}\left(x_{2}\right)+\gamma\right)+L\left(y_{3}, F_{m-1}\left(x_{3}\right)+\gamma\right) \ \approx L\left(y_{2}, F_{m-1}\left(x_{2}\right)\right)+L^{\prime}\left(y_{2}, F_{m-1}\left(x_{2}\right)\right) \gamma+\frac{1}{2} L^{\prime \prime}\left(y_{2}, F_{m-1}\left(x_{2}\right)\right) \gamma^{2} \ +L\left(y_{3}, F_{m-1}\left(x_{3}\right)\right)+L^{\prime}\left(y_{3}, F_{m-1}\left(x_{3}\right)\right) \gamma+\frac{1}{2} L^{\prime \prime}\left(y_{3}, F_{m-1}\left(x_{3}\right)\right) \gamma^{2} \end{array} $$ 求导， 令其结果为0，就会得到， 第1棵树的第2个叶子节点的输出： $$ \begin{aligned} \gamma_{21} &amp;=\frac{-L^{\prime}\left(y_{2}, F_{m-1}\left(x_{2}\right)\right)-L^{\prime}\left(y_{3}, F_{m-1}\left(x_{3}\right)\right)}{L^{\prime \prime}\left(y_{2}, F_{m-1}\left(x_{2}\right)\right)+L^{\prime \prime}\left(y_{3}, F_{m-1}\left(x_{3}\right)\right)} \ &amp;=\frac{r_{21}+r_{31}}{p_{20}\left(1-p_{20}\right)+p_{30}\left(1-p_{30}\right)} \ &amp;=\frac{0.33-0.67}{0.67 \times 0.33+0.67 \times 0.33} \ &amp;=-0.77 \end{aligned} $$ 可以看出， 对于任意叶子节点， 我们可以直接计算其输出值： $$ \gamma_{j m}=\frac{\sum_{i=1}^{R_{i j}} r_{i m}}{\sum_{i=1}^{R_{i j}} p_{i, m-1}\left(1-p_{i, m-1}\right)} $$</li>
<li>更新模型$F_m(x)$ $$ F_{m}(x)=F_{m-1}(x)+\nu \sum_{j=1}^{J_{m}} \gamma_{m} $$</li>
</ol>
<p>下面分析一下GBDT的优缺点：</p>
<p>我们可以把树的生成过程理解成自动进行多维度的特征组合的过程，从根结点到叶子节点上的整个路径(多个特征值判断)，才能最终决定一棵树的预测值， 另外，对于连续型特征的处理，GBDT 可以拆分出一个临界阈值，比如大于 0.027 走左子树，小于等于 0.027（或者 default 值）走右子树，这样很好的规避了人工离散化的问题。这样就非常轻松的解决了逻辑回归那里自动发现特征并进行有效组合的问题， 这也是GBDT的优势所在。</p>
<p>但是GBDT也会有一些局限性， 对于海量的 id 类特征，GBDT 由于树的深度和棵树限制（防止过拟合），不能有效的存储；另外海量特征在也会存在性能瓶颈，当 GBDT 的 one hot 特征大于 10 万维时，就必须做分布式的训练才能保证不爆内存。所以 GBDT 通常配合少量的反馈 CTR 特征来表达，这样虽然具有一定的范化能力，但是同时会有信息损失，对于头部资源不能有效的表达。</p>
<p>所以， 我们发现其实GBDT和LR的优缺点可以进行互补。</p>
<h3 id="4-gbdtlr模型"><a href="#4-GBDT-LR模型" class="headerlink" title="4. GBDT+LR模型"></a>4. GBDT+LR模型<a href="#4-gbdtlr模型" class="header-anchor">#</a></h3><p>2014年， Facebook提出了一种利用GBDT自动进行特征筛选和组合， 进而生成新的离散特征向量， 再把该特征向量当做LR模型的输入， 来产生最后的预测结果， 这就是著名的GBDT+LR模型了。GBDT+LR 使用最广泛的场景是CTR点击率预估，即预测当给用户推送的广告会不会被用户点击。</p>
<p>有了上面的铺垫， 这个模型解释起来就比较容易了， 模型的总体结构长下面这样：<br><img src="GBDT-LR/GBDT+LR.png" alt="GBDT+LR"><br><strong>训练时</strong>，GBDT 建树的过程相当于自动进行的特征组合和离散化，然后从根结点到叶子节点的这条路径就可以看成是不同特征进行的特征组合，用叶子节点可以唯一的表示这条路径，并作为一个离散特征传入 LR 进行<strong>二次训练</strong>。<br>比如上图中， 有两棵树，x为一条输入样本，遍历两棵树后，x样本分别落到两颗树的叶子节点上，每个叶子节点对应LR一维特征，那么通过遍历树，就得到了该样本对应的所有LR特征。构造的新特征向量是取值0/1的。 比如左树有三个叶子节点，右树有两个叶子节点，最终的特征即为五维的向量。对于输入x，假设他落在左树第二个节点，编码[0,1,0]，落在右树第二个节点则编码[0,1]，所以整体的编码为[0,1,0,0,1]，这类编码作为特征，输入到线性分类模型（LR or FM）中进行分类。</p>
<p>预测时，会先走 GBDT 的每棵树，得到某个叶子节点对应的一个离散特征(即一组特征组合)，然后把该特征以 one-hot 形式传入 LR 进行线性加权预测。</p>
<p>这个方案应该比较简单了， 下面有几个关键的点我们需要了解：</p>
<ol>
<li>通过GBDT进行特征组合之后得到的离散向量是和训练数据的原特征一块作为逻辑回归的输入， 而不仅仅全是这种离散特征</li>
<li>建树的时候用ensemble建树的原因就是一棵树的表达能力很弱，不足以表达多个有区分性的特征组合，多棵树的表达能力更强一些。GBDT每棵树都在学习前面棵树尚存的不足，迭代多少次就会生成多少棵树。</li>
<li>RF也是多棵树，但从效果上有实践证明不如GBDT。且GBDT前面的树，特征分裂主要体现对多数样本有区分度的特征；后面的树，主要体现的是经过前N颗树，残差仍然较大的少数样本。优先选用在整体上有区分度的特征，再选用针对少数样本有区分度的特征，思路更加合理，这应该也是用GBDT的原因。</li>
<li>在CRT预估中， GBDT一般会建立两类树(非ID特征建一类， ID类特征建一类)， AD，ID类特征在CTR预估中是非常重要的特征，直接将AD，ID作为feature进行建树不可行，故考虑为每个AD，ID建GBDT树。<ol>
<li>非ID类树：不以细粒度的ID建树，此类树作为base，即便曝光少的广告、广告主，仍可以通过此类树得到有区分性的特征、特征组合</li>
<li>ID类树：以细粒度 的ID建一类树，用于发现曝光充分的ID对应有区分性的特征、特征组合</li>
</ol>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>MF</title>
    <url>/article/MF/</url>
    <content><![CDATA[<!-- @import "[TOC]" {cmd="toc" depthFrom=1 depthTo=6 orderedList=false} -->

<!-- code_chunk_output -->

<ul>
<li><a href="#1-%E9%9A%90%E8%AF%AD%E4%B9%89%E6%A8%A1%E5%9E%8B%E4%B8%8E%E7%9F%A9%E9%98%B5%E5%88%86%E8%A7%A3">1. 隐语义模型与矩阵分解</a></li>
<li><a href="#2-%E9%9A%90%E8%AF%AD%E4%B9%89%E6%A8%A1%E5%9E%8B">2. 隐语义模型</a></li>
<li><a href="#3%E7%9F%A9%E9%98%B5%E5%88%86%E8%A7%A3%E7%9A%84%E5%8E%9F%E7%90%86">3.矩阵分解的原理</a></li>
<li><a href="#4%E7%9F%A9%E9%98%B5%E5%88%86%E8%A7%A3%E7%9A%84%E6%B1%82%E8%A7%A3funk-svd">4.矩阵分解的求解——Funk-SVD</a></li>
<li><a href="#5-%E7%BC%96%E7%A8%8B%E5%AE%9E%E7%8E%B0">5. 编程实现</a></li>
<li><a href="#6-%E4%BC%98%E7%BC%BA%E7%82%B9">6. 优缺点</a></li>
</ul>
<!-- /code_chunk_output -->

<h3 id="1-隐语义模型与矩阵分解"><a href="#1-隐语义模型与矩阵分解" class="headerlink" title="1. 隐语义模型与矩阵分解"></a>1. 隐语义模型与矩阵分解<a href="#1-隐语义模型与矩阵分解" class="header-anchor">#</a></h3><p>协同过滤算法的特点就是完全没有利用到物品本身或者是用户自身的属性， 仅仅利用了用户与物品的交互信息就可以实现推荐，是一个可解释性很强， 非常直观的模型， 但是也存在一些问题， 第一个就是处理稀疏矩阵的能力比较弱， 所以为了使得协同过滤更好处理稀疏矩阵问题， 增强泛化能力， 从协同过滤中衍生出矩阵分解模型(Matrix Factorization,MF)或者叫隐语义模型, 两者差不多说的一个意思， 就是在协同过滤共现矩阵的基础上， 使用更稠密的隐向量表示用户和物品， 挖掘用户和物品的隐含兴趣和隐含特征， 在一定程度上弥补协同过滤模型处理稀疏矩阵能力不足的问题。</p>
<span id="more"></span>
<h3 id="2-隐语义模型"><a href="#2-隐语义模型" class="headerlink" title="2. 隐语义模型"></a>2. 隐语义模型<a href="#2-隐语义模型" class="header-anchor">#</a></h3><p>隐语义模型最早在文本领域被提出，用于找到文本的隐含语义。在2006年， 被用于推荐中, <strong>它的核心思想是通过隐含特征（latent factor）联系用户兴趣和物品（item）， 基于用户的行为找出潜在的主题和分类， 然后对item进行自动聚类，划分到不同类别/主题(用户的兴趣)。</strong></p>
<blockquote>
<p>如果我们知道了用户A和用户B两个用户在豆瓣的读书列表， 从他们的阅读列表可以看出，用户A的兴趣涉及侦探小说、科普图书以及一些计算机技术书， 而用户B的兴趣比较集中在数学和机器学习方面。 那么如何给A和B推荐图书呢？</p>
<p>先说说协同过滤算法， 这样好对比不同：</p>
<ul>
<li>对于UserCF，首先需要找到和他们看了同样书的其他用户（兴趣相似的用户），然后给他们推荐那些用户喜欢的其他书。</li>
<li>对于ItemCF，需要给他们推荐和他们已经看的书相似的书，比如作者B看了很多关于数据挖掘的书，可以给他推荐机器学习或者模式识别方面的书。</li>
</ul>
<p>而如果是隐语义模型的话， 它会先通过一些角度把用户兴趣和这些书归一下类， 当来了用户之后， 首先得到他的兴趣分类， 然后从这个分类中挑选他可能喜欢的书籍。</p>
</blockquote>
<p>这里就看到了隐语义模型和协同过滤的不同， 这里说的角度其实就是这个隐含特征， 比如书籍的话它的内容， 作者， 年份， 主题等都可以算隐含特征，如果这个例子还不是很清晰的话， 那么下面再举个更为具体的例子， 看看是如何通过隐含特征来划分开用户兴趣和物品的。</p>
<p><img src="MF/CFvsMF.png" alt="CFvsMF"></p>
<p>假设每个用户都有自己的听歌偏好， 比如A喜欢带有小清新的， 吉他伴奏的， 王菲的歌曲，如果一首歌正好是王菲唱的， 并且是吉他伴奏的小清新， 那么就可以将这首歌推荐给这个用户。 也就是说是小清新， 吉他伴奏， 王菲这些元素连接起了用户和歌曲。 当然每个用户对不同的元素偏好不同， 每首歌包含的元素也不一样， 所以我们就希望找到下面的两个矩阵：</p>
<ol>
<li>潜在因子——用户矩阵Q<br>这个矩阵表示不同用户对于不同元素的偏好程度，1表示很喜欢，0表示不喜欢<br><img src="MF/%E7%94%A8%E6%88%B7%E7%9F%A9%E9%98%B5.png" alt="用户矩阵"></li>
<li>潜在因子——音乐矩阵P<br>表示每种音乐含有各种元素的成分， 比如下表中， 音乐A是一个偏小清新的音乐， 含有小清新的Latent Factor的成分是0.9， 重口味的成分是0.1， 优雅成分0.2…..<br><img src="MF/%E9%9F%B3%E4%B9%90%E7%9F%A9%E9%98%B5.png" alt="音乐矩阵"></li>
</ol>
<p>利用上面的这两个矩阵， 我们就能得出张三对音乐A的喜欢程度：</p>
<blockquote>
<p>张三对小清新的偏好 * 音乐A含有小清新的成分 + 张三对重口味的偏好 * 音乐A含有重口味的成分 + 张三对优雅的偏好 * 音乐A含有优雅的成分….,</p>
</blockquote>
<p>上面例子中的小清晰， 重口味， 优雅这些就可以看做是隐含特征， 而通过这个隐含特征就可以把用户的兴趣和音乐的进行一个分类， 其实就是找到了每个用户每个音乐的一个隐向量表达形式（embedding的原理其实也是这样， 那里是找到每个词的隐向量表达）， 这个隐向量就可以反映出用户的兴趣和物品的风格，并能将相似的物品推荐给相似的用户等。 有没有感觉到是把协同过滤算法进行了一种延伸， 把用户的相似性和物品的相似性通过了一个叫做隐向量的方式进行表达</p>
<p>但是， 真实的情况下我们其实是没有上面那两个矩阵的， 音乐那么多， 用户那么多， 我们没有办法去找一些隐特征去表示出这些东西， 另外一个问题就是即使能表示也不一定准， 对于每个用户或者每个物品的风格，我们每个人都有不同的看法。 所以事实上， 我们有的只有用户的评分矩阵， 也就是最后的结果， 并且一般这种矩阵长这样：<br><img src="MF/%E8%AF%84%E5%88%86%E7%9F%A9%E9%98%B5.png" alt="评分矩阵"></p>
<p>这种矩阵非常的稀疏，如果直接基于用户相似性或者物品相似性去填充这个矩阵是不太容易的， 并且很容易出现长尾问题， 所以矩阵分解就可以比较容易的解决这个问题。</p>
<p>矩阵分解模型其实就是在想办法基于这个评分矩阵去找到上面例子中的那两个矩阵， 也就是用户兴趣和物品的隐向量表达， 然后就把这个评分矩阵分解成Q和P两个矩阵乘积的形式， 这时候就可以基于这两个矩阵去预测某个用户对某个物品的评分了。 然后基于这个评分去进行推荐。这就是矩阵分解算法的原理。</p>
<h3 id="3矩阵分解的原理"><a href="#3-矩阵分解的原理" class="headerlink" title="3.矩阵分解的原理"></a>3.矩阵分解的原理<a href="#3矩阵分解的原理" class="header-anchor">#</a></h3><p>在矩阵分解的算法框架下， 我们就可以通过分解协同过滤的共现矩阵来得到用户和物品的隐向量， 就是上面的用户矩阵Q和物品矩阵P， 这也是“矩阵分解”名字的由来。<br><img src="MF/%E5%88%86%E8%A7%A3%E7%AE%97%E6%B3%95.png" alt="分解算法"><br>矩阵分解算法将$m\times n$维的共享矩阵$R$分解成$m \times k$维的用户矩阵$U$和$k \times n$维的物品矩阵$V$相乘的形式。 其中$m$是用户数量， $n$是物品数量， $k$是隐向量维度， 也就是隐含特征个数， 只不过这里的隐含特征变得不可解释了， 即我们不知道具体含义了， 要模型自己去学。$k$的大小决定了隐向量表达能力的强弱， $k$越大， 表达信息就越强， 理解起来就是把用户的兴趣和物品的分类划分的越具体。</p>
<p>那么如果有了用户矩阵和物品矩阵的话， 我们就知道了如果想计算用户$u$对物品$i$的评分， 只需要 $$ \operatorname{Preference}(u, i)=r_{u i}=p_{u}^{T} q_{i}=\sum_{f=1}^{F} p_{u, k} q_{k,i} $$ 这里的$p_u$就是用户$u$的隐向量， 就类似与上面的张三向量， 注意这是列向量， $q_i$是物品$i$的隐向量， 就类似于上面的音乐A向量， 这个也是列向量， 所以才用了$p_{u}^{T} q_{i}$得到了一个数， 也就是用户的最终评分， 计算过程其实和上面例子中一样。 这里的$p_{u,k}$和$q_{i,k}$是模型的参数， 也正是我们想办法要计算的， $p_{u,k}$度量的是用户$u$的兴趣和第$k$个隐类的关系， 而$q_{i,k}$度量了第$k$个隐类和物品$i$之间的关系。</p>
<h3 id="4矩阵分解的求解funk-svd"><a href="#4-矩阵分解的求解——Funk-SVD" class="headerlink" title="4.矩阵分解的求解——Funk-SVD"></a>4.矩阵分解的求解——Funk-SVD<a href="#4矩阵分解的求解funk-svd" class="header-anchor">#</a></h3><p>Funk-SVD的思想很简单： 把求解上面两个矩阵的参数问题转换成一个最优化问题， 可以通过训练集里面的观察值利用最小化来学习用户矩阵和物品矩阵。</p>
<p>我们上面已经知道了， 如果有了用户矩阵和物品矩阵的话， 我们就知道了如果想计算用户$u$对物品$i$的评分， 只需要 $$ \operatorname{Preference}(u, i)=r_{u i}=p_{u}^{T} q_{i}=\sum_{f=1}^{F} p_{u, k} q_{k,i} $$ 而现在， 我们有真实的$r_{u i}$, 但是没有$p_{u}^{T} q_{i}$, 那么我们可以初始化一个啊， 随机初始化一个用户矩阵$U$和一个物品矩阵$V$， 然后不就有$p_{u}^{T} q_{i}$了？ 当然你说， 随机初始化的肯定不准啊， 但是， 有了$p_{u}^{T} q_{i}$之后， 我们就可以计算一个猜测的$\hat{r}<em>{u i}$, 即 $$ \hat{r}</em>{u i}=p_{u}^{T} q_{i} $$</p>
<p>这时候， 肯定是不准， 那么这个猜测的和真实值之间就会有一个误差： $$ e_{u i}=r_{u i}-\hat{r}_{u i} $$</p>
<p>有了误差， 我们就可以计算出总的误差平方和： $$ \operatorname{SSE}=\sum_{u, i} e_{u i}^{2}=\sum_{u, i}\left(r_{u i}-\sum_{k=1}^{K} p_{u,k} q_{k, i}\right)^{2} $$ 有了损失， 我们就可以想办法进行训练， 把SSE降到最小， 那么我们的两个矩阵参数就可以算出来。所以就把这个问题转成了最优化的的问题， 而我们的目标函数就是：</p>
<p>$$ {\min}<em>{\boldsymbol{q}, \boldsymbol{p}} {\sum}</em>{(u, i) \in K}\left(\boldsymbol{r}<em>{\mathrm{ui}}-p</em>{u}^{T} q_{i}\right)^{2} $$</p>
<p>这里的$K$表示所有用户评分样本的集合。</p>
<p>有了目标函数， 那么我们就可以使用梯度下降算法来降低损失。 那么我们需要对目标函数求偏导， 得到梯度。 我们的目标函数如果是上面的SSE， 我们下面来推导一下最后的导数：</p>
<p>$$ \operatorname{SSE}=\sum_{u, i} e_{u i}^{2}=\sum_{u, i}\left(r_{u i}-\sum_{k=1}^{K} p_{u,k} q_{k,i}\right)^{2} $$ 首先我们求SSE在$p_{u,k}$（也就是Q矩阵的第$u$行$k$列）的梯度： $$ \frac{\partial}{\partial p_{u,k}} S S E=\frac{\partial}{\partial p_{u,k}}\left(e_{u i}^{2}\right) =2e_{u i} \frac{\partial}{\partial p_{u,k}} e_{u i}=2e_{u i} \frac{\partial}{\partial p_{u,k}}\left(r_{u i}-\sum_{k=1}^{K} p_{u,k} q_{k,i}\right)=-2e_{u i} q_{k,i} $$ 然后求SSE在$q_{k,i}$处(也就是V矩阵的第$k$行$i$列）的梯度：</p>
<p>$$ \frac{\partial}{\partial q_{k,i}} S S E=\frac{\partial}{\partial p_{k,i}}\left(e_{u i}^{2}\right) =2e_{u i} \frac{\partial}{\partial p_{k,i}} e_{u i}=2e_{u i} \frac{\partial}{\partial p_{k,i}}\left(r_{u i}-\sum_{k=1}^{K} p_{u,k} q_{k,i}\right)=-2e_{u i} p_{u,k} $$ 为了让公式更为简单， 把前面的2给他越掉， 即可以令SSE等于： $$ \operatorname{SSE}=\frac{1}{2} \sum_{u, i} e_{u i}^{2}=\frac{1}{2} \sum_{u, i}\left(r_{u i}-\sum_{k=1}^{K} p_{u k} q_{k i}\right)^{2} $$</p>
<p>这时候， 梯度就没有前面的系数了， 有了梯度， 接下来我们就可以用梯度下降算法更新梯度了： $$ p_{u, k}=p_{u,k}-\eta (-e_{ui}q_{k,i})=p_{u,k}+\eta e_{ui}q_{k,i} \ q_{k, i}=q_{k, i}-\eta (-e_{ui}p_{u,k})=q_{k, i}+\eta e_{ui}p_{u,k} $$</p>
<p>这里的$\eta$是学习率， 控制步长用的， 但上面这个有个问题就是当参数很多的时候， 就是两个矩阵很大的时候， 往往容易陷入过拟合的困境， 这时候， 就需要在目标函数上面加上正则化的损失， 就变成了RSVD， 关于RSVD的详细内容， 可以参考下面给出的链接， 由于篇幅原因， 这里不再过多的赘述。</p>
<p>但在实际中， 单纯的$\hat{r}<em>{u i}=p</em>{u}^{T} q_{i}$也是不够的， 还要考虑其他的一些因素， 比如一个评分系统， 有些固有的属性和用户物品无关， 而用户也有些属性和物品无关， 物品也有些属性和用户无关。 因此， Netfix Prize中提出了另一种LFM， 在原来的基础上加了偏置项， 来消除用户和物品打分的偏差， 即预测公式如下： $$ \hat{r}<em>{u i}=\mu+b</em>{u}+b_{i}+p_{u}^{T} \cdot q_{i} $$ 这个预测公式加入了3项偏置$\mu,b_u,b_i$, 作用如下：</p>
<p>$\mu$: 训练集中所有记录的评分的全局平均数。 在不同网站中， 因为网站定位和销售物品不同， 网站的整体评分分布也会显示差异。 比如有的网站中用户就喜欢打高分， 有的网站中用户就喜欢打低分。 而全局平均数可以表示网站本身对用户评分的影响。<br>$b_u$: 用户偏差系数， 可以使用用户$u$给出的所有评分的均值， 也可以当做训练参数。 这一项表示了用户的评分习惯中和物品没有关系的那种因素。 比如有些用户比较苛刻， 对什么东西要求很高， 那么他评分就会偏低， 而有些用户比较宽容， 对什么东西都觉得不错， 那么评分就偏高<br>$b_i$: 物品偏差系数， 可以使用物品$i$收到的所有评分的均值， 也可以当做训练参数。 这一项表示了物品接受的评分中和用户没有关系的因素。 比如有些物品本身质量就很高， 因此获得的评分相对比较高， 有的物品本身质量很差， 因此获得的评分相对较低。<br>加了用户和物品的打分偏差之后， 矩阵分解得到的隐向量更能反映不同用户对不同物品的“真实”态度差异， 也就更容易捕捉评价数据中有价值的信息， 从而避免推荐结果有偏。 注意此时的$SSE$会发生变化：<br>$$ \begin{array}{l} \operatorname{SSE}=\frac{1}{2} \sum_{u, i} e_{u i}^{2}+\frac{1}{2} \lambda \sum_{u}\left|\boldsymbol{p}<em>{u}\right|^{2}+\frac{1}{2} \lambda \sum</em>{i}\left|\boldsymbol{q}<em>{i}\right|^{2}+\frac{1}{2} \lambda \sum</em>{u} \boldsymbol{b}<em>{u}^{2}+\frac{1}{2} \lambda \sum</em>{i} \boldsymbol{b}<em>{i}^{2} \ =\frac{1}{2} \sum{u, i}\left(\boldsymbol{r}</em>{u i}-\boldsymbol{\mu}-\boldsymbol{b}<em>{u}-\boldsymbol{b}</em>{i}-\sum_{k=1}^{K} \boldsymbol{p}<em>{u k} \boldsymbol{q}</em>{k i}\right)^{2}+\frac{1}{2} \lambda \sum_{u}\left|\boldsymbol{p}<em>{u}\right|^{2}+\frac{1}{2} \lambda \sum</em>{i}\left|\boldsymbol{q}<em>{i}\right|^{2}+\frac{\mathbf{1}}{2} \lambda \sum</em>{u} {\boldsymbol{b}}<em>{u}^{2}+\frac{1}{2} \lambda \sum</em>{i} \boldsymbol{b}_{i}^{2} \end{array} $$ 此时如果把$b_u$和$b_i$当做训练参数的话， 那么它俩的梯度是：</p>
<p>$$ \frac{\partial}{\partial b_{u}} S S E=-e_{u i}+\lambda b_{u} \ \frac{\partial}{\partial b_{i}} S S E=-e_{u i}+\lambda b_{i} $$ 更新公式为： $$ \begin{aligned} \boldsymbol{b}{u}&amp;=\boldsymbol{b}{\boldsymbol{u}}+\boldsymbol{\eta}\left(\boldsymbol{e}{u i}-\lambda \boldsymbol{b}{\boldsymbol{u}}\right) \ \boldsymbol{b}{\boldsymbol{i}} &amp;=\boldsymbol{b}{\boldsymbol{i}}+\boldsymbol{\eta}\left(\boldsymbol{e}{\boldsymbol{u} i}-\lambda \boldsymbol{b}{\boldsymbol{i}}\right) \end{aligned} $$ 而对于$p_{u,k}$和$p_{k,i}$， 导数没有变化， 更新公式也没有变化。</p>
<h3 id="5-编程实现"><a href="#5-编程实现" class="headerlink" title="5. 编程实现"></a>5. 编程实现<a href="#5-编程实现" class="header-anchor">#</a></h3><p>我们这里用代码实现一下上面的算法来预测上一篇文章里面的那个预测Alice对物品5的评分， 看看矩阵分解到底是怎么进行预测或者是推荐的。 我把之前的例子拿过来：<br><img src="MF/%E5%8D%8F%E5%90%8C%E7%9F%A9%E9%98%B5.png" alt="协同矩阵"><br>任务就是根据这个评分矩阵， 猜测Alice对物品5的打分。</p>
<p>在实现SVD之前， 先来回忆一下ItemCF和UserCF对于这个问题的做法， 首先ItemCF的做法， 根据已有的用户打分计算物品之间的相似度， 得到物品的相似度矩阵， 根据这个相似度矩阵， 选择出前K个与物品5最相似的物品， 然后基于Alice对这K个物品的得分， 猜测Alice对物品5的得分， 有一个加权的计算公式。 UserCF的做法是根据用户对其他物品的打分， 计算用户之间的相似度， 选择出与Alice最相近的K个用户， 然后基于那K个用户对物品5的打分计算出Alice对物品5的打分。 但是， 这两种方式有个问题， 就是如果矩阵非常稀疏的话， 当然这个例子是个特例， 一般矩阵都是非常稀疏的， 那么预测效果就不好， 因为两个相似用户对同一物品打分的概率以及Alice同时对两个相似物品打分的概率可能都比较小。 另外， 这两种方法显然没有考虑到全局的物品或者用户， 只是基于了最相似的例子， 很可能有偏。</p>
<p>那么SVD在解决这个问题上是这么做的：</p>
<ol>
<li>首先， 它会先初始化用户矩阵P和物品矩阵Q， P的维度是[users_num, F], Q的维度是[item_nums, F]， 这个F是隐向量的维度。 也就是把通过隐向量的方式把用户的兴趣和F的特点关联了起来。 初始化这两个矩阵的方式很多， 但根据经验， 随机数需要和1/sqrt(F)成正比。 下面代码中会发现。</li>
<li>有了两个矩阵之后， 我就可以根据用户已经打分的数据去更新参数， 这就是训练模型的过程， 方法很简单， 就是遍历用户， 对于每个用户， 遍历它打分的物品， 这样就拿到了该用户和物品的隐向量， 然后两者相乘加上偏置就是预测的评分， 这时候与真实评分有个差距， 根据上面的梯度下降就可以进行参数的更新</li>
</ol>
<p>这样训练完之后， 我们就可以得到用户Alice和物品5的隐向量， 根据这个就可以预测Alice对物品5的打分。 下面的代码的逻辑就是上面这两步， 这里使用带有偏置项和正则项的那个SVD算法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class SVD():</span><br><span class="line">    def __init__(self, rating_data, F=5, alpha=0.1, lmbda=0.1, max_iter=100):</span><br><span class="line">        self.F = F           # 这个表示隐向量的维度</span><br><span class="line">        self.P = dict()          #  用户矩阵P  大小是[users_num, F]</span><br><span class="line">        self.Q = dict()     # 物品矩阵Q  大小是[item_nums, F]</span><br><span class="line">        self.bu = dict()   # 用户偏差系数</span><br><span class="line">        self.bi = dict()    # 物品偏差系数</span><br><span class="line">        self.mu = 1.0        # 全局偏差系数</span><br><span class="line">        self.alpha = alpha   # 学习率</span><br><span class="line">        self.lmbda = lmbda    # 正则项系数</span><br><span class="line">        self.max_iter = max_iter    # 最大迭代次数</span><br><span class="line">        self.rating_data = rating_data # 评分矩阵</span><br><span class="line">        </span><br><span class="line">        # 初始化矩阵P和Q, 方法很多， 一般用随机数填充， 但随机数大小有讲究， 根据经验， 随机数需要和1/sqrt(F)成正比</span><br><span class="line">        cnt = 0    # 统计总的打分数， 初始化mu用</span><br><span class="line">        for user, items in self.rating_data.items():</span><br><span class="line">            self.P[user] = [random.random() / math.sqrt(self.F)  for x in range(0, F)]</span><br><span class="line">            self.bu[user] = 0</span><br><span class="line">            cnt += len(items) </span><br><span class="line">            for item, rating in items.items():</span><br><span class="line">                if item not in self.Q:</span><br><span class="line">                    self.Q[item] = [random.random() / math.sqrt(self.F) for x in range(0, F)]</span><br><span class="line">                    self.bi[item] = 0</span><br><span class="line">        self.mu /= cnt</span><br><span class="line">        </span><br><span class="line">    # 有了矩阵之后， 就可以进行训练, 这里使用随机梯度下降的方式训练参数P和Q</span><br><span class="line">    def train(self):</span><br><span class="line">        for step in range(self.max_iter):</span><br><span class="line">            for user, items in self.rating_data.items():</span><br><span class="line">                for item, rui in items.items():</span><br><span class="line">                    rhat_ui = self.predict(user, item)   # 得到预测评分</span><br><span class="line">                    # 计算误差</span><br><span class="line">                    e_ui = rui - rhat_ui</span><br><span class="line">                    </span><br><span class="line">                    self.bu[user] += self.alpha * (e_ui - self.lmbda * self.bu[user])</span><br><span class="line">                    self.bi[item] += self.alpha * (e_ui - self.lmbda * self.bi[item])</span><br><span class="line">                    # 随机梯度下降更新梯度</span><br><span class="line">                    for k in range(0, self.F):</span><br><span class="line">                        self.P[user][k] += self.alpha * (e_ui*self.Q[item][k] - self.lmbda * self.P[user][k])</span><br><span class="line">                        self.Q[item][k] += self.alpha * (e_ui*self.P[user][k] - self.lmbda * self.Q[item][k])</span><br><span class="line">                    </span><br><span class="line">            self.alpha *= 0.1    # 每次迭代步长要逐步缩小</span><br><span class="line">    </span><br><span class="line">    # 预测user对item的评分， 这里没有使用向量的形式</span><br><span class="line">    def predict(self, user, item):</span><br><span class="line">        return sum(self.P[user][f] * self.Q[item][f] for f in range(0, self.F)) + self.bu[user] + self.bi[item] + self.mu   </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="6-优缺点"><a href="#6-优缺点" class="headerlink" title="6. 优缺点"></a>6. 优缺点<a href="#6-优缺点" class="header-anchor">#</a></h3><ul>
<li>优点：<ul>
<li>泛化能力强： 一定程度上解决了稀疏问题</li>
<li>空间复杂度低： 由于用户和物品都用隐向量的形式存放， 少了用户和物品相似度矩阵， 空间复杂度由$n^2$降到了$(n+m)*f$</li>
<li>更好的扩展性和灵活性：矩阵分解的最终产物是用户和物品隐向量， 这个深度学习的embedding思想不谋而合， 因此矩阵分解的结果非常便于与其他特征进行组合和拼接， 并可以与深度学习无缝结合。</li>
</ul>
</li>
</ul>
<p>但是， 矩阵分解算法依然是只用到了评分矩阵， 没有考虑到用户特征， 物品特征和上下文特征， 这使得矩阵分解丧失了利用很多有效信息的机会， 同时在缺乏用户历史行为的时候， 无法进行有效的推荐。 所以为了解决这个问题， 逻辑回归模型及后续的因子分解机模型， 凭借其天然的融合不同特征的能力， 逐渐在推荐系统领域得到了更广泛的应用。</p>
]]></content>
  </entry>
  <entry>
    <title>python_进阶</title>
    <url>/article/python-%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<h1 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数<a href="#偏函数" class="header-anchor">#</a></h1><p>定义：偏函数的第二个部分(可变参数)，按原有函数的参数顺序进行补充，参数将作用在原函数上，最后偏函数返回一个新函数（类似于，装饰器decorator，对于函数进行二次包装，产生特殊效果；但又不同于装饰器，偏函数产生了一个新函数，而装饰器，可改变被装饰函数的函数入口地址也可以不影响原函数）</p>
<p>例一：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from functools import partial</span><br><span class="line"> </span><br><span class="line">def mod( n, m ):</span><br><span class="line">  return n % m</span><br><span class="line"> </span><br><span class="line">mod_by_100 = partial( mod, 100 )</span><br><span class="line"> </span><br><span class="line">print mod( 100, 7 )  # 2</span><br><span class="line">print mod_by_100( 7 )  # 2</span><br></pre></td></tr></table></figure>

<p>例二：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from functools import partial</span><br><span class="line"> </span><br><span class="line">bin2dec = partial( int, base=2 )</span><br><span class="line">print bin2dec( &#x27;0b10001&#x27; )  # 17</span><br><span class="line">print bin2dec( &#x27;10001&#x27; )  # 17</span><br><span class="line"> </span><br><span class="line">hex2dec = partial( int, base=16 )</span><br><span class="line">print hex2dec( &#x27;0x67&#x27; )  # 103</span><br><span class="line">print hex2dec( &#x27;67&#x27; )  # 103</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="同步异步阻塞非阻塞"><a href="#同步，异步，阻塞，非阻塞" class="headerlink" title="同步，异步，阻塞，非阻塞"></a>同步，异步，阻塞，非阻塞<a href="#同步异步阻塞非阻塞" class="header-anchor">#</a></h1><p>二者其实是不同维度的东西，但是的确容易搞混。</p>
<p>做法A(同步，阻塞) :开单独线程（进程）处理，线程内一般是循环接收消息。<br>做法B(同步，非阻塞) :主线程循环处理,但一般搭配sleep函数(释放时间片,自身状态运行转就绪再等待时间片)，避免完全的cpu空转<br>做法C(异步，非阻塞):函数参数包含函数(回调函数)，或url地址，类似的东西，对方有消息就推送给你，所以还需要新开一个接口(or功能)用来接受信息。</p>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">例子:老张水壶</span><br><span class="line">老张爱喝茶，废话不说，煮开水。</span><br><span class="line">出场人物：老张，水壶两把（普通水壶，简称水壶；会响的水壶，简称响水壶）。</span><br><span class="line">1 老张把水壶放到火上，立等水开。（同步阻塞）</span><br><span class="line">2 老张把水壶放到火上，去客厅看电视，时不时去厨房看看水开没有。（同步非阻塞）</span><br><span class="line">老张还是觉得自己有点傻，于是变高端了，买了把会响笛的那种水壶。水开之后，能大声发出嘀~的噪音。</span><br><span class="line">3 老张把响水壶放到火上，立等水开。（异步阻塞）</span><br><span class="line">4 老张把响水壶放到火上，去客厅看电视，水壶响之前不再去看它了，响了再去拿壶。（异步非阻塞）</span><br><span class="line">所谓同步异步，只是对于水壶而言。</span><br><span class="line">普通水壶，同步；响水壶，异步。虽然都能干活，但响水壶可以在自己完工之后，提示老张水开了。这是普通水壶所不能及的。同步只能让调用者去轮询自己（情况2中），造成老张效率的低下。</span><br><span class="line">所谓阻塞非阻塞，仅仅对于老张而言。</span><br><span class="line">立等的老张，阻塞；看电视的老张，非阻塞。情况1和情况3中老张就是阻塞的，媳妇喊他都不知道。虽然3中响水壶是异步的，可对于立等的老张没有太大的意义。所以一般异步是配合非阻塞使用的，这样才能发挥异步的效用。</span><br></pre></td></tr></table></figure>



<h1 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发<a href="#并发" class="header-anchor">#</a></h1><h2 id="进程状态和调度"><a href="#进程状态和调度" class="headerlink" title="进程状态和调度"></a>进程状态和调度<a href="#进程状态和调度" class="header-anchor">#</a></h2><p><img src="python-%E8%BF%9B%E9%98%B6/image-20210824144323526.png" alt="image-20210824144323526"></p>
<p><img src="python-%E8%BF%9B%E9%98%B6/image-20210824144415139.png" alt="image-20210824144415139"></p>
<h2 id="进程线程协程"><a href="#进程-线程-协程" class="headerlink" title="进程,线程,协程"></a>进程,线程,协程<a href="#进程线程协程" class="header-anchor">#</a></h2><p>1、进程<br>进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动,进程是系统进行<strong>资源</strong>分配和调度的一个独立单位。每个进程都有自己的独立内存空间，不同进程通过进程间通信来通信。由于进程比较重量，占据独立的内存，所以上下文进程间的切换开销（栈、寄存器、虚拟内存、文件句柄等）比较大，但相对比较稳定安全。<br>2、线程<br>线程是进程的一个实体,是<strong>CPU调度</strong>和分派的基本单位,它是比进程更小的能独立运行的基本单位.线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。线程间通信主要通过共享内存，上下文切换很快，资源开销较少，但相比进程不够稳定容易丢失数据。<br>3、协程<br>协程是一种<strong>用户态的轻量级线程</strong>，协程的调度完全由用户控制。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则基本没有内核切换的开销，<strong>可以不加锁的访问全局变量</strong>，所以上下文的切换非常快。</p>
<h2 id="多进程和多线程"><a href="#多进程和多线程" class="headerlink" title="多进程和多线程"></a>多进程和多线程<a href="#多进程和多线程" class="header-anchor">#</a></h2><p>在数据共享、同步方面，多进程是数据共享复杂，需要用IPC，数据是分开的，同步简单。多线程因为共享进程数据，数据共享简单，但同步复杂；<br>在内存、CPU方面，多进程占用内存多，切换复杂，CPU利用率低。<br>多线程占用内存少，切换简单，CPU利用率高；<br>在创建销毁、切换方面，多进程创建销毁、切换复杂，速度慢。多线程创建销毁、切换简单，速度很快；<br>在编程、调试方面，<strong>多进程编程和调试都简单。多线程编程和调试都复杂</strong>；<br><strong>可靠性方面，多进程间不会互相影响。多线程中的一个线程挂掉将导致整个进程挂掉；</strong><br>在分布式方面，多进程适应于多核、多机分布式。多线程适应于多核分布式。</p>
<p><strong>多进程模式最大的优点就是稳定性高</strong>，因为一个子进程崩溃了，不会影响主进程和其他子进程。（当然主进程挂了所有进程就全挂了，但是Master进程只负责分配任务，挂掉的概率低）著名的Apache最早就是采用多进程模式。<br><strong>多进程模式的缺点是创建进程的代价大</strong>，在Unix/Linux系统下，用fork调用还行，在Windows下创建进程开销巨大。另外，操作系统能同时运行的进程数也是有限的，在内存和CPU的限制下，如果有几千个进程同时运行，操作系统连调度都会成问题。<br>多线程模式通常比多进程快一点，但是也快不到哪去，而且，<strong>多线程模式致命的缺点</strong>就是任何一个线程挂掉都可能直接造成<strong>整个进程崩溃</strong>，因为所有线程共享进程的内存。在Windows上，如果一个线程执行的代码出了问题，你经常可以看到这样的提示：“该程序执行了非法操作，即将关闭”，其实往往是某个线程出了问题，但是操作系统会强制结束整个进程。<br><strong>在Windows下，多线程的效率比多进程要高</strong>，所以微软的IIS服务器默认采用多线程模式。由于多线程存在稳定性的问题，IIS的稳定性就不如Apache。为了缓解这个问题，IIS和Apache现在又有多进程+多线程的混合模式，真是把问题越搞越复杂。</p>
<p><img src="python-%E8%BF%9B%E9%98%B6/image-20210824145859135.png" alt="image-20210824145859135"></p>
<h2 id="线程和协程"><a href="#线程和协程" class="headerlink" title="线程和协程"></a>线程和协程<a href="#线程和协程" class="header-anchor">#</a></h2><p>协程:又被称为用户级线程或绿色线程。</p>
<ol>
<li>一个线程可以多个协程，一个进程也可以单独拥有多个协程，这样python中则能使用多核CPU。</li>
<li> 线程进程都是同步机制，而协程则是异步</li>
<li>协程能保留上一次调用时的状态，每次过程重入时，就相当于进入上一次调用的状态</li>
</ol>
<h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程<a href="#协程" class="header-anchor">#</a></h2><p>协程 :<br>能够在一个线程中实现并发效果的效果,提高cpu的利用率<br>无需原子操作锁定及同步的开销<br>能够规避一些任务中的IO操作<br>方便切换控制流，简化编程模型<br>协程相比于多线程的优势 切换的效率更快了</p>
<p>缺点：<br>无法利用多核资源：协程的本质是个单线程,它不能同时将 单个CPU 的多个核用上,协程需要和进程配合才能运行在多CPU上.当然我们日常所编写的绝大部分应用都没有这个必要，除非是cpu密集型应用。</p>
<p>线程和进程的操作是由程序触发系统接口，最后的执行者是系统，它本质上是操作系统提供的功能。而协程的操作则是程序员指定的，在python中通过yield，人为的实现并发处理。<br>协程存在的意义：对于多线程应用，CPU通过切片的方式来切换线程间的执行，线程切换时需要耗时。协程，则只使用一个线程，分解一个线程成为多个“微线程”，在一个线程中规定某个代码块的执行顺序。<br>协程的适用场景：当程序中存在大量不需要CPU的操作时（IO）。<br>常用第三方模块gevent和greenlet。（本质上，gevent是对greenlet的高级封装，因此一般用它就行，这是一个相当高效的模块。）</p>
<h1 id="何时使用多进程or多线程"><a href="#何时使用多进程or多线程" class="headerlink" title="何时使用多进程or多线程"></a>何时使用多进程or多线程<a href="#何时使用多进程or多线程" class="header-anchor">#</a></h1><p>使用多进程or线程,对于python，考虑到GIL锁，基本上<strong>默认使用多进程</strong>就对了。<br>除此之外，线程<strong>共享全局变量</strong>，进程<strong>全局变量则是隔离的</strong>，实际进程大多数情况需要通信的，所以也需要考虑共享数据读写问题处理。 决定因素稳定性和数据共享要求上（操作系统差异性，win偏好线程，linux偏好进程）<br>性能上虽然线程较好，但实际除了大型互联网公司和部分专业性质软件，大多数中小型公司的并发量，并不会带来很大影响，况且目前服务器领域，基本上LInux和Unix占比较高，线程相比进程在性能上优势并不十分突出。所以这方面考量不会太大的。</p>
<h2 id="线程是并发还是并行进程是并发还是并行"><a href="#线程是并发还是并行，进程是并发还是并行？" class="headerlink" title="线程是并发还是并行，进程是并发还是并行？"></a>线程是并发还是并行，进程是并发还是并行？<a href="#线程是并发还是并行进程是并发还是并行" class="header-anchor">#</a></h2><p><strong>线程是并发</strong>，<strong>进程是并行</strong>；<br>现代os都将<strong>线程作为最小调度单位</strong>，进程作为<strong>资源分配的最小单位</strong>。</p>
<h2 id="父子进程如何区分"><a href="#父子进程如何区分" class="headerlink" title="父子进程如何区分?"></a>父子进程如何区分?<a href="#父子进程如何区分" class="header-anchor">#</a></h2><p> 子进程是父进程通过fork()产生出来的，pid = os.fork()<br>​ 通过<strong>返回值pid是否为0</strong>，判断是否为子进程，如果是0，则表示是子进程<br>​ 由于 fork() 是 Linux 上的概念，所以如果要跨平台，最好还是使用 subprocess 模块来创建子进程。</p>
<h2 id="子进程如何回收"><a href="#子进程如何回收？" class="headerlink" title="子进程如何回收？"></a>子进程如何回收？<a href="#子进程如何回收" class="header-anchor">#</a></h2><p>python中采用os.wait()方法用来回收子进程占用的资源<br>pid, result = os.wait() # 回收子进程资源　阻塞，等待子进程执行完成回收<br>如果有子进程没有被回收的，但是父进程已经死掉了，这个子进程就是僵尸进程。孤儿进程,父类进程over.,子进程未结束</p>
<table>
<thead>
<tr>
<th align="left"></th>
<th align="left">Multi-args</th>
<th align="left">Concurrence</th>
<th align="left">Blocking</th>
<th>Ordered-results</th>
</tr>
</thead>
<tbody><tr>
<td align="left">map</td>
<td align="left">no</td>
<td align="left">yes</td>
<td align="left">yes</td>
<td>yes</td>
</tr>
<tr>
<td align="left">apply</td>
<td align="left">yes</td>
<td align="left">no</td>
<td align="left">yes</td>
<td>no</td>
</tr>
<tr>
<td align="left">map_async</td>
<td align="left">no</td>
<td align="left">yes</td>
<td align="left">no</td>
<td>yes</td>
</tr>
<tr>
<td align="left">apply_async</td>
<td align="left">yes</td>
<td align="left">yes</td>
<td align="left">no</td>
<td>no</td>
</tr>
</tbody></table>
<p>需要注意：map 和 map_async 入参为迭代器类型，可以批量调用。而apply和apply_async只能一个个调用。且进程池只能传递管道，而不能用队列。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># map</span><br><span class="line">results = pool.map(worker, [1, 2, 3])</span><br><span class="line"></span><br><span class="line"># apply</span><br><span class="line">for x, y in [[1, 1], [2, 2]]:</span><br><span class="line">    results.append(pool.apply(worker, (x, y)))</span><br><span class="line"></span><br><span class="line">def collect_result(result):</span><br><span class="line">    results.append(result)</span><br><span class="line"></span><br><span class="line"># map_async</span><br><span class="line">pool.map_async(worker, jobs, callback=collect_result)</span><br><span class="line"></span><br><span class="line"># apply_async</span><br><span class="line">for x, y in [[1, 1], [2, 2]]:</span><br><span class="line">    pool.apply_async(worker, (x, y), callback=collect_result)</span><br></pre></td></tr></table></figure>



<h1 id="生产者消费者模式"><a href="#生产者消费者模式" class="headerlink" title="生产者消费者模式"></a>生产者消费者模式<a href="#生产者消费者模式" class="header-anchor">#</a></h1><p>这也是实际项目中使用较多的一种并发模式，用Queue(JoinableQueue)实现，是Python中最常用的方式(这里的queue特指multiprocess包下的queue，非queue.Queue)。</p>
<h2 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue<a href="#queue" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># encoding:utf-8</span><br><span class="line">__author__ = &#x27;Fioman&#x27;</span><br><span class="line">__time__ = &#x27;2019/3/7 14:06&#x27;</span><br><span class="line">from multiprocessing import Process,Queue</span><br><span class="line">import time,random</span><br><span class="line"></span><br><span class="line">def consumer(q,name):</span><br><span class="line">    while True:</span><br><span class="line">        food = q.get()</span><br><span class="line">        if food is None:</span><br><span class="line">            print(&#x27;接收到了一个空,生产者已经完事了&#x27;)</span><br><span class="line">            break</span><br><span class="line"></span><br><span class="line">        print(&#x27;\033[31m&#123;&#125;消费了&#123;&#125;\033[0m&#x27;.format(name,food))</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"></span><br><span class="line">def producer(name,food,q):</span><br><span class="line">    for i in range(10):</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line">        f = &#x27;&#123;&#125;生产了&#123;&#125;&#123;&#125;&#x27;.format(name,food,i)</span><br><span class="line">        print(f)</span><br><span class="line">        q.put(f)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    q = Queue(20)</span><br><span class="line">    p1 = Process(target=producer,args=(&#x27;fioman&#x27;,&#x27;包子&#x27;,q))</span><br><span class="line">    p2 = Process(target=producer,args=(&#x27;jingjing&#x27;,&#x27;馒头&#x27;,q))</span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line"></span><br><span class="line">    c1 = Process(target=consumer,args=(q,&#x27;mengmeng&#x27;))</span><br><span class="line">    c2 = Process(target=consumer,args=(q,&#x27;xiaoxiao&#x27;))</span><br><span class="line">    c1.start()</span><br><span class="line">    c2.start()</span><br><span class="line"></span><br><span class="line">    # 让主程序可以等待子进程的结束.</span><br><span class="line">    p1.join()</span><br><span class="line">    p2.join()</span><br><span class="line">    # 生产者的进程结束,这里需要放置两个空值,供消费者获取,用来判断已经没有存货了</span><br><span class="line">    q.put(None)</span><br><span class="line">    q.put(None)</span><br><span class="line"></span><br><span class="line">    print(&#x27;主程序结束..........&#x27;)</span><br></pre></td></tr></table></figure>

<h2 id="joinablequeue"><a href="#JoinableQueue" class="headerlink" title="JoinableQueue"></a>JoinableQueue<a href="#joinablequeue" class="header-anchor">#</a></h2><p>创建可连接的共享进程队列,它们也是队列,但是这些队列比较特殊.它们可以允许消费者通知生产者项目已经被成功处理.注意,这里必须是生产者生产完了,生产者的进程被挂起,等到消费者完全消费的时候,生产者进程就结束,然后主程序结束.将消费者进程设置为守护进程,这样的话,主进程结束的时候,消费进程也就结束了.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">q.task_done() </span><br><span class="line">使用者使用此方法发出信号，表示q.get()返回的项目已经被处理。如果调用此方法的次数大于从队列中删除的项目数量，将引发ValueError异常。</span><br><span class="line"></span><br><span class="line">q.join() </span><br><span class="line">生产者将使用此方法进行阻塞，直到队列中所有项目均被处理。阻塞将持续到为队列中的每个项目均调用q.task_done()方法为止。 </span><br><span class="line"># encoding:utf-8</span><br><span class="line">__author__ = &#x27;Fioman&#x27;</span><br><span class="line">__time__ = &#x27;2019/3/7 14:06&#x27;</span><br><span class="line">from multiprocessing import Process,JoinableQueue</span><br><span class="line">import time,random</span><br><span class="line"></span><br><span class="line">def consumer(q,name):</span><br><span class="line">    while True:</span><br><span class="line">        food = q.get()</span><br><span class="line">        if food is None:</span><br><span class="line">            print(&#x27;接收到了一个空,生产者已经完事了&#x27;)</span><br><span class="line">            break</span><br><span class="line"></span><br><span class="line">        print(&#x27;\033[31m&#123;&#125;消费了&#123;&#125;\033[0m&#x27;.format(name,food))</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line">        q.task_done()  # 向生产者发送信号,表示消费了一个</span><br><span class="line"></span><br><span class="line">def producer(name,food,q):</span><br><span class="line">    for i in range(10):</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line">        f = &#x27;&#123;&#125;生产了&#123;&#125;&#123;&#125;&#x27;.format(name,food,i)</span><br><span class="line">        print(f)</span><br><span class="line">        q.put(f)</span><br><span class="line">    q.join() # 当生产者生产完毕之后,会在这里阻塞.等待消费者的消费.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    q = JoinableQueue(20)</span><br><span class="line">    p1 = Process(target=producer,args=(&#x27;fioman&#x27;,&#x27;包子&#x27;,q))</span><br><span class="line">    p2 = Process(target=producer,args=(&#x27;jingjing&#x27;,&#x27;馒头&#x27;,q))</span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line"></span><br><span class="line">    c1 = Process(target=consumer,args=(q,&#x27;mengmeng&#x27;))</span><br><span class="line">    c2 = Process(target=consumer,args=(q,&#x27;xiaoxiao&#x27;))</span><br><span class="line">    c1.daemon = True # 将消费者设置为守护进程</span><br><span class="line">    c2.daemon = True # 将消费者设置为守护进程</span><br><span class="line">    c1.start()</span><br><span class="line">    c2.start()</span><br><span class="line"></span><br><span class="line">    # 让主程序可以等待生产子进程的结束.</span><br><span class="line">    p1.join()</span><br><span class="line">    p2.join()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    print(&#x27;主程序结束..........&#x27;)</span><br></pre></td></tr></table></figure>

<p>在消费者调用q.task_done()时，会触发一次q.join()的检查(q.join()是用来阻塞进程的，最后一个任务完成后，q.task_done()＝》q.join()＝》阻塞解除)，之后生产者进程退出。而消费者呢？业务逻辑层面上是没有退出的（本例）。比如，本例中通过<strong>设置为守护进程的方式进行退出</strong>。但如果后续主进程还有其他任务，而没有退出呢？那么这些子进程则沦为僵尸进程，虽然对系统资源消耗很少(消费者的queue.get()也是阻塞的，所以不会执行循环，仅仅会“卡”在那里，但也不会自动消亡)，但感觉非常别扭的。所以个人还是倾向于用”生产者queue.put(None) ,消费者见到None则break(退出循环)”的传统方式 进行消费者进程触发退出。如果采用这种方式那么JoinableQueue相比Queue就没有优势了。</p>
<p>假如有一种队列，内置了**状态信息(存活生产者个数)**，设置目前存活的生产者个数<br>StatusableQueue(product_n=2,size=20)　#product_n=2含义：存活的生产者个数,size=20,队列长度<br>生产者：生产结束，q.product_n - 1(存活生产者个数-1)<br>消费者：存活生产者个数=0(生产者均已经完成生成) 且 队列长度=0(队列也已经消费结束) 则退出消费者进程.<br>这种情况下，只需要　消费者.join()　就可以保证整个生产消费进程的执行结束(这一点和JoinableQueue很像，不过JoinableQueue是 生产者.join())<br>一共只改动3处，就可以完成生产者消费者的并行化控制。 而且更符合逻辑，因为生产者是明确知道自己的退出条件的，而消费者依赖生产者，所以只需要观察消费者就可以知道（生成者是否结束）整个－生成消费链是否完成。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">def consumer(q,name):</span><br><span class="line">    while not (q.product_n==0 and q.size==0):# 存活生产者=0，意味着全部结束生产，队列不会新增数据,queue.size=0说明消费完毕</span><br><span class="line">        food = q.get()</span><br><span class="line">        print(&#x27;\033[31m&#123;&#125;消费了&#123;&#125;\033[0m&#x27;.format(name,food))</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"></span><br><span class="line">def producer(name,food,q):</span><br><span class="line">    for i in range(10):</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line">        f = &#x27;&#123;&#125;生产了&#123;&#125;&#123;&#125;&#x27;.format(name,food,i)</span><br><span class="line">        print(f)</span><br><span class="line">        q.put(f)</span><br><span class="line">    q.product_n -= 1 # 当生产者生产完毕之后,q.product_n - 1(存活生产者个数-1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    q = StatusableQueue(product_n=2,size=20)#默认状态=正常,n=2含义：生产者个数,size=20,对列长度</span><br><span class="line">    p1 = Process(target=producer,args=(&#x27;fioman&#x27;,&#x27;包子&#x27;,q))</span><br><span class="line">    p2 = Process(target=producer,args=(&#x27;jingjing&#x27;,&#x27;馒头&#x27;,q))</span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line"></span><br><span class="line">    c1 = Process(target=consumer,args=(q,&#x27;mengmeng&#x27;))</span><br><span class="line">    c2 = Process(target=consumer,args=(q,&#x27;xiaoxiao&#x27;))</span><br><span class="line">    c1.start()</span><br><span class="line">    c2.start()</span><br><span class="line"></span><br><span class="line">    # 消费者消费结束（说明生产也一定结束了），则说明整个生产－消费逻辑完成</span><br><span class="line">    c1.join()</span><br><span class="line">    c2.join()</span><br></pre></td></tr></table></figure>

<p>缺点：<strong>必须知道生产者个数</strong>，这个数据应该不难获取，毕竟后面在创建生产者时也需要使用这个变量控制。</p>
<h1 id="并行化改造"><a href="#并行化改造" class="headerlink" title="并行化改造"></a>并行化改造<a href="#并行化改造" class="header-anchor">#</a></h1><p>图示变量含义说明:<br>1个大step中包含3个小step,大step内部的第一步，二步，三步存在依赖关系（就是内部保持顺序执行）<br>a1,b1,c1,表示子任务a的第一步，b的第一步，c的第一步.同理a2,表示子任务a的第二步。</p>
<h2 id="无并行"><a href="#无并行" class="headerlink" title="无并行"></a>无并行<a href="#无并行" class="header-anchor">#</a></h2><p><img src="python-%E8%BF%9B%E9%98%B6/image-20210824162124766.png" alt="image-20210824162124766"></p>
<h2 id="水平并行"><a href="#水平并行" class="headerlink" title="水平并行"></a>水平并行<a href="#水平并行" class="header-anchor">#</a></h2><p>优点：修改简单，容易排错<br>缺点：使用场景有限，适合批量数据，不适合流式数据<br>实现：pool().map(step1);pool().map(step2);pool().map(step3)</p>
<p><img src="python-%E8%BF%9B%E9%98%B6/image-20210824162204387.png" alt="image-20210824162204387"></p>
<h2 id="垂直并行"><a href="#垂直并行" class="headerlink" title="垂直并行"></a>垂直并行<a href="#垂直并行" class="header-anchor">#</a></h2><p>优点：修改简单，容易排错<br>缺点：如果中间步骤耗时过多，上游依然处于限制状态<br>实现：pool().apply_sync(func(step1,step2,step3))</p>
<p><img src="python-%E8%BF%9B%E9%98%B6/image-20210824162246391.png" alt="image-20210824162246391"></p>
<h2 id="生产者消费者"><a href="#生产者消费者" class="headerlink" title="生产者消费者"></a>生产者消费者<a href="#生产者消费者" class="header-anchor">#</a></h2><p>优点：上下游耦合小，任务粒度更细<br>缺点：改造稍微复杂，需考虑生产者生成结束等特殊情况的兼容，并且调试也较麻烦<br>实现：Queue(多进程multiprocessing,Queue,多线程queue.Queue,python大多多进程)</p>
<p><img src="python-%E8%BF%9B%E9%98%B6/image-20210824162411720.png" alt="image-20210824162411720"></p>
<h2 id="协程"><a href="#协程-1" class="headerlink" title="协程"></a>协程<a href="#协程" class="header-anchor">#</a></h2><p>协成可看做特殊单线程（意味着本质是单线程，多线程是表象），任务角度多个线程同时执行，实时角度看只有一个线程真正执行，好处是无需处理线程共享数据的加锁等情况（因为只有一个线程会执行，不存在同时修改的情况）。还有就是其<strong>进程内部不需要操作系统调度</strong>（进程整体肯定是操作系统调度，否则就凌驾与操作系统了），<strong>会自行调度</strong>，释放时间片给其他内部线程。<br>常规的线程一旦得到cpu时间片，会毫不犹豫执行，哪怕处于sleep状态也会占用资源。而协程则不会，其会把cpu主动出让(给自己其他线程)，等到别人”呼唤”自己时才会真正执行（比如next（自己）,gevent.sleep时间到了也算唤醒）。</p>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件<a href="#事件" class="header-anchor">#</a></h2><p>优点：如果可以不同事件自动并行化(不确定python是否已实现)，基本上生产者消费者所有优点都具备，并且，额外还有容易追溯，调试的好处.<br>缺点：程序架构需调整。改动最大.<br>实现：signal(python,django)<br>这个严格来说，并不属于并行范畴，但是将其放到这里，因为其和生产者消费者有共通之处，而且协程的实现底层也是基于事件模型。<br>生产者消费者存在很大问题，就是难以调试以及流程难以控制，由于切分粒度很细，并且不同步骤之间几乎独立，虽然可以保证整体的顺序执行以及最终任务可完成，但其上下游关系难以追溯，一旦出错也难以复现。所以个人很排斥生产者消费者这种方式。<br>而事件则不同，生产完成后将信息注册到事件链中，不但可以保存任务结束的result,还可以传递任务本身初始参数信息。每个事件都可以看做独立函数，即使某一个出错，也可以将事件参数作为debug锚点进行追踪。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def thread_multi():</span><br><span class="line">    threads = list()</span><br><span class="line">    for url in urls:</span><br><span class="line">        threads.append(threading.Thread(target=process, args=(url,)))</span><br><span class="line">    [t.start() for t in threads]</span><br><span class="line">    [t.join() for t in threads]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def thread_map():</span><br><span class="line">    pool = ThreadPool(max(1, cpu_count() - 1))</span><br><span class="line">    results = pool.map(process, urls)</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    print(results)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def thread_async():</span><br><span class="line">    pool = ThreadPool(max(1, cpu_count() - 1))</span><br><span class="line">    results = list()</span><br><span class="line">    for url in urls:</span><br><span class="line">        results.append(pool.apply_async(process, args=(url,)))</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    print([result.get() for result in results])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def process_multi():</span><br><span class="line">    processes = list()</span><br><span class="line">    for url in urls:</span><br><span class="line">        processes.append(Process(target=process, args=(url,)))</span><br><span class="line">    [t.start() for t in processes]</span><br><span class="line">    [t.join() for t in processes]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def process_map():</span><br><span class="line">    pool = Pool(processes=max(1, cpu_count() - 1))</span><br><span class="line">    results = pool.map(process, urls)</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    print(results)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def process_async():</span><br><span class="line">    pool = Pool(processes=max(1, cpu_count() - 1))</span><br><span class="line">    results = list()</span><br><span class="line">    for url in urls:</span><br><span class="line">        results.append(pool.apply_async(process, (url,)))</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    print([result.get() for result in results])</span><br></pre></td></tr></table></figure>



<h1 id="多线程与数据同步"><a href="#多线程与数据同步" class="headerlink" title="多线程与数据同步"></a>多线程与数据同步<a href="#多线程与数据同步" class="header-anchor">#</a></h1><p>python并发<strong>首选进程</strong>，但偶尔有场景进程无法搞定，比如有些<strong>变量是无法序列化的</strong>，就无法使用工具包<strong>manager()的工具类进行共享</strong>。如果自己实现新的共享方法，可能开发量较大，且质量难以保证。此时可考虑用线程处理，规避进程的变量共享难题，而且实际场景中,<strong>IO大概率都是瓶颈</strong>，所以使用线程其实也的确有些优势。个人而言，选择进程和线程较为重视的<strong>安全性</strong>，进程数据隔离较好，互不干扰。其次就是<strong>公用数据占比</strong>，如果大多数数据都需公用，那么线程也会比进程更佳，避免了进程较多的数据共享问题。</p>
<h3 id="线程本身就有局部变量为何还需要threadlocal"><a href="#线程本身就有局部变量，为何还需要ThreadLocal" class="headerlink" title="线程本身就有局部变量，为何还需要ThreadLocal"></a>线程本身就有局部变量，为何还需要ThreadLocal<a href="#线程本身就有局部变量为何还需要threadlocal" class="header-anchor">#</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line"> </span><br><span class="line"># 创建全局ThreadLocal对象:</span><br><span class="line">local_school = threading.local()</span><br><span class="line"> </span><br><span class="line">def process_student():</span><br><span class="line">  print &#x27;Hello, %s (in %s)&#x27; % (local_school.student, threading.current_thread().name)</span><br><span class="line"> </span><br><span class="line">def process_thread(name):</span><br><span class="line">  # 绑定ThreadLocal的student:</span><br><span class="line">  local_school.student = name</span><br><span class="line">  process_student()</span><br><span class="line"> </span><br><span class="line">t1 = threading.Thread(target= process_thread, args=(&#x27;Alice&#x27;,), name=&#x27;Thread-A&#x27;)</span><br><span class="line">t2 = threading.Thread(target= process_thread, args=(&#x27;Bob&#x27;,), name=&#x27;Thread-B&#x27;)</span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line">t1.join()</span><br><span class="line">t2.join()</span><br></pre></td></tr></table></figure>





<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料<a href="#参考资料" class="header-anchor">#</a></h1><p><a href="https://hexo.yuanjh.cn/hexo/16e1d5a">偏函数</a></p>
<p><a href="https://hexo.yuanjh.cn/hexo/549f56e4">并发</a></p>
<p><a href="https://hexo.yuanjh.cn/page/5/">闻鸡起舞 </a></p>
<p><a href="http://luly.lamost.org/blog/python_multiprocessing.html">python多进程pickle</a></p>
<p><a href="https://www.jianshu.com/p/2d3e6a21f6fe">Python生产者消费者模型 </a></p>
<p><a href="https://blog.csdn.net/weixin_30279751/article/details/95653467">(19条消息) 进程间通信(队列、管道)、消费者模型和进程池(apply,apply_async,map)_weixin_30279751的博客-CSDN博客</a></p>
]]></content>
  </entry>
  <entry>
    <title>threading</title>
    <url>/article/threading/</url>
    <content><![CDATA[<h1 id="python-多线程实现"><a href="#python-多线程实现" class="headerlink" title="python 多线程实现"></a>python 多线程实现<a href="#python-多线程实现" class="header-anchor">#</a></h1><p>首先，python的多线程是假的。</p>
<p>看一个例子来看看python多线程的实现。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def say(name):</span><br><span class="line">        print(&#x27;你好%s at %s&#x27; %(name,time.ctime()))</span><br><span class="line">        time.sleep(2)</span><br><span class="line">        print(&quot;结束%s at %s&quot; %(name,time.ctime()))</span><br><span class="line"></span><br><span class="line">def listen(name):</span><br><span class="line">    print(&#x27;你好%s at %s&#x27; % (name,time.ctime()))</span><br><span class="line">    time.sleep(4)</span><br><span class="line">    print(&quot;结束%s at %s&quot; % (name,time.ctime()))</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    t1 = threading.Thread(target=say,args=(&#x27;tony&#x27;,))  #创建线程对象，Thread是一个类，实例化产生t1对象，这里就是创建了一个线程对象t1</span><br><span class="line">    t1.start() #启动线程，线程执行</span><br><span class="line">    t2 = threading.Thread(target=listen, args=(&#x27;simon&#x27;,)) #这里就是创建了一个线程对象t2</span><br><span class="line">    t2.start()</span><br><span class="line"></span><br><span class="line">    print(&quot;程序结束=====================&quot;)</span><br><span class="line"># 输出结果为</span><br><span class="line">你好tony at Fri Aug 20 15:42:07 2021 --t1线程执行</span><br><span class="line">你好simon at Fri Aug 20 15:42:07 2021 --t2线程执行</span><br><span class="line">程序结束===================== --主线程执行</span><br><span class="line">结束tony at Fri Aug 20 15:42:09 2021 --sleep之后，t1线程执行</span><br><span class="line">结束simon at Fri Aug 20 15:42:11 2021 --sleep之后，t2线程执行</span><br></pre></td></tr></table></figure>

<p>我们可以看到主线程的print并不是等t1,t2线程都执行完毕之后才打印的，这是因为主线程和t1,t2 线程是同时跑的。但是主进程要等非守护子线程结束之后，主线程才会退出。</p>
<span id="more"></span>

<p>上面其实就是python多线程的最简单用法，但是，一般开发中，我们需要主线程的print打印是在最后面的，表明所有流程都结束了，也就是主线程结束了。这里就引入了一个join的概念。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def say(name):</span><br><span class="line">        print(&#x27;你好%s at %s&#x27; %(name,time.ctime()))</span><br><span class="line">        time.sleep(2)</span><br><span class="line">        print(&quot;结束%s at %s&quot; %(name,time.ctime()))</span><br><span class="line"></span><br><span class="line">def listen(name):</span><br><span class="line">    print(&#x27;你好%s at %s&#x27; % (name,time.ctime()))</span><br><span class="line">    time.sleep(4)</span><br><span class="line">    print(&quot;结束%s at %s&quot; % (name,time.ctime()))</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    t1 = threading.Thread(target=say,args=(&#x27;tony&#x27;,))  #Thread是一个类，实例化产生t1对象，这里就是创建了一个线程对象t1</span><br><span class="line">    t1.start() #线程执行</span><br><span class="line">    t2 = threading.Thread(target=listen, args=(&#x27;simon&#x27;,)) #这里就是创建了一个线程对象t2</span><br><span class="line">    t2.start()</span><br><span class="line"></span><br><span class="line">    t1.join() #join等t1子线程结束，主线程打印并且结束</span><br><span class="line">    t2.join() #join等t2子线程结束，主线程打印并且结束</span><br><span class="line">    print(&quot;程序结束=====================&quot;)</span><br><span class="line">#输出</span><br><span class="line">你好tony at Fri Aug 20 15:49:01 2021</span><br><span class="line">你好simon at Fri Aug 20 15:49:01 2021</span><br><span class="line">结束tony at Fri Aug 20 15:49:03 2021</span><br><span class="line">结束simon at Fri Aug 20 15:49:05 2021</span><br><span class="line">程序结束=====================</span><br></pre></td></tr></table></figure>

<p>上面代码中加入join方法后实现了，我们上面所想要的结果，主线程print最后执行，并且主线程退出，注意主线程执行了打印操作和主线程结束不是一个概念，如果子线程不加join，则主线程也会执行打印，但是主线程不会结束，还是需要待非守护子线程结束之后，主线程才结束。</p>
<p>上面的情况，主进程都需要等待非守护子线程结束之后，主线程才结束。那我们是不是注意到一点，我说的是“非守护子线程”，那什么是非守护子线程？默认的子线程都是主线程的非守护子线程，但是有时候我们有需求，当主进程结束，不管子线程有没有结束，子线程都要跟随主线程一起退出，这时候我们引入一个“守护线程”的概念。</p>
<p>如果某个子线程设置为守护线程，主线程其实就不用管这个子线程了，当所有其他非守护线程结束，主线程就会退出，而守护线程将和主线程一起退出，守护主线程，这就是守护线程的意思</p>
<ol>
<li><p>设置t1线程为守护线程，看看执行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def say(name):</span><br><span class="line">        print(&#x27;你好%s at %s&#x27; %(name,time.ctime()))</span><br><span class="line">        time.sleep(2)</span><br><span class="line">        print(&quot;结束%s at %s&quot; %(name,time.ctime()))</span><br><span class="line"></span><br><span class="line">def listen(name):</span><br><span class="line">    print(&#x27;你好%s at %s&#x27; % (name,time.ctime()))</span><br><span class="line">    time.sleep(4)</span><br><span class="line">    print(&quot;结束%s at %s&quot; % (name,time.ctime()))</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    t1 = threading.Thread(target=say,args=(&#x27;tony&#x27;,))  #Thread是一个类，实例化产生t1对象，这里就是创建了一个线程对象t1</span><br><span class="line">    t1.setDaemon(True)</span><br><span class="line">    t1.start() #线程执行</span><br><span class="line">    t2 = threading.Thread(target=listen, args=(&#x27;simon&#x27;,)) #这里就是创建了一个线程对象t2</span><br><span class="line">    t2.start()</span><br><span class="line"></span><br><span class="line">    print(&quot;程序结束=====================&quot;)</span><br><span class="line">#输出</span><br><span class="line">你好tony at Fri Aug 20 15:59:52 2021</span><br><span class="line">你好simon at Fri Aug 20 15:59:52 2021程序结束=====================</span><br><span class="line"></span><br><span class="line">结束tony at Fri Aug 20 15:59:54 2021</span><br><span class="line">结束simon at Fri Aug 20 15:59:56 2021</span><br></pre></td></tr></table></figure></li>
<li><p>设置t2线程为守护线程，看看执行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def say(name):</span><br><span class="line">        print(&#x27;你好%s at %s&#x27; %(name,time.ctime()))</span><br><span class="line">        time.sleep(2)</span><br><span class="line">        print(&quot;结束%s at %s&quot; %(name,time.ctime()))</span><br><span class="line"></span><br><span class="line">def listen(name):</span><br><span class="line">    print(&#x27;你好%s at %s&#x27; % (name,time.ctime()))</span><br><span class="line">    time.sleep(4)</span><br><span class="line">    print(&quot;结束%s at %s&quot; % (name,time.ctime()))</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    t1 = threading.Thread(target=say,args=(&#x27;tony&#x27;,))  #Thread是一个类，实例化产生t1对象，这里就是创建了一个线程对象t1</span><br><span class="line">    </span><br><span class="line">    t1.start() #线程执行</span><br><span class="line">    t2 = threading.Thread(target=listen, args=(&#x27;simon&#x27;,)) #这里就是创建了一个线程对象t2</span><br><span class="line">    t2.setDaemon(True)</span><br><span class="line">    t2.start()</span><br><span class="line"></span><br><span class="line">    print(&quot;程序结束=====================&quot;)</span><br><span class="line">#输出</span><br><span class="line">你好tony at Fri Aug 20 16:02:19 2021</span><br><span class="line">你好simon at Fri Aug 20 16:02:19 2021程序结束=====================</span><br><span class="line"></span><br><span class="line">结束tony at Fri Aug 20 16:02:21 2021</span><br></pre></td></tr></table></figure></li>
</ol>
<p>不知道大家有没有弄清楚上面python多线程的实现方式以及join,守护线程的用法。</p>
<p>多线程的实现方法：</p>
<ol>
<li><p>直接创建子进程</p>
<p>首先可以使用 Thread 类来创建一个线程，创建时需要指定 target 参数为运行的方法名称，如果被调用的方法需要传入额外的参数，则可以通过 Thread 的 args 参数来指定。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line">def target(second):</span><br><span class="line">    print(f&#x27;Threading &#123;threading.current_thread().name&#125; is running&#x27;)</span><br><span class="line">    print(f&#x27;Threading &#123;threading.current_thread().name&#125; sleep &#123;second&#125;s&#x27;)</span><br><span class="line">    time.sleep(second)</span><br><span class="line">    print(f&#x27;Threading &#123;threading.current_thread().name&#125; is ended&#x27;)</span><br><span class="line">print(f&#x27;Threading &#123;threading.current_thread().name&#125; is running&#x27;)</span><br><span class="line">for i in [1, 5]:</span><br><span class="line">    thread = threading.Thread(target=target, args=[i])</span><br><span class="line">    thread.start()</span><br></pre></td></tr></table></figure></li>
<li><p>继承Thread类创建子进程</p>
<p>通过继承 Thread 类的方式创建一个线程，该线程需要执行的方法写在类的 run 方法里面即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line">class MyThread(threading.Thread):</span><br><span class="line">    def __init__(self, second):</span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.second = second</span><br><span class="line">    </span><br><span class="line">    def run(self):</span><br><span class="line">        print(f&#x27;Threading &#123;threading.current_thread().name&#125; is running&#x27;)</span><br><span class="line">        print(f&#x27;Threading &#123;threading.current_thread().name&#125; sleep &#123;self.second&#125;s&#x27;)</span><br><span class="line">        time.sleep(self.second)</span><br><span class="line">        print(f&#x27;Threading &#123;threading.current_thread().name&#125; is ended&#x27;)</span><br><span class="line">print(f&#x27;Threading &#123;threading.current_thread().name&#125; is running&#x27;)</span><br><span class="line">threads = []</span><br><span class="line">for i in [1, 5]:</span><br><span class="line">    thread = MyThread(i)</span><br><span class="line">    threads.append(thread)</span><br><span class="line">    thread.start()</span><br></pre></td></tr></table></figure></li>
</ol>
<p>主要方法：</p>
<p>join()：在子线程完成运行之前，这个子线程的父线程将一直被阻塞。</p>
<p>setDaemon(True)：</p>
<p>将线程声明为守护线程，必须在start() 方法调用之前设置， 如果不设置为守护线程程序会被无限挂起。这个方法基本和join是相反的。</p>
<p>当我们在程序运行中，执行一个主线程，如果主线程又创建一个子线程，主线程和子线程 就分兵两路，分别运行，那么当主线程完成</p>
<p>想退出时，会检验子线程是否完成。如 果子线程未完成，则主线程会等待子线程完成后再退出。但是有时候我们需要的是 只要主线程完成了，不管子线程是否完成，都要和主线程一起退出，这时就可以 用setDaemon方法啦。</p>
<p>其他方法：</p>
<p>run(): 线程被cpu调度后自动执行线程对象的run方法<br>start():启动线程活动。<br>isAlive(): 返回线程是否活动的。<br>getName(): 返回线程名。<br>setName(): 设置线程名。</p>
<p>threading模块提供的一些方法：<br>threading.currentThread(): 返回当前的线程变量。<br>threading.enumerate(): 返回一个包含正在运行的线程的list。正在运行指线程启动后、结束前，不包括启动前和终止后的线程。<br>threading.activeCount():返回正在运行的线程数量，与len(threading.enumerate())有相同的结果。</p>
<p>上面的例子中我们注意到两如果个任务如果顺序执行要6s结束，如果是多线程执行4S结束，性能是有所提升的，但是我们要知道这里的性能提升实际上是由于cpu并发实现性能提升，也就是cpu线程切换（多道技术）带来的，而并不是真正的多cpu并行执行。</p>
<p>上面提到了并行和并发，那这两者有什么区别呢？</p>
<p>并发：是指一个系统具有处理多个任务的能力（cpu切换，多道技术）<br>并行：是指一个系统具有同时处理多个任务的能力（cpu同时处理多个任务）<br>并行是并发的一种情况，子集</p>
<h1 id="python同步锁"><a href="#python同步锁" class="headerlink" title="python同步锁"></a>python同步锁<a href="#python同步锁" class="header-anchor">#</a></h1><p>锁通常被用来实现对共享资源的同步访问。为每一个共享资源创建一个Lock对象，当你需要访问该资源时，调用acquire方法来获取锁对象（如果其它线程已经获得了该锁，则当前线程需等待其被释放），待资源访问完后，再调用release方法释放锁。</p>
<p> 当没有同步锁时：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">num = 100</span><br><span class="line"></span><br><span class="line">def fun_sub():</span><br><span class="line">    global num</span><br><span class="line">    # num -= 1</span><br><span class="line">    num2 = num</span><br><span class="line">    time.sleep(0.001)</span><br><span class="line">    num = num2-1</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    print(&#x27;开始测试同步锁 at %s&#x27; % time.ctime())</span><br><span class="line"></span><br><span class="line">    thread_list = []</span><br><span class="line">    for thread in range(100):</span><br><span class="line">        t = threading.Thread(target=fun_sub)</span><br><span class="line">        t.start()</span><br><span class="line">        thread_list.append(t)</span><br><span class="line"></span><br><span class="line">    for t in thread_list:</span><br><span class="line">        t.join()</span><br><span class="line">    print(&#x27;num is %d&#x27; % num)</span><br><span class="line">    print(&#x27;结束测试同步锁 at %s&#x27; % time.ctime())</span><br><span class="line"># 输出</span><br><span class="line">开始测试同步锁 at Fri Aug 20 17:45:40 2021</span><br><span class="line">num is 98</span><br><span class="line">结束测试同步锁 at Fri Aug 20 17:45:40 2021</span><br></pre></td></tr></table></figure>

<p>上面的例子其实很简单就是创建100的线程，然后每个线程去从公共资源num变量去执行减1操作，按照正常情况下面，等到代码执行结束，打印num变量，应该得到的是0，因为100个线程都去执行了一次减1的操作。但我们会发现，每次执行的结果num值都不是一样的。</p>
<p>我们来看看上面代码的执行流程。<br>1.因为GIL，只有一个线程（假设线程1）拿到了num这个资源，然后把变量赋值给num2,sleep 0.001秒，这时候num=100<br>2.当第一个线程sleep 0.001秒这个期间，这个线程会做yield操作，就是把cpu切换给别的线程执行（假设线程2拿到个GIL，获得cpu使用权），线程2也和线程1一样也拿到num,返回赋值给num2，然sleep,这时候，其实num还是=100.<br>3.线程2 sleep时候，又要yield操作，假设线程3拿到num,执行上面的操作，其实num有可能还是100<br>4.等到后面cpu重新切换给线程1，线程2，线程3上执行的时候，他们执行减1操作后，其实等到的num其实都是99，而不是顺序递减的。<br>5.其他剩余的线程操作如上</p>
<p>加上锁后：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">num = 100</span><br><span class="line"></span><br><span class="line">def fun_sub():</span><br><span class="line">    global num</span><br><span class="line">    lock.acquire()</span><br><span class="line">    print(&#x27;----加锁----&#x27;)</span><br><span class="line">    print(&#x27;现在操作共享资源的线程名字是:&#x27;,t.name)</span><br><span class="line">    num2 = num</span><br><span class="line">    time.sleep(0.001)</span><br><span class="line">    num = num2-1</span><br><span class="line">    lock.release()</span><br><span class="line">    print(&#x27;----释放锁----&#x27;)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    print(&#x27;开始测试同步锁 at %s&#x27; % time.ctime())</span><br><span class="line"></span><br><span class="line">    lock = threading.Lock() #创建一把同步锁</span><br><span class="line"></span><br><span class="line">    thread_list = []</span><br><span class="line">    for thread in range(100):</span><br><span class="line">        t = threading.Thread(target=fun_sub)</span><br><span class="line">        t.start()</span><br><span class="line">        thread_list.append(t)</span><br><span class="line"></span><br><span class="line">    for t in thread_list:</span><br><span class="line">        t.join()</span><br><span class="line">    print(&#x27;num is %d&#x27; % num)</span><br><span class="line">    print(&#x27;结束测试同步锁 at %s&#x27; % time.ctime())</span><br></pre></td></tr></table></figure>



<h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁<a href="#死锁" class="header-anchor">#</a></h2><p>死锁的这个概念在很多地方都存在，比较在数据中，大概介绍下私有是怎么产生的</p>
<ol>
<li>A拿了一个苹果</li>
<li>B拿了一个香蕉</li>
<li>A现在想再拿个香蕉，就在等待B释放这个香蕉</li>
<li>B同时想要再拿个苹果，这时候就等待A释放苹果</li>
<li>这样就是陷入了僵局，这就是生活中的死锁</li>
</ol>
<p>python中在线程间共享多个资源的时候，如果两个线程分别占有一部分资源并且同时等待对方的资源，就会造成死锁，因为系统判断这部分资源都正在使用，所有这两个线程在无外力作用下将一直等待下去。下面是一个死锁的例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">lock_apple = threading.Lock()</span><br><span class="line">lock_banana = threading.Lock()</span><br><span class="line"></span><br><span class="line">class MyThread(threading.Thread):</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        self.fun1()</span><br><span class="line">        self.fun2()</span><br><span class="line"></span><br><span class="line">    def fun1(self):</span><br><span class="line"></span><br><span class="line">        lock_apple.acquire()  # 如果锁被占用,则阻塞在这里,等待锁的释放</span><br><span class="line"></span><br><span class="line">        print (&quot;线程 %s , 想拿: %s--%s&quot; %(self.name, &quot;苹果&quot;,time.ctime()))</span><br><span class="line"></span><br><span class="line">        lock_banana.acquire()</span><br><span class="line">        print (&quot;线程 %s , 想拿: %s--%s&quot; %(self.name, &quot;香蕉&quot;,time.ctime()))</span><br><span class="line">        lock_banana.release()</span><br><span class="line">        lock_apple.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def fun2(self):</span><br><span class="line"></span><br><span class="line">        lock_banana.acquire()</span><br><span class="line">        print (&quot;线程 %s , 想拿: %s--%s&quot; %(self.name, &quot;香蕉&quot;,time.ctime()))</span><br><span class="line">        time.sleep(0.1)</span><br><span class="line"></span><br><span class="line">        lock_apple.acquire()</span><br><span class="line">        print (&quot;线程 %s , 想拿: %s--%s&quot; %(self.name, &quot;苹果&quot;,time.ctime()))</span><br><span class="line">        lock_apple.release()</span><br><span class="line"></span><br><span class="line">        lock_banana.release()</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    for i in range(0, 10):  #建立10个线程</span><br><span class="line">        my_thread = MyThread()  #类继承法是python多线程的另外一种实现方式</span><br><span class="line">        my_thread.start()</span><br></pre></td></tr></table></figure>

<p>上面的代码其实就是描述了苹果和香蕉的故事。大家可以仔细看看过程。下面我们看看执行流程</p>
<p>1.fun1中，线程1先拿了苹果，然后拿了香蕉，然后释放香蕉和苹果，然后再在fun2中又拿了香蕉，sleep 0.1秒。<br>2.在线程1的执行过程中，线程2进入了，因为苹果被线程1释放了，线程2这时候获得了苹果，然后想拿香蕉<br>3.这时候就出现问题了，线程一拿完香蕉之后想拿苹果，返现苹果被线程2拿到了，线程2拿到苹果执行，想拿香蕉，发现香蕉被线程1持有了<br>4.双向等待，出现死锁，代码执行不下去了</p>
<h2 id="python递归锁rlock"><a href="#Python递归锁RLock" class="headerlink" title="Python递归锁RLock"></a>Python递归锁RLock<a href="#python递归锁rlock" class="header-anchor">#</a></h2><p>为了支持在同一线程中多次请求同一资源，python提供了”递归锁”：threading.RLock。RLock内部维护着一个Lock和一个counter变量，counter记录了acquire的次数，从而使得资源可以被多次acquire。直到一个线程所有的acquire都被release，其他的线程才能获得资源。</p>
<p>下面我们用递归锁RLock解决上面的死锁问题:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">lock = threading.RLock()  #递归锁</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class MyThread(threading.Thread):</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        self.fun1()</span><br><span class="line">        self.fun2()</span><br><span class="line"></span><br><span class="line">    def fun1(self):</span><br><span class="line"></span><br><span class="line">        lock.acquire()  # 如果锁被占用,则阻塞在这里,等待锁的释放</span><br><span class="line"></span><br><span class="line">        print (&quot;线程 %s , 想拿: %s--%s&quot; %(self.name, &quot;苹果&quot;,time.ctime()))</span><br><span class="line"></span><br><span class="line">        lock.acquire()</span><br><span class="line">        print (&quot;线程 %s , 想拿: %s--%s&quot; %(self.name, &quot;香蕉&quot;,time.ctime()))</span><br><span class="line">        lock.release()</span><br><span class="line">        lock.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def fun2(self):</span><br><span class="line"></span><br><span class="line">        lock.acquire()</span><br><span class="line">        print (&quot;线程 %s , 想拿: %s--%s&quot; %(self.name, &quot;香蕉&quot;,time.ctime()))</span><br><span class="line">        time.sleep(0.1)</span><br><span class="line"></span><br><span class="line">        lock.acquire()</span><br><span class="line">        print (&quot;线程 %s , 想拿: %s--%s&quot; %(self.name, &quot;苹果&quot;,time.ctime()))</span><br><span class="line">        lock.release()</span><br><span class="line"></span><br><span class="line">        lock.release()</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    for i in range(0, 10):  #建立10个线程</span><br><span class="line">        my_thread = MyThread()  #类继承法是python多线程的另外一种实现方式</span><br><span class="line">        my_thread.start()</span><br></pre></td></tr></table></figure>

<p>上面我们用一把递归锁，就解决了多个同步锁导致的死锁问题。大家可以把RLock理解为大锁中还有小锁，只有等到内部所有的小锁，都没有了，其他的线程才能进入这个公共资源。</p>
<p>另外一点前面没有就算用类继承的方法实现python多线程，这个大家可以查下，就算继承Thread类，然后重新run方法来实现。</p>
<h1 id="同步条件"><a href="#同步条件" class="headerlink" title="同步条件"></a>同步条件<a href="#同步条件" class="header-anchor">#</a></h1><p>先说说为什么我们需要这个同步条件，我们的python多线程在执行task过程中，是相互竞争的，大家都可以先获取cpu的执行权限，这就是问题所在的地方，每个线程都是独立运行且状态不可预测，但是我们想想如果我们的业务中需要根据情况来决定线程的执行顺序，也就是程序中的其他线程需要通过判断某个线程的状态来确定自己下一步的操作，这时候我们就需要使用threading库中的Event对象。 对象包含一个可由线程设置的信号标志,它允许线程等待某些事件的发生。</p>
<p>在 初始情况下,Event对象中的信号标志被设置为假，如果有线程等待一个Event对象, ,那么这个线程将会被一直阻塞直至该标志为真。</p>
<p>一个线程如果将一个Event对象的信号标志设置为真,它将唤醒所有等待这个Event对象的线程继续执行。</p>
<p>Event的方法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">event.isSet()：返回event的状态值</span><br><span class="line">event.wait()：如果 event.isSet()==False，将阻塞线程触发event.wait()</span><br><span class="line">event.set()： 设置event的状态值为True，所有阻塞池的线程激活进入就绪状态， 等待执行</span><br><span class="line">event.clear()：恢复event的状态值为False</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">class Teacher(threading.Thread):</span><br><span class="line">    def run(self):</span><br><span class="line">        print(&quot;大家现在要考试&quot;)</span><br><span class="line">        print(event.isSet())</span><br><span class="line">        event.set()</span><br><span class="line">        time.sleep(3)</span><br><span class="line">        print(&quot;考试结束&quot;)</span><br><span class="line">        print(event.isSet())</span><br><span class="line">        event.set()</span><br><span class="line">class Student(threading.Thread):</span><br><span class="line">    def run(self):</span><br><span class="line">        event.wait()</span><br><span class="line">        print(&quot;啊啊啊啊啊啊&quot;)</span><br><span class="line">        time.sleep(1)</span><br><span class="line">        event.clear()</span><br><span class="line">        event.wait()</span><br><span class="line">        print(&quot;下课回家&quot;)</span><br><span class="line"></span><br><span class="line">if __name__==&quot;__main__&quot;:</span><br><span class="line">    event=threading.Event()</span><br><span class="line">    threads=[]</span><br><span class="line">    for i in range(10):</span><br><span class="line">        threads.append(Student())</span><br><span class="line">    threads.append(Teacher())</span><br><span class="line">    for t in threads:</span><br><span class="line">        t.start()</span><br><span class="line">    for t in threads:</span><br><span class="line">        t.join()</span><br></pre></td></tr></table></figure>



<p>上述代码流程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.模拟1个老师和10个学生，进行考试，我们需要的目的是学生线程要等待老师线程说完“大家现在考试”，然后学生线程去考试，之后老师线程说“考试结束”，学生线程放学回家，学生线程的执行与否取决于老师线程，所以这里用的Event</span><br><span class="line">2.学生线程开始event.wait()，这个说明如果event如果一直不设置的话，学生线程就一直等待，等待一个event.set()操作</span><br><span class="line">3.老师线程说完&quot;大家现在要考试&quot;，然后event.set()，执行event,设置完执行，学生线程就能够被唤醒继续执行下面的操作发出&quot;啊啊啊啊啊啊&quot;的叫苦连天</span><br><span class="line">4.学生线程进行考试，并且执行event.clear()，清除event，因为他们在等老师说“考试结束”，之后他们在等老师线程的event.set()</span><br><span class="line">5.老师线程执行event.set()，唤醒学生线程，然后下课回家.</span><br></pre></td></tr></table></figure>



<h2 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量<a href="#信号量" class="header-anchor">#</a></h2><p>信号量用来控制线程并发数的，Semaphore管理一个内置的计数 器，每当调用acquire()时-1，调用release()时+1。计数器不能小于0，当计数器为 0时，acquire()将阻塞线程至同步锁定状态，直到其他线程调用release()。其实就是控制最多几个线程可以操作同享资源。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">semaphore = threading.Semaphore(5)</span><br><span class="line"></span><br><span class="line">def func():</span><br><span class="line">    if semaphore.acquire():</span><br><span class="line">        print (threading.currentThread().getName() + &#x27;获取共享资源&#x27;)</span><br><span class="line">        time.sleep(2)</span><br><span class="line">        semaphore.release()</span><br><span class="line"></span><br><span class="line">for i in range(10)</span><br><span class="line">  t1 = threading.Thread(target=func)</span><br><span class="line">  t1.start()</span><br></pre></td></tr></table></figure>

<p>上面一个简单的例子就是创建10个线程，让每次只让5个线程去执行func函数。</p>
<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列<a href="#队列" class="header-anchor">#</a></h2><p>Queue是python标准库中的线程安全的队列实现,提供了一个适用于多线程编程的先进先出的数据结构，即队列，用来在生产者和消费者线程之间的信息传递</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading,time</span><br><span class="line"></span><br><span class="line">m=[1,2,3,4,5]</span><br><span class="line">print(m[-1])</span><br><span class="line"></span><br><span class="line">def remove_last():</span><br><span class="line">    a=m[-1]</span><br><span class="line">    time.sleep(1)</span><br><span class="line">    m.remove(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t1=threading.Thread(target=remove_last)</span><br><span class="line">t1.start()</span><br><span class="line"></span><br><span class="line">t2=threading.Thread(target=remove_last)</span><br><span class="line">t2.start()</span><br><span class="line">## list 不是线程安全会报错</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">创建一个“队列”对象</span><br><span class="line">import Queue</span><br><span class="line">q = Queue.Queue(maxsize = 10)</span><br><span class="line">Queue.Queue类即是一个队列的同步实现。队列长度可为无限或者有限。可通过Queue的构造函数的可选参数maxsize来设定队列长度。如果maxsize小于1就表示队列长度无限。</span><br><span class="line"></span><br><span class="line">将一个值放入队列中</span><br><span class="line">q.put(10)</span><br><span class="line">调用队列对象的put()方法在队尾插入一个项目。put()有两个参数，第一个item为必需的，为插入项目的值；第二个block为可选参数，默认为</span><br><span class="line">1。如果队列当前为空且block为1，put()方法就使调用线程暂停,直到空出一个数据单元。如果block为0，put方法将引发Full异常。</span><br><span class="line"></span><br><span class="line">将一个值从队列中取出</span><br><span class="line">q.get()</span><br><span class="line">调用队列对象的get()方法从队头删除并返回一个项目。可选参数为block，默认为True。如果队列为空且block为True，</span><br><span class="line">get()就使调用线程暂停，直至有项目可用。如果队列为空且block为False，队列将引发Empty异常。</span><br><span class="line"></span><br><span class="line">Python Queue模块有三种队列及构造函数:</span><br><span class="line">1、Python Queue模块的FIFO队列先进先出。   class queue.Queue(maxsize)</span><br><span class="line">2、LIFO类似于堆，即先进后出。               class queue.LifoQueue(maxsize)</span><br><span class="line">3、还有一种是优先级队列级别越低越先出来。        class queue.PriorityQueue(maxsize)</span><br><span class="line"></span><br><span class="line">此包中的常用方法(q = Queue.Queue()):</span><br><span class="line">q.qsize() 返回队列的大小</span><br><span class="line">q.empty() 如果队列为空，返回True,反之False</span><br><span class="line">q.full() 如果队列满了，返回True,反之False</span><br><span class="line">q.full 与 maxsize 大小对应</span><br><span class="line">q.get([block[, timeout]]) 获取队列，timeout等待时间</span><br><span class="line">q.get_nowait() 相当q.get(False)</span><br><span class="line">非阻塞 q.put(item) 写入队列，timeout等待时间</span><br><span class="line">q.put_nowait(item) 相当q.put(item, False)</span><br><span class="line">q.task_done() 在完成一项工作之后，q.task_done() 函数向任务已经完成的队列发送一个信号</span><br><span class="line">q.join() 实际上意味着等到队列为空，再执行别的操作</span><br></pre></td></tr></table></figure>

<p>队列(queue)一般会被用在生产者和消费者模型上。</p>
<p>生产者消费者模型：</p>
<p>为什么要使用生产者和消费者模式</p>
<p>在python线程中，生产者就是生产数据的线程，消费者就是消费数据的线程。在多线程开发当中，如果生产者处理速度很快，而消费者处理速度很慢，那么生产者就必须等待消费者处理完，才能继续生产数据。同样的道理，如果消费者的处理能力大于生产者，那么消费者就必须等待生产者。为了解决这个问题于是引入了生产者和消费者模式。</p>
<p>什么是生产者消费者模式</p>
<p>生产者消费者模式是通过一个容器来解决生产者和消费者的强耦合问题。生产者和消费者彼此之间不直接通讯，而通过阻塞队列来进行通讯，所以生产者生产完数据之后不用等待消费者处理，直接扔给阻塞队列，消费者不找生产者要数据，而是直接从阻塞队列里取，阻塞队列就相当于一个缓冲区，平衡了生产者和消费者的处理能力。</p>
<p>下面我们看看生产者消费者的代码，就拿大家常说的吃包子为例子吧</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import time,random</span><br><span class="line">import queue,threading</span><br><span class="line"></span><br><span class="line">q = queue.Queue()</span><br><span class="line"></span><br><span class="line">def Producer(name):</span><br><span class="line">  count = 0</span><br><span class="line">  while count &lt;10:</span><br><span class="line">    print(&quot;制造包子ing&quot;)</span><br><span class="line">    time.sleep(random.randrange(3))</span><br><span class="line">    q.put(count)</span><br><span class="line">    print(&#x27;生产者 %s 生产了 %s 包子..&#x27; %(name, count))</span><br><span class="line">    count +=1</span><br><span class="line">    #q.task_done()</span><br><span class="line">    #q.join()</span><br><span class="line"></span><br><span class="line">def Consumer(name):</span><br><span class="line">  count = 0</span><br><span class="line">  while count &lt;10:</span><br><span class="line">    time.sleep(random.randrange(4))</span><br><span class="line">    if not q.empty():</span><br><span class="line">        data = q.get()</span><br><span class="line">        #q.task_done()</span><br><span class="line">        #q.join()</span><br><span class="line">        print(data)</span><br><span class="line">        print(&#x27;消费者 %s 消费了 %s 包子...&#x27; %(name, data))</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;包子吃完了&quot;)</span><br><span class="line">    count +=1</span><br><span class="line"></span><br><span class="line">c1 = threading.Thread(target=Producer, args=(&#x27;小明&#x27;,))</span><br><span class="line">c2 = threading.Thread(target=Consumer, args=(&#x27;小花&#x27;,))</span><br><span class="line">c3 = threading.Thread(target=Consumer, args=(&#x27;小灰&#x27;,))</span><br><span class="line">c1.start()</span><br><span class="line">c2.start()</span><br><span class="line">c3.start()</span><br><span class="line"></span><br><span class="line">c1.join()</span><br><span class="line">c2.join()</span><br><span class="line">c3.join()</span><br><span class="line"></span><br><span class="line">print(&#x27;结束&#x27;)</span><br></pre></td></tr></table></figure>

<p>另一种实现方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># q.task_done() 在完成一项工作之后，q.task_done() 函数向任务已经完成的队列发送一个信号</span><br><span class="line"># q.join() 实际上意味着等到队列为空，再执行别的操作</span><br><span class="line">import time,random</span><br><span class="line">import queue,threading</span><br><span class="line"></span><br><span class="line">q = queue.Queue()</span><br><span class="line"></span><br><span class="line">def Producer(name):</span><br><span class="line">  count = 0</span><br><span class="line">  while count &lt;10:</span><br><span class="line">    print(&quot;制造包子ing&quot;)</span><br><span class="line">    time.sleep(random.randrange(3))</span><br><span class="line">    q.put(count)</span><br><span class="line">    print(&#x27;生产者 %s 生产了 %s 包子..&#x27; %(name, count))</span><br><span class="line">    count +=1</span><br><span class="line">    q.task_done()</span><br><span class="line">    #q.join()</span><br><span class="line"></span><br><span class="line">def Consumer(name):</span><br><span class="line">  count = 0</span><br><span class="line">  while count &lt;10:</span><br><span class="line">    time.sleep(random.randrange(4))</span><br><span class="line">    data = q.get()</span><br><span class="line">    #q.task_done()</span><br><span class="line">    print(&#x27;等待中&#x27;)</span><br><span class="line">    q.join()</span><br><span class="line">    print(&#x27;消费者 %s 消费了 %s 包子...&#x27; %(name, data))</span><br><span class="line">    count +=1</span><br><span class="line"></span><br><span class="line">c1 = threading.Thread(target=Producer, args=(&#x27;小明&#x27;,))</span><br><span class="line">c2 = threading.Thread(target=Consumer, args=(&#x27;小花&#x27;,))</span><br><span class="line">c3 = threading.Thread(target=Consumer, args=(&#x27;小灰&#x27;,))</span><br><span class="line">c4 = threading.Thread(target=Consumer, args=(&#x27;小天&#x27;,))</span><br><span class="line"></span><br><span class="line">c1.start()</span><br><span class="line">c2.start()</span><br><span class="line">c3.start()</span><br><span class="line">c4.start()</span><br></pre></td></tr></table></figure>



<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料<a href="#参考资料" class="header-anchor">#</a></h1><p><a href="https://mp.weixin.qq.com/s/Hgp-x-T3ss4IiVk2_4VUrA">一篇文章搞懂Python多线程简单实现和GIL</a></p>
<p><a href="https://mp.weixin.qq.com/s/RZSBe2MG9tsbUVZLHxK9NA">一篇文章理清Python多线程同步锁，死锁和递归锁</a></p>
<p><a href="https://mp.weixin.qq.com/s/vKsNbDZnvg6LHWVA-AOIMA">同步条件</a></p>
]]></content>
  </entry>
  <entry>
    <title>hadoop_spark_hbase_hive</title>
    <url>/article/hadoop-spark-hbase-hive/</url>
    <content><![CDATA[<p>hdfs-site.xml</p>
<span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line">  you may not use this file except in compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to in writing, software</span><br><span class="line">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License for the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Put site-specific property overrides in this file. --&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                        &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">                                        &lt;value&gt;2&lt;/value&gt;</span><br><span class="line">                                                        &lt;final&gt;true&lt;/final&gt;</span><br><span class="line">                                                &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                        &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;</span><br><span class="line">                                        &lt;value&gt;/usr/local/hadoop/namenode&lt;/value&gt;</span><br><span class="line">                                                        &lt;final&gt;true&lt;/final&gt;</span><br><span class="line">                                                &lt;/property&gt;</span><br><span class="line">                                                &lt;property&gt;</span><br><span class="line">                                                                &lt;name&gt;dfs.datanode.name.dir&lt;/name&gt;</span><br><span class="line">                                                                                &lt;value&gt;/usr/local/hadoop/datanode&lt;/value&gt;</span><br><span class="line">                                                                                                &lt;final&gt;true&lt;/final&gt;</span><br><span class="line">                                                                                        &lt;/property&gt;</span><br><span class="line">                                                                                        &lt;property&gt;</span><br><span class="line">                                                                                                        &lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt;</span><br><span class="line"></span><br><span class="line">&lt;value&gt;master:50090&lt;/value&gt;</span><br><span class="line"></span><br><span class="line">                &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>



<p>core-site.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line">  you may not use this file except in compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to in writing, software</span><br><span class="line">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License for the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Put site-specific property overrides in this file. --&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                        &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">                                        &lt;value&gt;file:/usr/local/hadoop/tmp&lt;/value&gt;</span><br><span class="line">                                                        &lt;description&gt;Abase for other temporary directories.&lt;/description&gt;</span><br><span class="line">                                                &lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">           &lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">                      &lt;value&gt;hdfs://master:9000&lt;/value&gt;</span><br><span class="line">                               &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">                               &lt;property&gt;</span><br><span class="line">                                                       &lt;name&gt;ha.zookeeper.quorum&lt;/name&gt;</span><br><span class="line">                                                                               &lt;value&gt;master:2181,slave1:2181,slave2:2181&lt;/value&gt;</span><br><span class="line">                                                                                               &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line">~                                    </span><br></pre></td></tr></table></figure>



<p>hadoop-env.sh</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_291</span><br><span class="line">export HDFS_NAMENODE_USER=root</span><br><span class="line">export HDFS_DATANODE_USER=root</span><br><span class="line">export HDFS_SECONDARYNAMENODE_USER=root</span><br><span class="line">export YARN_RESOURCEMANAGER_USER=root</span><br><span class="line">export YARN_NODEMANAGER_USER=root</span><br></pre></td></tr></table></figure>



<p>mapred-site.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line">  you may not use this file except in compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to in writing, software</span><br><span class="line">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License for the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Put site-specific property overrides in this file. --&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                        &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">                                        &lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">                                                    &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                        &lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt;</span><br><span class="line">                                        &lt;value&gt;master:10020&lt;/value&gt;</span><br><span class="line">                                &lt;/property&gt;</span><br><span class="line">                                &lt;property&gt;</span><br><span class="line">                                                &lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt;</span><br><span class="line">                                                                &lt;value&gt;master:19888&lt;/value&gt;</span><br><span class="line">                                                        &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line">~                                                                                                                       ~                                                                                                                       ~   </span><br></pre></td></tr></table></figure>



<p>yarn-site.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line">  you may not use this file except in compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to in writing, software</span><br><span class="line">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License for the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Site specific YARN configuration properties --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                  &lt;name&gt;yarn.resourcemanager.webapp.address&lt;/name&gt;</span><br><span class="line">                            &lt;value&gt;master:8088&lt;/value&gt;</span><br><span class="line">                    &lt;/property&gt;</span><br><span class="line">                    &lt;property&gt;</span><br><span class="line">                              &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;</span><br><span class="line">                                        &lt;value&gt;master&lt;/value&gt;</span><br><span class="line">                                &lt;/property&gt;</span><br><span class="line">                                &lt;property&gt;</span><br><span class="line">                                          &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">                                                    &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">                                            &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line">~                                                                                                                       ~                                                                                                                       ~                                                                                                                       ~                                                                                                                       ~                                                                                                                       ~        </span><br></pre></td></tr></table></figure>



<p>workers</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">master</span><br><span class="line">slave1</span><br><span class="line">slave2</span><br><span class="line">~                                                                                                                       ~                                                                                                                       ~                                                                                                                       ~                                                                                                                       ~         </span><br></pre></td></tr></table></figure>

<p>在$HADOOP_HOME目录下创建datanode,namenode,tmp文件夹</p>
<p>HBASE</p>
<p>hbase-env.sh</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export HBASE_DISABLE_HADOOP_CLASSPATH_LOOKUP=&quot;true&quot;</span><br><span class="line"></span><br><span class="line"># Override text processing tools for use by these launch scripts.</span><br><span class="line"># export GREP=&quot;$&#123;GREP-grep&#125;&quot;</span><br><span class="line"># export SED=&quot;$&#123;SED-sed&#125;&quot;</span><br><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_291</span><br><span class="line">export HBASE_MANAGES_ZK=false</span><br></pre></td></tr></table></figure>



<p>hbase-site.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* Unless required by applicable law or agreed to in writing, software</span><br><span class="line"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line"> * See the License for the specific language governing permissions and</span><br><span class="line"> * limitations under the License.</span><br><span class="line"> */</span><br><span class="line">--&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">  &lt;!--</span><br><span class="line">    The following properties are set for running HBase as a single process on a</span><br><span class="line">    developer workstation. With this configuration, HBase is running in</span><br><span class="line">    &quot;stand-alone&quot; mode and without a distributed file system. In this mode, and</span><br><span class="line">    without further configuration, HBase and ZooKeeper data are stored on the</span><br><span class="line">    local filesystem, in a path under the value configured for `hbase.tmp.dir`.</span><br><span class="line">    This value is overridden from its default value of `/tmp` because many</span><br><span class="line">    systems clean `/tmp` on a regular basis. Instead, it points to a path within</span><br><span class="line">    this HBase installation directory.</span><br><span class="line"></span><br><span class="line">    Running against the `LocalFileSystem`, as opposed to a distributed</span><br><span class="line">    filesystem, runs the risk of data integrity issues and data loss. Normally</span><br><span class="line">    HBase will refuse to run in such an environment. Setting</span><br><span class="line">    `hbase.unsafe.stream.capability.enforce` to `false` overrides this behavior,</span><br><span class="line">    permitting operation. This configuration is for the developer workstation</span><br><span class="line">    only and __should not be used in production!__</span><br><span class="line"></span><br><span class="line">    See also https://hbase.apache.org/book.html#standalone_dist</span><br><span class="line">  --&gt;</span><br><span class="line">         &lt;property&gt;</span><br><span class="line">                         &lt;name&gt;hbase.rootdir&lt;/name&gt;</span><br><span class="line">                                         &lt;value&gt;hdfs://master:9000/hbase&lt;/value&gt;</span><br><span class="line">                                         &lt;description&gt;nothing&lt;/description&gt;                              &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;hbase.cluster.distributed&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;true&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">                  &lt;name&gt;hbase.zookeeper.quorum&lt;/name&gt;</span><br><span class="line">                                  &lt;value&gt;master:2181,slave1:2181,slave2:2181&lt;/value&gt;</span><br><span class="line">                                                          &lt;description&gt;nothing&lt;/description&gt;</span><br><span class="line">                                                                      &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;hbase.tmp.dir&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;./tmp&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;hbase.unsafe.stream.capability.enforce&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;false&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>



<p>regionservers</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">master</span><br><span class="line">slave1</span><br><span class="line">slave2</span><br><span class="line">~                                                                                                                       ~         :q</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>HIVE</p>
<p>hive-site.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;</span><br><span class="line">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">	&lt;property&gt;   </span><br><span class="line">    	&lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt;                                 &lt;value&gt;jdbc:mysql://master:3306/hive?createDatabaseIfNotExist=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;useSSL=false&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;                                                                 &lt;property&gt;</span><br><span class="line">		&lt;name&gt;javax.jdo.option.ConnectionDriverName&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;com.mysql.jdbc.Driver&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;javax.jdo.option.ConnectionUserName&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;root&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;javax.jdo.option.ConnectionPassword&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;asdfqwer&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;datanucleus.readOnlyDatastore&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;false&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;                                                                 &lt;property&gt;</span><br><span class="line">		&lt;name&gt;datanucleus.fixedDatastore&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;false&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">		&lt;name&gt;datanucleus.autoCreateSchema&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;datanucleus.schema.autoCreateAll&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;datanucleus.autoCreateTables&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;datanucleus.autoCreateColumns&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;hive.metastore.local&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;hive.cli.print.header&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;hive.cli.print.current.db&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;true&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;                                                             &lt;/configuration&gt;                                                                                  </span><br></pre></td></tr></table></figure>



<p>创建warehouse文件夹，将template去掉，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql-connector-java-5.1.49-bin.jar ##来自下载</span><br><span class="line">guava-27.0-jre.jar##来自hadoop</span><br></pre></td></tr></table></figure>



<p>SPARK</p>
<p>spark-env.sh</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_291</span><br><span class="line">export SCALA_HOME=/usr/share/scala</span><br><span class="line">export HADOOP_HOME=/usr/local/hadoop</span><br><span class="line">export HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop</span><br><span class="line">export SPARK_MASTER_HOST=master</span><br><span class="line">export SPARK_LOCAL_DIRS=/usr/local/spark</span><br></pre></td></tr></table></figure>

<p>workers</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">master</span><br><span class="line">slave1</span><br><span class="line">slave2</span><br><span class="line">~            </span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start-spark-all.sh</span><br><span class="line">stop-spark-all.sh</span><br><span class="line">### 防止与Hadoop start-all.sh 冲突，改名</span><br></pre></td></tr></table></figure>



<p>ZOOKEEPER</p>
<p>zoo.cfg</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># The number of milliseconds of each tick</span><br><span class="line">tickTime=2000</span><br><span class="line"># The number of ticks that the initial</span><br><span class="line"># synchronization phase can take</span><br><span class="line">initLimit=10</span><br><span class="line"># The number of ticks that can pass between</span><br><span class="line"># sending a request and getting an acknowledgement</span><br><span class="line">syncLimit=5</span><br><span class="line"># the directory where the snapshot is stored.</span><br><span class="line"># do not use /tmp for storage, /tmp here is just</span><br><span class="line"># example sakes.</span><br><span class="line">dataDir=/usr/local/zookeeper/data</span><br><span class="line"># the port at which the clients will connect</span><br><span class="line">clientPort=2181</span><br><span class="line">server.1=172.17.0.2:2888:3888</span><br><span class="line">server.2=172.17.0.3:2888:3888</span><br><span class="line">server.3=172.17.0.4:2888:3888</span><br></pre></td></tr></table></figure>







<p>~/.bashrc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_291</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line">export HADOOP_HOME=/usr/local/hadoop</span><br><span class="line">export HADOOP_CONFIG_HOME=$HADOOP_HOME/etc/hadoop</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/bin</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/sbin</span><br><span class="line">export ZOOKEEPER_HOME=/usr/local/zookeeper</span><br><span class="line">export PATH=$PATH:$ZOOKEEPER_HOME/bin</span><br><span class="line">export SCALA_HOME=/usr/local/scala</span><br><span class="line">export PATH=$PATH:$SCALA_HOME/bin</span><br><span class="line">export SPARK_HOME=/usr/local/spark</span><br><span class="line">export PATH=$PATH:$SPARK_HOME/bin:$SPARK_HOME/sbin</span><br><span class="line">export HBASE_HOME=/usr/local/hbase</span><br><span class="line">export PATH=$PATH:$HBASE_HOME/bin</span><br><span class="line">export HIVE_HOME=/usr/local/hive</span><br><span class="line">export PATH=$PATH:$HIVE_HOME/bin</span><br></pre></td></tr></table></figure>



<h1 id="hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop<a href="#hadoop" class="header-anchor">#</a></h1><h2 id="step-1-拉取ubuntu镜像"><a href="#step-1-拉取Ubuntu镜像" class="headerlink" title="step 1 拉取Ubuntu镜像"></a>step 1 拉取Ubuntu镜像<a href="#step-1-拉取ubuntu镜像" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull ubuntu:latest</span><br></pre></td></tr></table></figure>

<h2 id="step-2-使用dockerfile构建包含jdk的ubuntu镜像"><a href="#step-2-使用Dockerfile构建包含jdk的ubuntu镜像" class="headerlink" title="step 2 使用Dockerfile构建包含jdk的ubuntu镜像"></a>step 2 使用Dockerfile构建包含jdk的ubuntu镜像<a href="#step-2-使用dockerfile构建包含jdk的ubuntu镜像" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">去jdk官网下载jdk包，此处下载的为jdk1.8 ** jdk-8u291-linux-x64.tar.gz**, 将下载好的jdk文件移至wsl2环境下，在此目录下新建Dockerfile文件，并进入编辑状态</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim Dockerfile</span><br></pre></td></tr></table></figure>

<p>在Dockfile中输入以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM ubuntu:latest</span><br><span class="line">MAINTAINER duanmu</span><br><span class="line">ADD jdk-8u291-linux-x64.tar.gz /usr/local/</span><br><span class="line">ENV JAVA_HOME /usr/local/jdk1.8.0_291</span><br><span class="line">ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">ENV PATH $PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure>

<p>编辑后保存，开始build镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t jdk-20210127 .</span><br></pre></td></tr></table></figure>

<h2 id="step-3-进入镜像"><a href="#step-3-进入镜像" class="headerlink" title="step 3 进入镜像"></a>step 3 进入镜像<a href="#step-3-进入镜像" class="header-anchor">#</a></h2><p>​        新建一个以jdk-20210127为基础镜像的容器命名为ubuntu_hadoop并指定容器的hostname为charlie,并进入容器。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it --name=ubuntu_hadoop -h charlie jdk-20210127</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="step-4-升级apt-get"><a href="#step-4-升级apt-get" class="headerlink" title="step 4 升级apt-get"></a>step 4 升级apt-get<a href="#step-4-升级apt-get" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure>



<h2 id="step-5-安装vim"><a href="#step-5-安装vim" class="headerlink" title="step 5 安装vim"></a>step 5 安装vim<a href="#step-5-安装vim" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install vim</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="step-6-更新apt-get镜像源"><a href="#step-6-更新apt-get镜像源" class="headerlink" title="step 6 更新apt-get镜像源"></a>step 6 更新apt-get镜像源<a href="#step-6-更新apt-get镜像源" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure>

<p>将其中内容全部替换为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deb-src http://archive.ubuntu.com/ubuntu focal main restricted #Added by software-properties</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal main restricted</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted multiverse universe #Added by software-properties</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted multiverse universe #Added by software-properties</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-updates universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-updates multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse #Added by software-properties</span><br><span class="line">deb http://archive.canonical.com/ubuntu focal partner</span><br><span class="line">deb-src http://archive.canonical.com/ubuntu focal partner</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted multiverse universe #Added by software-properties</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-security universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-security multiverse</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="step-7-重新升级apt-get"><a href="#step-7-重新升级apt-get" class="headerlink" title="step 7 重新升级apt-get"></a>step 7 重新升级apt-get<a href="#step-7-重新升级apt-get" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure>

<h2 id="step-8-安装wget"><a href="#step-8-安装wget" class="headerlink" title="step 8 安装wget"></a>step 8 安装wget<a href="#step-8-安装wget" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure>

<h2 id="step-9-通过wget下载hadoop安装包"><a href="#step-9-通过wget下载Hadoop安装包" class="headerlink" title="step 9 通过wget下载Hadoop安装包"></a>step 9 通过wget下载Hadoop安装包<a href="#step-9-通过wget下载hadoop安装包" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://mirrors.cnnic.cn/apache/hadoop/common/hadoop-3.2.2/hadoop-3.2.2.tar.gz</span><br><span class="line"></span><br><span class="line">#wget https://mirrors.tuna.tsinghua.edu.cn/apache/hive/hive-3.1.2/apache-hive-3.1.2-bin.tar.gz</span><br><span class="line"></span><br><span class="line">#wget https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/zookeeper-3.6.3/apache-zookeeper-3.6.3-bin.tar.gz </span><br><span class="line"></span><br><span class="line">#wget https://mirrors.tuna.tsinghua.edu.cn/apache/hbase/stable/hbase-2.3.5-bin.tar.gz </span><br><span class="line"></span><br><span class="line">#wget https://mirrors.tuna.tsinghua.edu.cn/apache/spark/spark-3.1.2/spark-3.1.2-bin-hadoop3.2.tgz</span><br><span class="line"></span><br><span class="line">#wget https://downloads.lightbend.com/scala/2.13.6/scala-2.13.6.tgz</span><br><span class="line"></span><br><span class="line">#wget http://mirrors.ustc.edu.cn/mysql-ftp/Downloads/MySQL-5.7/mysql-server_5.7.31-1ubuntu18.04_amd64.deb-bundle.tar</span><br><span class="line"></span><br><span class="line">#wget https://cdn.mysql.com/archives/mysql-connector-java-5.1/mysql-connector-java-5.1.49.tar.gz</span><br></pre></td></tr></table></figure>

<h3 id="step-10-解压hadoop"><a href="#step-10-解压hadoop" class="headerlink" title="step 10 解压hadoop"></a>step 10 解压hadoop<a href="#step-10-解压hadoop" class="header-anchor">#</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -xvzf hadoop-3.2.2.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure>



<h3 id="step-11-配置环境变量并重启配置文件"><a href="#step-11-配置环境变量并重启配置文件" class="headerlink" title="step 11 配置环境变量并重启配置文件"></a>step 11 配置环境变量并重启配置文件<a href="#step-11-配置环境变量并重启配置文件" class="header-anchor">#</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure>

<p>新增以下环境变量：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_291</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line">export HADOOP_HOME=/usr/local/hadoop</span><br><span class="line">export HADOOP_CONFIG_HOME=$HADOOP_HOME/etc/hadoop</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/bin</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/sbin</span><br></pre></td></tr></table></figure>

<p>并重启配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure>

<h3 id="step-12-创建文件夹并修改配置文件"><a href="#step-12-创建文件夹并修改配置文件" class="headerlink" title="step 12 创建文件夹并修改配置文件"></a>step 12 创建文件夹并修改配置文件<a href="#step-12-创建文件夹并修改配置文件" class="header-anchor">#</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd $HADOOP_HOME</span><br><span class="line">mkdir tmp</span><br><span class="line">mkdir namenode</span><br><span class="line">mkdir datanode</span><br></pre></td></tr></table></figure>

<p>修改配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd $HADOOP_CONFIG_HOME</span><br><span class="line">vim core-site.xml</span><br></pre></td></tr></table></figure>

<p>将下面内容替换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line">  you may not use this file except in compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to in writing, software</span><br><span class="line">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License for the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Put site-specific property overrides in this file. --&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;file:/usr/local/hadoop/tmp&lt;/value&gt;</span><br><span class="line">		&lt;description&gt;Abase for other temporary directories.&lt;/description&gt;  		&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;hdfs://hdcluster&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;ha.zookeeper.quorum&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;master:2181,slave1:2181,slave2:2181&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>

<p>修改hdfs-site.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim hdfs-site.xml</span><br></pre></td></tr></table></figure>

<p>用下面配置替换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line">  you may not use this file except in compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to in writing, software</span><br><span class="line">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License for the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Put site-specific property overrides in this file. --&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;2&lt;/value&gt;</span><br><span class="line">        &lt;final&gt;true&lt;/final&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;/usr/local/hadoop/namenode&lt;/value&gt;</span><br><span class="line">        &lt;final&gt;true&lt;/final&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.datanode.name.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;/usr/local/hadoop/datanode&lt;/value&gt;</span><br><span class="line">        &lt;final&gt;true&lt;/final&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;master:50090&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>



<p>接下来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim mapred-site.xml</span><br></pre></td></tr></table></figure>

<p>使用下面内容替换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line">  you may not use this file except in compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to in writing, software</span><br><span class="line">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License for the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Put site-specific property overrides in this file. --&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">		&lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;master:10020&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;master:19888&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>

<p>再是yarn-site.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim yarn-site.xml</span><br></pre></td></tr></table></figure>

<p>使用下面的内容替换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line">  you may not use this file except in compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to in writing, software</span><br><span class="line">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License for the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Site specific YARN configuration properties --&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;yarn.resourcemanager.webapp.address&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;master:8088&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;master&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>

<p>修改hadoop环境变量，在hadoop安装目录下，找到hadoop-env.sh文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim hadoop-env.sh</span><br></pre></td></tr></table></figure>

<p>在最后添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_291</span><br><span class="line">export HDFS_NAMENODE_USER=root</span><br><span class="line">export HDFS_DATANODE_USER=root</span><br><span class="line">export HDFS_SECONDARYNAMENODE_USER=root</span><br><span class="line">export YARN_RESOURCEMANAGER_USER=root</span><br><span class="line">export YARN_NODEMANAGER_USER=root</span><br></pre></td></tr></table></figure>

<p>编辑安装目录下的workers文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim workers</span><br></pre></td></tr></table></figure>

<p>内容改为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">master</span><br><span class="line">slave1</span><br><span class="line">slave2</span><br></pre></td></tr></table></figure>

<h3 id="刷新及hdfs初始化"><a href="#刷新及hdfs初始化" class="headerlink" title="刷新及hdfs初始化"></a>刷新及hdfs初始化<a href="#刷新及hdfs初始化" class="header-anchor">#</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">chown -R root:root /usr/local/hadoop/</span><br></pre></td></tr></table></figure>

<h2 id="安装ssh"><a href="#安装SSH" class="headerlink" title="安装SSH"></a>安装SSH<a href="#安装ssh" class="header-anchor">#</a></h2><p>hadoop的环境必须满足ssh免密登陆，先安装ssh</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install net-tools</span><br><span class="line">apt-get install ssh</span><br></pre></td></tr></table></figure>

<p>创建sshd目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p ~/var/run/sshd</span><br></pre></td></tr></table></figure>

<p>生成访问密钥</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~/</span><br><span class="line">ssh-keygen -t rsa -P &#x27;&#x27; -f ~/.ssh/id_rsa</span><br><span class="line">cd .ssh</span><br><span class="line">cat id_rsa.pub &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure>

<p>这一步骤提示安装路径与设置密码时全布直接按回车即可设置成免密。</p>
<h2 id="修改ssh配置"><a href="#修改SSH配置" class="headerlink" title="修改SSH配置"></a>修改SSH配置<a href="#修改ssh配置" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/ssh/ssh_config</span><br></pre></td></tr></table></figure>

<p>添加,将下面这句话直接添加即可，也可以在文件中找到被注释的这句话去修改。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">StrictHostKeyChecking no #将ask改为no</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>

<p>在末尾添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#禁用密码验证</span><br><span class="line">PasswordAuthentication no</span><br><span class="line">#启用密钥验证</span><br><span class="line">RSAAuthentication yes</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line">AuthorizedKeysFile .ssh/authorized_keys</span><br></pre></td></tr></table></figure>

<p>最后使用下面语句测试是否免密登陆，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh localhost</span><br></pre></td></tr></table></figure>

<p>当出现报错时，考虑输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/init.d/ssh restart</span><br></pre></td></tr></table></figure>

<p>用户组问题，chown -R  root:root .ssh</p>
<p>权限问题 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod g-w /home/your_user # 或　chmod 0755 /home/your_user</span><br><span class="line"> </span><br><span class="line">chmod 700 /home/your_user/.ssh</span><br><span class="line"> </span><br><span class="line">chmod 600 /home/your_user/.ssh/authorized_keys</span><br><span class="line">chmod 600 .ssh/ida_*</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>将hadoop文件夹利用scp传输</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scp -r /usr/local/hadoop/ slave1:/usr/local/</span><br><span class="line">scp -r /usr/local/hadoop/ slave2:/usr/local/</span><br></pre></td></tr></table></figure>



<p>在master机器上初始化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hdfs namenode -format #否则web端看不到</span><br></pre></td></tr></table></figure>

<h1 id="zookeeper安装配置"><a href="#Zookeeper安装配置" class="headerlink" title="Zookeeper安装配置"></a>Zookeeper安装配置<a href="#zookeeper安装配置" class="header-anchor">#</a></h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/zookeeper-3.6.3/apache-zookeeper-3.6.3-bin.tar.gz</span><br><span class="line">#下载完成后解压至/usr/local目录下</span><br><span class="line">tar -zxvf apache-zookeeper-3.6.1-bin.tar.gz -C /usr/local/</span><br><span class="line">cd /usr/local</span><br><span class="line"># 重命名zookeeper</span><br><span class="line">mv apache-zookeeper-3.6.1-bin zookeeper</span><br></pre></td></tr></table></figure>

<p>设置环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure>

<p>添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export ZOOKEEPER_HOME=/usr/local/zookeeper</span><br><span class="line">export PATH=$PATH:$ZOOKEEPER_HOME/bin</span><br></pre></td></tr></table></figure>

<p>分发至其他机器并执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure>

<p>配置zookeeper</p>
<p>进入conf目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local/zookeeper/conf</span><br></pre></td></tr></table></figure>

<p>将zoo_sample.cfg复制一份并命名为zoo.cfg</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure>

<p>对zoo.cfg做如下修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dataDir=/usr/local/zookeeper/data</span><br><span class="line">server.1=master:2888:3888</span><br><span class="line">server.2=slave1:2888:3888</span><br><span class="line">server.3=slave2:2888:3888</span><br></pre></td></tr></table></figure>



<p>分发至其他机器</p>
<p>创建data目录并新建一个myid 的文件，在每个机器中，文件内容对应server.后面的数字，master机器即为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /usr/local/zookeeper/data/myid</span><br><span class="line"></span><br><span class="line">插入1</span><br></pre></td></tr></table></figure>

<p>至此还只是集群搭建，但不是高可用！</p>
<h1 id="spark-安装配置"><a href="#Spark-安装配置" class="headerlink" title="Spark 安装配置"></a>Spark 安装配置<a href="#spark-安装配置" class="header-anchor">#</a></h1><h2 id="spark"><a href="#spark" class="headerlink" title="spark"></a>spark<a href="#spark" class="header-anchor">#</a></h2><p>解压spark文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -xvf spark-3.1.2-bin-hadoop3.2.tgz -C /usr/local</span><br><span class="line"># 然后重命名</span><br><span class="line">cd /usr/local</span><br><span class="line">mv spark-3.1.2-bin-hadoop3.2 spark</span><br></pre></td></tr></table></figure>

<p>环境配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure>

<p>更改配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local/spark/conf</span><br><span class="line">vi spark-env.sh</span><br></pre></td></tr></table></figure>

<p>写入以下文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_291</span><br><span class="line">export SCALA_HOME=/usr/share/scala</span><br><span class="line">export HADOOP_HOME=/usr/local/hadoop</span><br><span class="line">export HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop</span><br><span class="line">export SPARK_MASTER_HOST=master</span><br><span class="line">export SPARK_LOCAL_DIRS=/usr/local/spark</span><br></pre></td></tr></table></figure>

<p>再同一目录下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim workers</span><br></pre></td></tr></table></figure>

<p>写入以下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">master</span><br><span class="line">slave1</span><br><span class="line">slave2</span><br></pre></td></tr></table></figure>

<p>将/usr/local/spark/sbin目录下start-all.sh 重命名为start-spark-all.sh, stop-all.sh 重命名为stop-spark-all.sh</p>
<h2 id="scala-安装配置"><a href="#scala-安装配置" class="headerlink" title="scala 安装配置"></a>scala 安装配置<a href="#scala-安装配置" class="header-anchor">#</a></h2><p>只需在~/.bashrc</p>
<p>添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export SCALA_HOME=/usr/local/scala</span><br><span class="line">export PATH=$PATH:$SCALA_HOME/bin</span><br></pre></td></tr></table></figure>

<h1 id="hbase-安装配置"><a href="#Hbase-安装配置" class="headerlink" title="Hbase 安装配置"></a>Hbase 安装配置<a href="#hbase-安装配置" class="header-anchor">#</a></h1><p>解压下载文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -xvf hbase-2.3.5-bin.tar.gz -C /usr/local/</span><br><span class="line">#重命名</span><br><span class="line">cd /usr/local</span><br><span class="line"> mv hbase-2.3.5/ hbase</span><br><span class="line">export HBASE_DISABLE_HADOOP_CLASSPATH_LOOKUP=&quot;true&quot;</span><br><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_291</span><br><span class="line">export HBASE_MANAGES_ZK=false</span><br></pre></td></tr></table></figure>

<p>修改~/.bashrc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export HBASE_HOME=/usr/local/hbase</span><br><span class="line">export PATH=$PATH:$HBASE_HOME/bin</span><br></pre></td></tr></table></figure>

<p>修改配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local/hbase/conf</span><br><span class="line">vi hbase-env.sh</span><br></pre></td></tr></table></figure>

<p>添加以下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export HBASE_DISABLE_HADOOP_CLASSPATH_LOOKUP=&quot;true&quot;</span><br><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_291</span><br><span class="line">export HBASE_MANAGES_ZK=false</span><br></pre></td></tr></table></figure>

<p>修改hbase-site.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">                       &lt;name&gt;hbase.rootdir&lt;/name&gt;</span><br><span class="line">                                       &lt;value&gt;hdfs://master:9000/hbase&lt;/value&gt;</span><br><span class="line">                                       &lt;description&gt;nothing&lt;/description&gt;                              &lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;hbase.cluster.distributed&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;true&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">                &lt;name&gt;hbase.zookeeper.quorum&lt;/name&gt;</span><br><span class="line">                                &lt;value&gt;master:2181,slave1:2181,slave2:2181&lt;/value&gt;</span><br><span class="line">                                                        &lt;description&gt;nothing&lt;/description&gt;</span><br><span class="line">                                                                    &lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;hbase.tmp.dir&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;./tmp&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;hbase.unsafe.stream.capability.enforce&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;false&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>



<p>修改regionservers</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">master</span><br><span class="line">slave1</span><br><span class="line">slave2</span><br></pre></td></tr></table></figure>

<h1 id="hive安装配置"><a href="#Hive安装配置" class="headerlink" title="Hive安装配置"></a>Hive安装配置<a href="#hive安装配置" class="header-anchor">#</a></h1><h2 id="mysql安装"><a href="#mysql安装" class="headerlink" title="mysql安装"></a>mysql安装<a href="#mysql安装" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -xvf mysql-server_5.7.31-1ubuntu18.04_amd64.deb-bundle.tar</span><br><span class="line">apt-get install ./libmysql*</span><br><span class="line">apt-get install libtinfo5</span><br><span class="line">apt-get install ./mysql-community-client_5.7.31-1ubuntu18.04_amd64.deb</span><br><span class="line">apt-get install ./mysql-client_5.7.31-1ubuntu18.04_amd64.deb</span><br><span class="line">apt-get install ./mysql-community-server_5.7.31-1ubuntu18.04_amd64.deb</span><br><span class="line">###第6行步骤会有两次让输入密码</span><br><span class="line">apt-get install ./mysql-server_5.7.31-1ubuntu18.04_amd64.deb</span><br><span class="line">###安装结束后，修改权限</span><br><span class="line">cd /var/run</span><br><span class="line">chmod -R 777 mysqld</span><br><span class="line">cd /var/lib</span><br><span class="line">chmod -R 777 mysql</span><br><span class="line">service mysql start</span><br><span class="line">mysql -uroot -p #输入密码</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">use mysql;</span><br><span class="line">grant all privileges on *.* to &#x27;hive&#x27;@&#x27;%&#x27; identified BY &#x27;yourpassword&#x27; with grant option;</span><br><span class="line">flush privileges;</span><br><span class="line">exit;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">service mysql restart</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="hive-安装"><a href="#hive-安装" class="headerlink" title="hive 安装"></a>hive 安装<a href="#hive-安装" class="header-anchor">#</a></h2><p>解压</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -xzvf apache-hive-3.1.2-bin.tar.gz -C /usr/local/</span><br><span class="line">#重命名</span><br><span class="line">cd /usr/local</span><br><span class="line">mv apache-hive-3.1.2-bin hive</span><br></pre></td></tr></table></figure>

<p>修改环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br><span class="line">#添加以下内容</span><br><span class="line">export HIVE_HOME=/usr/local/hive</span><br><span class="line">export PATH=$PATH:$HIVE_HOME/bin</span><br></pre></td></tr></table></figure>

<p>创建warehouse 文件夹</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local/hive</span><br><span class="line">mkdir warehouse</span><br></pre></td></tr></table></figure>

<p>配置文件修改</p>
<p>hive-env.sh</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HADOOP_HOME=/usr/local/hadoop</span><br><span class="line">export HIVE_CONF_DIR=/usr/local/hive/conf</span><br><span class="line">export HIVE_AUX_JARS_PATH=/usr/local/hive/lib</span><br></pre></td></tr></table></figure>

<p>hive-site.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;</span><br><span class="line">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">		&lt;property&gt;</span><br><span class="line">					&lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt;</span><br><span class="line">	 &lt;value&gt;jdbc:mysql://master:3306/hive?createDatabaseIfNotExist=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;useSSL=false&lt;/value&gt;</span><br><span class="line">		 	&lt;/property&gt;</span><br><span class="line">					&lt;property&gt;</span><br><span class="line">	&lt;name&gt;javax.jdo.option.ConnectionDriverName&lt;/name&gt;</span><br><span class="line">				&lt;value&gt;com.mysql.jdbc.Driver&lt;/value&gt;</span><br><span class="line">						&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">				&lt;name&gt;javax.jdo.option.ConnectionUserName&lt;/name&gt;</span><br><span class="line">&lt;value&gt;root&lt;/value&gt;</span><br><span class="line">		&lt;/property&gt;</span><br><span class="line">				&lt;property&gt;</span><br><span class="line">&lt;name&gt;javax.jdo.option.ConnectionPassword&lt;/name&gt;</span><br><span class="line">&lt;value&gt;asdfqwer&lt;/value&gt;</span><br><span class="line">				&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">			&lt;name&gt;datanucleus.readOnlyDatastore&lt;/name&gt;</span><br><span class="line">						&lt;value&gt;false&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">			&lt;property&gt;</span><br><span class="line">						&lt;name&gt;datanucleus.fixedDatastore&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;false&lt;/value&gt;</span><br><span class="line">				&lt;/property&gt;</span><br><span class="line">						&lt;property&gt;</span><br><span class="line">		&lt;name&gt;datanucleus.autoCreateSchema&lt;/name&gt;</span><br><span class="line">					&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">		&lt;property&gt;</span><br><span class="line">					&lt;name&gt;datanucleus.schema.autoCreateAll&lt;/name&gt;</span><br><span class="line">	&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">			&lt;/property&gt;</span><br><span class="line">					&lt;property&gt;</span><br><span class="line">	&lt;name&gt;datanucleus.autoCreateTables&lt;/name&gt;</span><br><span class="line">				&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">						&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">				&lt;name&gt;datanucleus.autoCreateColumns&lt;/name&gt;</span><br><span class="line">&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">		&lt;/property&gt;</span><br><span class="line">				&lt;property&gt;</span><br><span class="line">&lt;name&gt;hive.metastore.local&lt;/name&gt;</span><br><span class="line">			&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">					&lt;/property&gt;</span><br><span class="line">&lt;!-- 显示表的列名 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">			&lt;name&gt;hive.cli.print.header&lt;/name&gt;</span><br><span class="line">						&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">			&lt;!-- 显示数据库名称 --&gt;</span><br><span class="line">			&lt;property&gt;</span><br><span class="line">						&lt;name&gt;hive.cli.print.current.db&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">				&lt;/property&gt;</span><br><span class="line">			&lt;/configuration&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>客户端hive-site.xml<a href="#refer-anchor-1"><sup>1</sup></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                  &lt;name&gt;hive.metastore.warehouse.dir&lt;/name&gt;</span><br><span class="line">                  &lt;value&gt;/usr/local/hive/warehouse&lt;/value&gt;</span><br><span class="line">                    &lt;/property&gt;</span><br><span class="line">                    &lt;property&gt;</span><br><span class="line">                              &lt;name&gt;hive.metastore.local&lt;/name&gt;</span><br><span class="line">                                        &lt;value&gt;false&lt;/value&gt;</span><br><span class="line">                                &lt;/property&gt;</span><br><span class="line">                                &lt;property&gt;</span><br><span class="line">                                          &lt;name&gt;hive.metastore.uris&lt;/name&gt;</span><br><span class="line">                                                    &lt;value&gt;thrift://master:9083&lt;/value&gt;</span><br><span class="line">                                            &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line">~           </span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#服务器端</span><br><span class="line">schematool -dbType mysql -initSchema</span><br><span class="line">hive --service metastore</span><br><span class="line">客户端</span><br><span class="line">hive</span><br><span class="line">show databases;</span><br></pre></td></tr></table></figure>



<p>第一次运行报错：</p>
<p><img src="image-20210719140401396.png" alt="image-20210719140401396"></p>
<h1 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用<a href="#高可用" class="header-anchor">#</a></h1><p>core-site.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;file:/usr/local/hadoop/tmp&lt;/value&gt;</span><br><span class="line">		&lt;description&gt;Abase for other temporary directories.&lt;/description&gt;  		&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;hdfs://hdcluster&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;ha.zookeeper.quorum&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;master:2181,slave1:2181,slave2:2181&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>





<p>hdfs-site.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line">  you may not use this file except in compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to in writing, software</span><br><span class="line">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License for the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Put site-specific property overrides in this file. --&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.nameservices&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;hdcluster&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;!-- myNameService1下面有两个NameNode，分别是nn1，nn2 --&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.ha.namenodes.hdcluster&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;nn1,nn2&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;!-- nn1的RPC通信地址 --&gt;</span><br><span class="line">	 &lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.namenode.rpc-address.hdcluster.nn1&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;master:9000&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;!-- nn1的http通信地址 --&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.namenode.http-address.hdcluster.nn1&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;master:50070&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;!-- nn2的RPC通信地址 --&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.namenode.rpc-address.hdcluster.nn2&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;slave1:9000&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;!-- nn2的http通信地址 --&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.namenode.http-address.hdcluster.nn2&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;slave1:50070&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;!-- 指定NameNode的元数据在JournalNode上的存放位置 --&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.namenode.shared.edits.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;qjournal://master:8485;slave1:8485;slave2:8485/hdcluster&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;!-- 指定JournalNode在本地磁盘存放数据的位置 --&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.journalnode.edits.dir&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;/usr/local/hadoop/journalData&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;!-- 开启NameNode失败自动切换 --&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.ha.automatic-failover.enabled&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;!-- 配置失败自动切换实现方式 --&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.client.failover.proxy.provider.hdcluster&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;!-- 配置隔离机制方法，Failover后防止停掉的Namenode启动，造成两个服务,多个机制用换行分割，即每个机制暂用一行--&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.ha.fencing.methods&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;sshfence</span><br><span class="line">				shell(/bin/true)</span><br><span class="line">		&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;!-- 使用sshfence隔离机制时需要ssh免登陆，注意换成自己的用户名 --&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.ha.fencing.ssh.private-key-files&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;/root/.ssh/id_rsa&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.ha.fencing.ssh.connect-timeout&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;30000&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.permissions&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;false&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;2&lt;/value&gt;</span><br><span class="line">		&lt;final&gt;true&lt;/final&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;/usr/local/hadoop/namenode&lt;/value&gt;</span><br><span class="line">		&lt;final&gt;true&lt;/final&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.datanode.name.dir&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;/usr/local/hadoop/datanode&lt;/value&gt;</span><br><span class="line">		&lt;final&gt;true&lt;/final&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;master:50090&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>hadoop-env.sh</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_291</span><br><span class="line">export HDFS_NAMENODE_USER=root</span><br><span class="line">export HDFS_DATANODE_USER=root</span><br><span class="line">export HDFS_SECONDARYNAMENODE_USER=root</span><br><span class="line">export YARN_RESOURCEMANAGER_USER=root</span><br><span class="line">export YARN_NODEMANAGER_USER=root</span><br><span class="line">export HDFS_JOURNALNODE_USER=root</span><br><span class="line">export HDFS_ZKFC_USER=root</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>mapred-site.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;master:10020&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;master:19888&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>yarn-site.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;yarn.resourcemanager.ha.enabled&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;yarn.resourcemanager.cluster-id&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;yrc&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;yarn.resourcemanager.ha.rm-ids&lt;/name&gt;</span><br><span class="line"> 		&lt;value&gt;rm1,rm2&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;yarn.resourcemanager.hostname.rm1&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;master&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;yarn.resourcemanager.hostname.rm2&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;slave1&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;yarn.resourcemanager.webapp.address.rm1&lt;/name&gt;</span><br><span class="line">	    &lt;value&gt;master:8088&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;yarn.resourcemanager.webapp.address.rm2&lt;/name&gt;		</span><br><span class="line">		&lt;value&gt;slave1:8088&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;																	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;yarn.resourcemanager.zk-address&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;master:2181,slave1:2181&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;yarn.application.classpath&lt;/name&gt;</span><br><span class="line">					&lt;value&gt;/usr/local/hadoop/etc/hadoop:/usr/local/hadoop/share/hadoop/common/lib/*:/usr/local/hadoop/share/hadoop/common/*:/usr/local/hadoop/share/hadoop/hdfs:/usr/local/hadoop/share/hadoop/hdfs/lib/*:/usr/local/hadoop/share/hadoop/hdfs/*:/usr/local/hadoop/share/hadoop/mapreduce/lib/*:/usr/local/hadoop/share/hadoop/mapreduce/*:/usr/local/hadoop/share/hadoop/yarn:/usr/local/hadoop/share/hadoop/yarn/lib/*:/usr/local/hadoop/share/hadoop/yarn/*&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p><strong>运行错误</strong>：</p>
<p><strong>ERROR: Cannot set priority of datanode process</strong></p>
<p><strong>解决方案</strong></p>
<p>​    <strong>chown -R root:root ##权限问题</strong></p>
<p>​    <strong>也有可能是配置文件不一致</strong></p>
<p>如果初始化过，且journaldata可能初始化过，再次初始化namenode,则需要先启动journalnode</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">错误提示：</span><br><span class="line">Unable to check if JNs are ready for formatting. </span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hadoop-daemon.sh start journalnode-&gt;hdfs --daemon start journalnode</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;2&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.nameservices&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;hdcluster&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.ha.namenodes.hdcluster&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;nn1,nn2&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.namenode.rpc-address.hdcluster.nn1&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;master:8020&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.namenode.rpc-address.hdcluster.nn2&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;slave1:8020&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.namenode.http-address.hdcluster.nn1&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;master:9870&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.namenode.http-address.hdcluster.nn2&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;slave1:9870&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.namenode.shared.edits.dir&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;qjournal://master:8485;slave1:8485;slave2:8485/hdcluster&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.client.failover.proxy.provider.hdcluster&lt;/name&gt;</span><br><span class="line">	    &lt;value&gt;org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.ha.fencing.methods&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;sshfence&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.ha.fencing.ssh.private-key-files&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;/root/.ssh/id_rsa&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.journalnode.edits.dir&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;/usr/local/hadoop/journalData&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.ha.automatic-failover.enabled.hdcluster&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;/usr/local/hadoop/namenode&lt;/value&gt;</span><br><span class="line">        &lt;final&gt;true&lt;/final&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.datanode.name.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;/usr/local/hadoop/datanode&lt;/value&gt;</span><br><span class="line">        &lt;final&gt;true&lt;/final&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>



<h1 id="reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference<a href="#reference" class="header-anchor">#</a></h1><!--
&emsp;&emsp;<font face="黑体" size=10>16. 我是黑体字</font>  <div id="refer-anchor-1"></div>- [1] [hive搭建](https://www.jianshu.com/p/fd73c53668f5)
-->

<div style="display:none">这是一段注释</div>

<ol>
<li><p> <a href="https://blog.csdn.net/weixin_43993764/article/details/113405025"> Docker配置Hadoop集群并使用WordCount测试_出大问题-CSDN博客</a></p>
</li>
<li><p> <a href="https://blog.csdn.net/weixin_43311978/article/details/106099052">Hadoop3.2.1 HA 高可用集群的搭建（基于Zookeeper，NameNode高可用+Yarn高可用）_Captain.Y.的博客-CSDN博客</a></p>
</li>
<li><p> <a href="https://blog.csdn.net/weixin_43311978/article/details/105400694?spm=1001.2014.3001.5501"> CentOS7使用Docker安装hadoop集群_Captain.Y.的博客-CSDN博客</a></p>
</li>
<li><p> <a href="https://blog.csdn.net/u013015629/article/details/70045809">Ubuntu下”sshd:unrecognized service”_子建莫敌-CSDN博客</a></p>
</li>
<li><p> <a href="https://blog.csdn.net/weixin_43487121/article/details/103589532"> Hadoop3.1.3+Zookeeper3.5.6+hbase2.2.2+hive3.1.2安装以及测试_井鱼的博客-CSDN博客</a></p>
</li>
<li><p> <a href="https://blog.csdn.net/piaoxi6587/article/details/103569376"> Hadoop3.2 +Spark3.0全分布式安装_piaoxi6587的博客-CSDN博客</a></p>
</li>
<li><p> <a href="https://blog.csdn.net/shanhai3000/article/details/104865652"> 使用Paralles Desktop，在虚拟机环境中搭建hadoop集群（2主3从5节点）_shanhai3000的博客-CSDN博客</a></p>
</li>
<li><p> <a href="https://blog.csdn.net/shanhai3000/article/details/107682499">安装并配置HBase集群（5个节点）_shanhai3000的博客-CSDN博客</a></p>
</li>
<li><p> <a href="https://www.zabbx.cn/archives/docker%E4%BD%BF%E7%94%A8dockerfile%E6%9E%84%E5%BB%BAmysql%E9%95%9C%E5%83%8F%E5%8D%81%E4%BA%94">Docker 使用Dockerfile构建MySQL镜像（十五） - 勤奋的冬枣 (zabbx.cn)</a></p>
</li>
<li><p> <a href="https://blog.csdn.net/as480133937/article/details/100138838">(22条消息) Hexo-Next 主题博客个性化配置超详细，超全面(两万字)_Z小旋-CSDN博客_hexo next主题配置</a></p>
</li>
<li><p> <a href="https://www.jianshu.com/p/30d45fa044a2">3.Spark环境搭建-Spark完全分布式集群搭建 - 简书 (jianshu.com)</a></p>
</li>
<li><p> <a href="https://www.cnblogs.com/yinzhengjie2020/p/12508145.html">Apache Hadoop HDFS高可用部署实战案例 - JasonYin2020 - 博客园 (cnblogs.com)</a></p>
</li>
<li><p> <a href="https://www.cnblogs.com/rmxd/p/11316062.html#_label4_0">HBase的完全分布式搭建 - coder、 - 博客园 (cnblogs.com)</a></p>
</li>
<li><p> <a href="https://www.cnblogs.com/yinzhengjie2020/p/12239031.html">HBase完全分布式集群搭建 - JasonYin2020 - 博客园 (cnblogs.com)</a></p>
</li>
<li><p> <a href="https://blog.csdn.net/agent_x/article/details/78660341"> hive安装及mysql配置_炼剑-CSDN博客_hive配置mysql</a></p>
</li>
<li><p> <a href="https://blog.csdn.net/GentleCP/article/details/87936263"> Mysql 8.0.13 开启远程访问权限（ERROR 1064 (42000): You have an error in your SQL syntax; check the manual th）_GentleCP的博客-CSDN博客</a></p>
</li>
<li><p> <a href="https://www.cnblogs.com/tijun/p/7562282.html">运行Spark-shell，解决Unable to load native-hadoop library for your platform - 提君 - 博客园 (cnblogs.com)</a></p>
</li>
<li><p> <a href="https://zhuanlan.zhihu.com/p/89472385">ubuntu下hadoop、spark、hive、azkaban 集群搭建 - 知乎 (zhihu.com)</a></p>
</li>
<li><p> <a href="https://www.cnblogs.com/xuwujing/p/">我的随笔 - 虚无境 - 博客园 (cnblogs.com)-大数据学习系列 </a></p>
</li>
<li><p> <a href="https://cloud.tencent.com/developer/article/1624245">Spark on Hive &amp; Hive on Spark，傻傻分不清楚 - 云+社区 - 腾讯云 (tencent.com)</a></p>
</li>
<li><p> <a href="https://blog.csdn.net/Dante_003/article/details/72867493">hive on spark安装(hive2.3 spark2.1)_敲码的汉子-CSDN博客_hive on spark 安装</a></p>
</li>
<li><p> <a href="https://www.cnblogs.com/zlslch/category/965666.html">Hadoop Hive集群搭建（含CentOS和Ubuntu） - 随笔分类 - 大数据和AI躺过的坑 - 博客园 (cnblogs.com)</a></p>
</li>
<li><p><a href="https://blog.csdn.net/u011809553/article/details/80937624">(22条消息) ssh公钥都追加到authorized_keys文件了，但是还是无法免秘钥登陆_孑然一身踽踽而行-CSDN博客</a></p>
</li>
<li><p><a href="https://www.jianshu.com/p/fd73c53668f5">Hive学习笔记一：远程服务器模式搭建 - 简书 (jianshu.com)</a></p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>record_everyday</title>
    <url>/article/record_everyday/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="e3957772335c5f3d242f1f19f7b0e1dcd64f8a198d659d117c9df066b39468f7"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>加密</tag>
      </tags>
  </entry>
</search>
