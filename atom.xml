<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zongxing</title>
  
  <subtitle>你若安好，便是晴天！</subtitle>
  <link href="https://hu1104.github.io/atom.xml" rel="self"/>
  
  <link href="https://hu1104.github.io/"/>
  <updated>2021-09-03T01:40:40.178Z</updated>
  <id>https://hu1104.github.io/</id>
  
  <author>
    <name>hzx</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LN_BN</title>
    <link href="https://hu1104.github.io/article/LN-BN/"/>
    <id>https://hu1104.github.io/article/LN-BN/</id>
    <published>2021-09-03T01:40:40.000Z</published>
    <updated>2021-09-03T01:40:40.178Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>all_CN</title>
    <link href="https://hu1104.github.io/article/all-CN/"/>
    <id>https://hu1104.github.io/article/all-CN/</id>
    <published>2021-09-03T01:40:26.000Z</published>
    <updated>2021-09-03T01:40:26.526Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>deeplearning</title>
    <link href="https://hu1104.github.io/article/deeplearning/"/>
    <id>https://hu1104.github.io/article/deeplearning/</id>
    <published>2021-08-31T05:55:09.000Z</published>
    <updated>2021-08-31T08:43:15.261Z</updated>
    
    
    <summary type="html">Welcome to my blog, enter password to read.</summary>
    
    
    
    
    <category term="加密" scheme="https://hu1104.github.io/tags/%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>mmdetection</title>
    <link href="https://hu1104.github.io/article/mmdetection/"/>
    <id>https://hu1104.github.io/article/mmdetection/</id>
    <published>2021-08-30T07:33:17.000Z</published>
    <updated>2021-08-30T07:59:05.195Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;a href=&quot;#参考资料&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>yolox训练自定义数据集</title>
    <link href="https://hu1104.github.io/article/yolox%E8%AE%AD%E7%BB%83%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E9%9B%86/"/>
    <id>https://hu1104.github.io/article/yolox%E8%AE%AD%E7%BB%83%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E9%9B%86/</id>
    <published>2021-08-30T06:13:04.000Z</published>
    <updated>2021-08-30T07:19:45.545Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;环境配置&quot;&gt;&lt;a href=&quot;#环境配置&quot; class=&quot;headerlink&quot; title=&quot;环境配置&quot;&gt;&lt;/a&gt;环境配置&lt;a href=&quot;#环境配置&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>python_base</title>
    <link href="https://hu1104.github.io/article/python-base/"/>
    <id>https://hu1104.github.io/article/python-base/</id>
    <published>2021-08-30T02:18:47.000Z</published>
    <updated>2021-08-30T07:20:16.023Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;initpy&quot;&gt;&lt;a href=&quot;#init-py&quot; class=&quot;headerlink&quot; title=&quot;init.py&quot;&gt;&lt;/a&gt;&lt;strong&gt;init&lt;/strong&gt;.py&lt;a href=&quot;#initpy&quot;</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>logging</title>
    <link href="https://hu1104.github.io/article/logging/"/>
    <id>https://hu1104.github.io/article/logging/</id>
    <published>2021-08-27T05:33:03.000Z</published>
    <updated>2021-08-30T07:19:53.691Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;按天生成日志&quot;&gt;&lt;a href=&quot;#按天生成日志&quot; class=&quot;headerlink&quot; title=&quot;按天生成日志&quot;&gt;&lt;/a&gt;按天生成日志&lt;a href=&quot;#按天生成日志&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;&lt;figure</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>distributed_torch</title>
    <link href="https://hu1104.github.io/article/distributed-torch/"/>
    <id>https://hu1104.github.io/article/distributed-torch/</id>
    <published>2021-08-26T08:11:12.000Z</published>
    <updated>2021-08-30T07:20:06.981Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;多gpu分配&quot;&gt;&lt;a href=&quot;#多GPU分配&quot; class=&quot;headerlink&quot; title=&quot;多GPU分配&quot;&gt;&lt;/a&gt;多GPU分配&lt;a href=&quot;#多gpu分配&quot;</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>tqdm使用</title>
    <link href="https://hu1104.github.io/article/tqdm%E4%BD%BF%E7%94%A8/"/>
    <id>https://hu1104.github.io/article/tqdm%E4%BD%BF%E7%94%A8/</id>
    <published>2021-08-25T08:22:26.000Z</published>
    <updated>2021-08-30T02:05:10.037Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;基本使用&quot;&gt;&lt;a href=&quot;#基本使用&quot; class=&quot;headerlink&quot; title=&quot;基本使用&quot;&gt;&lt;/a&gt;基本使用&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;迭代的形式&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;tqdm()&lt;/code&gt;封装可迭代的对象：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;from tqdm import tqdm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;from time import sleep&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;text = &amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;for char in tqdm([&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;d&amp;quot;]):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sleep(0.25)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    text = text + char&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>coroutine</title>
    <link href="https://hu1104.github.io/article/coroutine/"/>
    <id>https://hu1104.github.io/article/coroutine/</id>
    <published>2021-08-24T08:49:44.000Z</published>
    <updated>2021-09-03T01:36:33.836Z</updated>
    
    
    <summary type="html">&lt;h3 id=&quot;asyncio-yield-from&quot;&gt;&lt;a href=&quot;#asyncio-yield-from&quot; class=&quot;headerlink&quot; title=&quot;asyncio + yield from&quot;&gt;&lt;/a&gt;asyncio + yield from&lt;/h3&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#-*- coding:utf8 -*-&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import asyncio&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@asyncio.coroutine&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def test(i):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&amp;#x27;test_1&amp;#x27;, i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    r = yield from asyncio.sleep(1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&amp;#x27;test_2&amp;#x27;, i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if __name__ == &amp;#x27;__main__&amp;#x27;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    loop = asyncio.get_event_loop()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tasks = [test(i) for i in range(3)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    loop.run_until_complete(asyncio.wait(tasks))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    loop.close()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;@asyncio.coroutine&lt;/code&gt;把一个generator标记为coroutine类型，然后就把这个coroutine扔到EventLoop中执行。test()会首先打印出test_1，然后&lt;code&gt;yield from&lt;/code&gt;语法可以让我们方便地调用另一个generator。由于&lt;code&gt;asyncio.sleep()&lt;/code&gt;也是一个coroutine，所以线程不会等待&lt;code&gt;asyncio.sleep()&lt;/code&gt;，而是直接中断并执行下一个消息循环。当&lt;code&gt;asyncio.sleep()&lt;/code&gt;返回时，线程就可以从&lt;code&gt;yield from&lt;/code&gt;拿到返回值（此处是None），然后接着执行下一行语句。把&lt;code&gt;asyncio.sleep(1)&lt;/code&gt;看成是一个耗时1秒的IO操作，在此期间主线程并未等待，而是去执行EventLoop中其他可以执行的coroutine了，因此可以实现并发执行。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>python_进阶</title>
    <link href="https://hu1104.github.io/article/python-%E8%BF%9B%E9%98%B6/"/>
    <id>https://hu1104.github.io/article/python-%E8%BF%9B%E9%98%B6/</id>
    <published>2021-08-24T05:44:57.000Z</published>
    <updated>2021-08-30T02:05:07.280Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;偏函数&quot;&gt;&lt;a href=&quot;#偏函数&quot; class=&quot;headerlink&quot; title=&quot;偏函数&quot;&gt;&lt;/a&gt;偏函数&lt;/h1&gt;&lt;p&gt;定义：偏函数的第二个部分(可变参数)，按原有函数的参数顺序进行补充，参数将作用在原函数上，最后偏函数返回一个新函数（类似于，装饰器decorator，对于函数进行二次包装，产生特殊效果；但又不同于装饰器，偏函数产生了一个新函数，而装饰器，可改变被装饰函数的函数入口地址也可以不影响原函数）&lt;/p&gt;
&lt;p&gt;例一：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;from functools import partial&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def mod( n, m ):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return n % m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mod_by_100 = partial( mod, 100 )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print mod( 100, 7 )  # 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print mod_by_100( 7 )  # 2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;例二：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;from functools import partial&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bin2dec = partial( int, base=2 )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print bin2dec( &amp;#x27;0b10001&amp;#x27; )  # 17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print bin2dec( &amp;#x27;10001&amp;#x27; )  # 17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hex2dec = partial( int, base=16 )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print hex2dec( &amp;#x27;0x67&amp;#x27; )  # 103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print hex2dec( &amp;#x27;67&amp;#x27; )  # 103&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>threading</title>
    <link href="https://hu1104.github.io/article/threading/"/>
    <id>https://hu1104.github.io/article/threading/</id>
    <published>2021-08-20T07:37:55.000Z</published>
    <updated>2021-08-30T02:05:09.031Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;python-多线程实现&quot;&gt;&lt;a href=&quot;#python-多线程实现&quot; class=&quot;headerlink&quot; title=&quot;python 多线程实现&quot;&gt;&lt;/a&gt;python 多线程实现&lt;/h1&gt;&lt;p&gt;首先，python的多线程是假的。&lt;/p&gt;
&lt;p&gt;看一个例子来看看python多线程的实现。&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import threading&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import time&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def say(name):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&amp;#x27;你好%s at %s&amp;#x27; %(name,time.ctime()))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        time.sleep(2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&amp;quot;结束%s at %s&amp;quot; %(name,time.ctime()))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def listen(name):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&amp;#x27;你好%s at %s&amp;#x27; % (name,time.ctime()))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    time.sleep(4)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&amp;quot;结束%s at %s&amp;quot; % (name,time.ctime()))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if __name__ == &amp;#x27;__main__&amp;#x27;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t1 = threading.Thread(target=say,args=(&amp;#x27;tony&amp;#x27;,))  #创建线程对象，Thread是一个类，实例化产生t1对象，这里就是创建了一个线程对象t1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t1.start() #启动线程，线程执行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t2 = threading.Thread(target=listen, args=(&amp;#x27;simon&amp;#x27;,)) #这里就是创建了一个线程对象t2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t2.start()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&amp;quot;程序结束=====================&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 输出结果为&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;你好tony at Fri Aug 20 15:42:07 2021 --t1线程执行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;你好simon at Fri Aug 20 15:42:07 2021 --t2线程执行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;程序结束===================== --主线程执行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;结束tony at Fri Aug 20 15:42:09 2021 --sleep之后，t1线程执行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;结束simon at Fri Aug 20 15:42:11 2021 --sleep之后，t2线程执行&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;我们可以看到主线程的print并不是等t1,t2线程都执行完毕之后才打印的，这是因为主线程和t1,t2 线程是同时跑的。但是主进程要等非守护子线程结束之后，主线程才会退出。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>multiprocessing</title>
    <link href="https://hu1104.github.io/article/multiprocessing/"/>
    <id>https://hu1104.github.io/article/multiprocessing/</id>
    <published>2021-08-20T06:50:29.000Z</published>
    <updated>2021-08-30T07:16:49.200Z</updated>
    
    
    <summary type="html">&lt;p&gt;由于python的GIL锁的存在，导致在多线程的时候，同一时间只能有一个线程在cpu上运行，而且是单个cpu上运行，不管cpu有多少核数。如果要充分利用多核cpu的资源，在python中大部分情况下需要使用多进程。&lt;/p&gt;
&lt;h1 id=&quot;python多进程模块&quot;&gt;&lt;a href=&quot;#python多进程模块&quot; class=&quot;headerlink&quot; title=&quot;python多进程模块&quot;&gt;&lt;/a&gt;python多进程模块&lt;/h1&gt;&lt;p&gt;Python中的多进程是通过multiprocessing包来实现的，和多线程的threading.Thread差不多，它可以利用multiprocessing.Process对象来创建一个进程对象。这个进程对象的方法和线程对象的方法差不多也有start(), run(), join()等方法，其中有一个方法不同Thread线程对象中的守护线程方法是setDeamon，而Process进程对象的守护进程是通过设置daemon属性来完成的。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>generator_and_iterator</title>
    <link href="https://hu1104.github.io/article/generator-and-iterator/"/>
    <id>https://hu1104.github.io/article/generator-and-iterator/</id>
    <published>2021-08-20T03:14:02.000Z</published>
    <updated>2021-08-20T07:37:16.640Z</updated>
    
    
    <summary type="html">&lt;!--toc--&gt;

&lt;h1 id=&quot;列表表达式&quot;&gt;&lt;a href=&quot;#列表表达式&quot; class=&quot;headerlink&quot; title=&quot;列表表达式&quot;&gt;&lt;/a&gt;列表表达式&lt;/h1&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;info = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a = [i+1 for i in range(10)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(a)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;p&gt;多重循环&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;a = [(i,j) for i in range(4) for j in range(2)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(a)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;p&gt;多重循环+判断语句&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ls = [(&amp;#x27;x&amp;#x27;,[&amp;#x27;open1&amp;#x27;,&amp;#x27;open1&amp;#x27;,&amp;#x27;open1&amp;#x27;]),(&amp;#x27;y&amp;#x27;,[&amp;#x27;open1&amp;#x27;,&amp;#x27;open1&amp;#x27;,&amp;#x27;open0&amp;#x27;]),(&amp;#x27;z&amp;#x27;,[&amp;#x27;open0&amp;#x27;,&amp;#x27;open0&amp;#x27;,&amp;#x27;open1&amp;#x27;])]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def find(con):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return [j for i in con for j in i if j.isdigit()]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[w for w,con in ls if find(con)==[&amp;#x27;1&amp;#x27;,&amp;#x27;1&amp;#x27;,&amp;#x27;1&amp;#x27;]]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>decorator</title>
    <link href="https://hu1104.github.io/article/decorator/"/>
    <id>https://hu1104.github.io/article/decorator/</id>
    <published>2021-08-20T01:05:48.000Z</published>
    <updated>2021-08-24T05:45:26.089Z</updated>
    
    
    <summary type="html">&lt;div class=&quot;tocStart&quot;&gt;&lt;/div&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E4%BB%80%E4%B9%88%E6%98%AF%E8%A3%85%E9%A5%B0%E5%99%A8&quot;&gt;什么是装饰器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E7%AE%80%E5%8D%95%E8%A3%85%E9%A5%B0%E5%99%A8&quot;&gt;简单装饰器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E9%AB%98%E7%BA%A7%E8%A3%85%E9%A5%B0%E5%99%A8&quot;&gt;高级装饰器&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%9F%BA%E4%BA%8E%E5%87%BD%E6%95%B0%E7%9A%84%E5%B8%A6%E5%8F%82%E8%A3%85%E9%A5%B0%E5%99%A8&quot;&gt;基于函数的带参装饰器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%9F%BA%E4%BA%8E%E7%B1%BB%E7%9A%84%E4%B8%8D%E5%B8%A6%E5%8F%82%E8%A3%85%E9%A5%B0%E5%99%A8&quot;&gt;基于类的不带参装饰器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%9F%BA%E4%BA%8E%E7%B1%BB%E7%9A%84%E5%B8%A6%E5%8F%82%E6%95%B0%E8%A3%85%E9%A5%B0%E5%99%A8&quot;&gt;基于类的带参数装饰器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%86%85%E7%BD%AE%E8%A3%85%E9%A5%B0%E5%99%A8&quot;&gt;内置装饰器&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#classmethod&quot;&gt;@classmethod&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#staticmethod&quot;&gt;@staticmethod&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#property&quot;&gt;@property&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#wraps&quot;&gt;@wraps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#python%E5%86%85%E7%BD%AE%E7%B1%BB%E5%B1%9E%E6%80%A7&quot;&gt;python内置类属性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99&quot;&gt;参考资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;

&lt;div class=&quot;tocEnd&quot;&gt;&lt;/div&gt;





&lt;h1 id=&quot;什么是装饰器&quot;&gt;&lt;a href=&quot;#什么是装饰器&quot; class=&quot;headerlink&quot; title=&quot;什么是装饰器&quot;&gt;&lt;/a&gt;什么是装饰器&lt;/h1&gt;&lt;p&gt;一个decorator只是一个带有一个函数作为参数并返回一个替换函数的闭包。&lt;br&gt;简单示例：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 未使用装饰器时&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def outer(some_func):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	def inner():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		print (&amp;quot;before some_func&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ret = some_func() # 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return ret + 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return inner&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def foo():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;decorated = outer(foo)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;decorated()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#使用装饰器时&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def outer(some_func):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	def inner():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		print (&amp;quot;before some_func&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ret = some_func() # 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return ret + 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return inner&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@outer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def foo():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>todo_list</title>
    <link href="https://hu1104.github.io/article/todo-list/"/>
    <id>https://hu1104.github.io/article/todo-list/</id>
    <published>2021-08-12T02:08:45.000Z</published>
    <updated>2021-08-12T02:08:45.878Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>train_record</title>
    <link href="https://hu1104.github.io/article/train-record/"/>
    <id>https://hu1104.github.io/article/train-record/</id>
    <published>2021-07-27T03:04:44.000Z</published>
    <updated>2021-08-31T08:43:12.382Z</updated>
    
    
    <summary type="html">Welcome to my blog, enter password to read.</summary>
    
    
    
    
    <category term="加密" scheme="https://hu1104.github.io/tags/%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>hadoop_spark_hbase_hive</title>
    <link href="https://hu1104.github.io/article/hadoop-spark-hbase-hive/"/>
    <id>https://hu1104.github.io/article/hadoop-spark-hbase-hive/</id>
    <published>2021-07-14T03:25:56.000Z</published>
    <updated>2021-07-22T04:17:58.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;hdfs-site.xml&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>result_record</title>
    <link href="https://hu1104.github.io/article/result-record/"/>
    <id>https://hu1104.github.io/article/result-record/</id>
    <published>2021-07-12T09:05:19.000Z</published>
    <updated>2021-08-06T07:22:36.102Z</updated>
    
    
    <summary type="html">test结果记录</summary>
    
    
    
    
    <category term="加密" scheme="https://hu1104.github.io/tags/%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>record_everyday</title>
    <link href="https://hu1104.github.io/article/record_everyday/"/>
    <id>https://hu1104.github.io/article/record_everyday/</id>
    <published>2021-07-12T07:50:15.000Z</published>
    <updated>2021-09-03T10:00:20.821Z</updated>
    
    
    <summary type="html">Welcome to my blog, enter password to read.</summary>
    
    
    
    
    <category term="加密" scheme="https://hu1104.github.io/tags/%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
</feed>
