<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zongxing</title>
  
  <subtitle>你若安好，便是晴天！</subtitle>
  <link href="https://hu1104.github.io/atom.xml" rel="self"/>
  
  <link href="https://hu1104.github.io/"/>
  <updated>2021-10-21T08:07:44.522Z</updated>
  <id>https://hu1104.github.io/</id>
  
  <author>
    <name>hzx</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>FM</title>
    <link href="https://hu1104.github.io/article/FM/"/>
    <id>https://hu1104.github.io/article/FM/</id>
    <published>2021-10-21T07:32:07.000Z</published>
    <updated>2021-10-21T08:07:44.522Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h3 id=&quot;1-fm模型的引入&quot;&gt;&lt;a href=&quot;#1-FM模型的引入&quot; class=&quot;headerlink&quot; title=&quot;1. FM模型的引入&quot;&gt;&lt;/a&gt;1. FM模型的引入&lt;a href=&quot;#1-fm模型的引入&quot;</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MF</title>
    <link href="https://hu1104.github.io/article/MF/"/>
    <id>https://hu1104.github.io/article/MF/</id>
    <published>2021-10-21T03:07:19.000Z</published>
    <updated>2021-10-21T07:33:00.312Z</updated>
    
    
    <summary type="html">&lt;h3 id=&quot;1-隐语义模型与矩阵分解&quot;&gt;&lt;a href=&quot;#1-隐语义模型与矩阵分解&quot; class=&quot;headerlink&quot; title=&quot;1. 隐语义模型与矩阵分解&quot;&gt;&lt;/a&gt;1. 隐语义模型与矩阵分解&lt;/h3&gt;&lt;p&gt;协同过滤算法的特点就是完全没有利用到物品本身或者是用户自身的属性， 仅仅利用了用户与物品的交互信息就可以实现推荐，是一个可解释性很强， 非常直观的模型， 但是也存在一些问题， 第一个就是处理稀疏矩阵的能力比较弱， 所以为了使得协同过滤更好处理稀疏矩阵问题， 增强泛化能力， 从协同过滤中衍生出矩阵分解模型(Matrix Factorization,MF)或者叫隐语义模型, 两者差不多说的一个意思， 就是在协同过滤共现矩阵的基础上， 使用更稠密的隐向量表示用户和物品， 挖掘用户和物品的隐含兴趣和隐含特征， 在一定程度上弥补协同过滤模型处理稀疏矩阵能力不足的问题。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>CF</title>
    <link href="https://hu1104.github.io/article/CF/"/>
    <id>https://hu1104.github.io/article/CF/</id>
    <published>2021-10-20T02:36:47.000Z</published>
    <updated>2021-10-21T03:07:46.928Z</updated>
    
    
    <summary type="html">&lt;h3 id=&quot;1-协调过滤算法&quot;&gt;&lt;a href=&quot;#1-协调过滤算法&quot; class=&quot;headerlink&quot; title=&quot;1. 协调过滤算法&quot;&gt;&lt;/a&gt;1. 协调过滤算法&lt;/h3&gt;&lt;p&gt;所谓协同过滤， 基本思想是根据用户之前的喜好以及其他兴趣相近的用户的选择来给用户推荐物品(基于对用户历史行为数据的挖掘发现用户的喜好偏向， 并预测用户可能喜好的产品进行推荐)，一般是仅仅基于用户的行为数据（评价、购买、下载等）, 而不依赖于项的任何附加信息（物品自身特征）或者用户的任何附加信息（年龄， 性别等）。&lt;br&gt;&lt;br&gt;&lt;br&gt;目前应用比较广泛的协同过滤算法是基于邻域的方法， 而这种方法主要有下面两种算法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于用户的协同过滤算法(UserCF): 给用户推荐和他兴趣相似的其他用户喜欢的产品&lt;/li&gt;
&lt;li&gt;基于物品的协同过滤算法(ItemCF): 给用户推荐和他之前喜欢的物品相似的物品&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不管是UserCF还是ItemCF算法， 非常重要的步骤之一就是计算用户和用户或者物品和物品之间的相似度， 所以下面先整理常用的相似性度量方法， 然后再对每个算法的具体细节进行展开。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>RS</title>
    <link href="https://hu1104.github.io/article/RS/"/>
    <id>https://hu1104.github.io/article/RS/</id>
    <published>2021-10-18T05:37:56.000Z</published>
    <updated>2021-10-20T02:42:18.623Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;%E5%8F%91%E5%B1%95%E5%9B%BE1.png&quot; alt=&quot;rs发展历程1&quot;&gt;&lt;br&gt;&lt;img src=&quot;%E5%8F%91%E5%B1%95%E5%9B%BE2.png&quot; alt=&quot;rs发展历程2&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>git_learn</title>
    <link href="https://hu1104.github.io/article/git_learn/"/>
    <id>https://hu1104.github.io/article/git_learn/</id>
    <published>2021-09-09T08:41:08.000Z</published>
    <updated>2021-10-19T03:13:07.578Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;img src=&quot;image-20210909164119386.png&quot; alt=&quot;image-20210909164119386&quot; title=&quot;dsfsdf&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;image-20210909165936257.png&quot;</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>anchor_free_or_anchor_based</title>
    <link href="https://hu1104.github.io/article/anchor-free-or-anchor-based/"/>
    <id>https://hu1104.github.io/article/anchor-free-or-anchor-based/</id>
    <published>2021-09-07T07:52:54.000Z</published>
    <updated>2021-09-07T07:52:54.784Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>algorithm</title>
    <link href="https://hu1104.github.io/article/algorithm/"/>
    <id>https://hu1104.github.io/article/algorithm/</id>
    <published>2021-09-07T01:42:30.000Z</published>
    <updated>2021-09-07T01:42:30.249Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>上采样方法</title>
    <link href="https://hu1104.github.io/article/%E4%B8%8A%E9%87%87%E6%A0%B7%E6%96%B9%E6%B3%95/"/>
    <id>https://hu1104.github.io/article/%E4%B8%8A%E9%87%87%E6%A0%B7%E6%96%B9%E6%B3%95/</id>
    <published>2021-09-06T07:48:43.000Z</published>
    <updated>2021-10-19T02:54:08.395Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;pixelshuffle&quot;&gt;&lt;a href=&quot;#pixelshuffle&quot; class=&quot;headerlink&quot; title=&quot;pixelshuffle&quot;&gt;&lt;/a&gt;pixelshuffle&lt;a href=&quot;#pixelshuffle&quot;</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>LN_BN</title>
    <link href="https://hu1104.github.io/article/LN-BN/"/>
    <id>https://hu1104.github.io/article/LN-BN/</id>
    <published>2021-09-03T01:40:40.000Z</published>
    <updated>2021-10-19T02:54:59.423Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;LN：Layer Normalization，LN是“横”着来的，对一个样本，不同的神经元neuron间做归一化。&lt;/p&gt;
&lt;p&gt;BN：Batch Normalization，BN是“竖”着来的，各个维度做归一化，所以与batch size有关系。&lt;/p&gt;
&lt;p&gt;&lt;img</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>all_CN</title>
    <link href="https://hu1104.github.io/article/all-CN/"/>
    <id>https://hu1104.github.io/article/all-CN/</id>
    <published>2021-09-03T01:40:26.000Z</published>
    <updated>2021-10-19T02:56:11.000Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;深度可分离卷积&quot;&gt;&lt;a href=&quot;#深度可分离卷积&quot; class=&quot;headerlink&quot; title=&quot;深度可分离卷积&quot;&gt;&lt;/a&gt;深度可分离卷积&lt;/h1&gt;&lt;p&gt;假设输入是$D_{f^i} * D_{f^i} * M$ ,输出图大小是$D_{f^o}*D_{f^o}&lt;em&gt;N$, 卷积核大小是$D_k&lt;/em&gt;D_k$&lt;/p&gt;
&lt;h2 id=&quot;普通卷积操作&quot;&gt;&lt;a href=&quot;#普通卷积操作&quot; class=&quot;headerlink&quot; title=&quot;普通卷积操作&quot;&gt;&lt;/a&gt;普通卷积操作&lt;/h2&gt;&lt;p&gt;输入图在经过卷积核（$D_k&lt;em&gt;D_k&lt;/em&gt;M$）后输出为目标输出大小，但此时仅为$D_{f^o}*D_{f^o} * 1$ ,需要$N$个这样的操作才能得到目标特征图。&lt;/p&gt;
&lt;p&gt;此时所需要的计算量有$D_{f^o}&lt;em&gt;D_{f^o}&lt;em&gt;D_k&lt;/em&gt;D_k&lt;/em&gt;M*N$。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>deeplearning</title>
    <link href="https://hu1104.github.io/article/deeplearning/"/>
    <id>https://hu1104.github.io/article/deeplearning/</id>
    <published>2021-08-31T05:55:09.000Z</published>
    <updated>2021-08-31T08:43:15.261Z</updated>
    
    
    <summary type="html">Welcome to my blog, enter password to read.</summary>
    
    
    
    
    <category term="加密" scheme="https://hu1104.github.io/tags/%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>mmdetection</title>
    <link href="https://hu1104.github.io/article/mmdetection/"/>
    <id>https://hu1104.github.io/article/mmdetection/</id>
    <published>2021-08-30T07:33:17.000Z</published>
    <updated>2021-08-30T07:59:05.195Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;a href=&quot;#参考资料&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>yolox训练自定义数据集</title>
    <link href="https://hu1104.github.io/article/yolox%E8%AE%AD%E7%BB%83%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E9%9B%86/"/>
    <id>https://hu1104.github.io/article/yolox%E8%AE%AD%E7%BB%83%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E9%9B%86/</id>
    <published>2021-08-30T06:13:04.000Z</published>
    <updated>2021-10-19T02:57:16.478Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;环境配置&quot;&gt;&lt;a href=&quot;#环境配置&quot; class=&quot;headerlink&quot; title=&quot;环境配置&quot;&gt;&lt;/a&gt;环境配置&lt;/h1&gt;&lt;p&gt; 第一步：安装YOLOX&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git clone git@github.com:Megvii-BaseDetection/YOLOX.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd YOLOX&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pip3 install -U pip &amp;amp;&amp;amp; pip3 install -r requirements.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pip3 install -v -e .  # or  python3 setup.py develop&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>python_base</title>
    <link href="https://hu1104.github.io/article/python-base/"/>
    <id>https://hu1104.github.io/article/python-base/</id>
    <published>2021-08-30T02:18:47.000Z</published>
    <updated>2021-08-30T07:20:16.023Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;initpy&quot;&gt;&lt;a href=&quot;#init-py&quot; class=&quot;headerlink&quot; title=&quot;init.py&quot;&gt;&lt;/a&gt;&lt;strong&gt;init&lt;/strong&gt;.py&lt;a href=&quot;#initpy&quot;</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>logging</title>
    <link href="https://hu1104.github.io/article/logging/"/>
    <id>https://hu1104.github.io/article/logging/</id>
    <published>2021-08-27T05:33:03.000Z</published>
    <updated>2021-08-30T07:19:53.691Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;按天生成日志&quot;&gt;&lt;a href=&quot;#按天生成日志&quot; class=&quot;headerlink&quot; title=&quot;按天生成日志&quot;&gt;&lt;/a&gt;按天生成日志&lt;a href=&quot;#按天生成日志&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;&lt;figure</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>distributed_torch</title>
    <link href="https://hu1104.github.io/article/distributed-torch/"/>
    <id>https://hu1104.github.io/article/distributed-torch/</id>
    <published>2021-08-26T08:11:12.000Z</published>
    <updated>2021-08-30T07:20:06.981Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;多gpu分配&quot;&gt;&lt;a href=&quot;#多GPU分配&quot; class=&quot;headerlink&quot; title=&quot;多GPU分配&quot;&gt;&lt;/a&gt;多GPU分配&lt;a href=&quot;#多gpu分配&quot;</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>tqdm使用</title>
    <link href="https://hu1104.github.io/article/tqdm%E4%BD%BF%E7%94%A8/"/>
    <id>https://hu1104.github.io/article/tqdm%E4%BD%BF%E7%94%A8/</id>
    <published>2021-08-25T08:22:26.000Z</published>
    <updated>2021-08-30T02:05:10.037Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;基本使用&quot;&gt;&lt;a href=&quot;#基本使用&quot; class=&quot;headerlink&quot; title=&quot;基本使用&quot;&gt;&lt;/a&gt;基本使用&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;迭代的形式&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;tqdm()&lt;/code&gt;封装可迭代的对象：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;from tqdm import tqdm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;from time import sleep&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;text = &amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;for char in tqdm([&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;d&amp;quot;]):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sleep(0.25)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    text = text + char&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>coroutine</title>
    <link href="https://hu1104.github.io/article/coroutine/"/>
    <id>https://hu1104.github.io/article/coroutine/</id>
    <published>2021-08-24T08:49:44.000Z</published>
    <updated>2021-09-03T01:36:33.836Z</updated>
    
    
    <summary type="html">&lt;h3 id=&quot;asyncio-yield-from&quot;&gt;&lt;a href=&quot;#asyncio-yield-from&quot; class=&quot;headerlink&quot; title=&quot;asyncio + yield from&quot;&gt;&lt;/a&gt;asyncio + yield from&lt;/h3&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#-*- coding:utf8 -*-&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import asyncio&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@asyncio.coroutine&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def test(i):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&amp;#x27;test_1&amp;#x27;, i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    r = yield from asyncio.sleep(1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&amp;#x27;test_2&amp;#x27;, i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if __name__ == &amp;#x27;__main__&amp;#x27;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    loop = asyncio.get_event_loop()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tasks = [test(i) for i in range(3)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    loop.run_until_complete(asyncio.wait(tasks))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    loop.close()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;@asyncio.coroutine&lt;/code&gt;把一个generator标记为coroutine类型，然后就把这个coroutine扔到EventLoop中执行。test()会首先打印出test_1，然后&lt;code&gt;yield from&lt;/code&gt;语法可以让我们方便地调用另一个generator。由于&lt;code&gt;asyncio.sleep()&lt;/code&gt;也是一个coroutine，所以线程不会等待&lt;code&gt;asyncio.sleep()&lt;/code&gt;，而是直接中断并执行下一个消息循环。当&lt;code&gt;asyncio.sleep()&lt;/code&gt;返回时，线程就可以从&lt;code&gt;yield from&lt;/code&gt;拿到返回值（此处是None），然后接着执行下一行语句。把&lt;code&gt;asyncio.sleep(1)&lt;/code&gt;看成是一个耗时1秒的IO操作，在此期间主线程并未等待，而是去执行EventLoop中其他可以执行的coroutine了，因此可以实现并发执行。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>python_进阶</title>
    <link href="https://hu1104.github.io/article/python-%E8%BF%9B%E9%98%B6/"/>
    <id>https://hu1104.github.io/article/python-%E8%BF%9B%E9%98%B6/</id>
    <published>2021-08-24T05:44:57.000Z</published>
    <updated>2021-09-09T01:19:51.397Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;偏函数&quot;&gt;&lt;a href=&quot;#偏函数&quot; class=&quot;headerlink&quot; title=&quot;偏函数&quot;&gt;&lt;/a&gt;偏函数&lt;/h1&gt;&lt;p&gt;定义：偏函数的第二个部分(可变参数)，按原有函数的参数顺序进行补充，参数将作用在原函数上，最后偏函数返回一个新函数（类似于，装饰器decorator，对于函数进行二次包装，产生特殊效果；但又不同于装饰器，偏函数产生了一个新函数，而装饰器，可改变被装饰函数的函数入口地址也可以不影响原函数）&lt;/p&gt;
&lt;p&gt;例一：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;from functools import partial&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def mod( n, m ):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return n % m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mod_by_100 = partial( mod, 100 )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print mod( 100, 7 )  # 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print mod_by_100( 7 )  # 2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;例二：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;from functools import partial&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bin2dec = partial( int, base=2 )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print bin2dec( &amp;#x27;0b10001&amp;#x27; )  # 17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print bin2dec( &amp;#x27;10001&amp;#x27; )  # 17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hex2dec = partial( int, base=16 )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print hex2dec( &amp;#x27;0x67&amp;#x27; )  # 103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print hex2dec( &amp;#x27;67&amp;#x27; )  # 103&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>threading</title>
    <link href="https://hu1104.github.io/article/threading/"/>
    <id>https://hu1104.github.io/article/threading/</id>
    <published>2021-08-20T07:37:55.000Z</published>
    <updated>2021-08-30T02:05:09.031Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;python-多线程实现&quot;&gt;&lt;a href=&quot;#python-多线程实现&quot; class=&quot;headerlink&quot; title=&quot;python 多线程实现&quot;&gt;&lt;/a&gt;python 多线程实现&lt;/h1&gt;&lt;p&gt;首先，python的多线程是假的。&lt;/p&gt;
&lt;p&gt;看一个例子来看看python多线程的实现。&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import threading&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import time&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def say(name):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&amp;#x27;你好%s at %s&amp;#x27; %(name,time.ctime()))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        time.sleep(2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&amp;quot;结束%s at %s&amp;quot; %(name,time.ctime()))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def listen(name):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&amp;#x27;你好%s at %s&amp;#x27; % (name,time.ctime()))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    time.sleep(4)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&amp;quot;结束%s at %s&amp;quot; % (name,time.ctime()))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if __name__ == &amp;#x27;__main__&amp;#x27;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t1 = threading.Thread(target=say,args=(&amp;#x27;tony&amp;#x27;,))  #创建线程对象，Thread是一个类，实例化产生t1对象，这里就是创建了一个线程对象t1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t1.start() #启动线程，线程执行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t2 = threading.Thread(target=listen, args=(&amp;#x27;simon&amp;#x27;,)) #这里就是创建了一个线程对象t2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t2.start()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&amp;quot;程序结束=====================&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 输出结果为&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;你好tony at Fri Aug 20 15:42:07 2021 --t1线程执行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;你好simon at Fri Aug 20 15:42:07 2021 --t2线程执行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;程序结束===================== --主线程执行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;结束tony at Fri Aug 20 15:42:09 2021 --sleep之后，t1线程执行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;结束simon at Fri Aug 20 15:42:11 2021 --sleep之后，t2线程执行&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;我们可以看到主线程的print并不是等t1,t2线程都执行完毕之后才打印的，这是因为主线程和t1,t2 线程是同时跑的。但是主进程要等非守护子线程结束之后，主线程才会退出。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
